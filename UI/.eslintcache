[{"C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\index.js":"1","C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\App.js":"2","C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\reportWebVitals.js":"3","C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\forms\\CreateBadgeForm.js":"4","C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\forms\\RegistrationForm.js":"5","C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\forms\\CertificatePublicLinkForm.js":"6","C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\forms\\LoginForm.js":"7","C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\API\\CreateBadgeAPI.js":"8","C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\API\\RegistrationAPI.js":"9","C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\API\\AssertionDetailsByIdAPI.js":"10","C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\API\\LoginAPI.js":"11","C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\scripts\\functions.js":"12","C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\forms\\LandingForm.js":"13","C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\forms\\ViewUsersForm.js":"14","C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\API\\UserDetailsByEmailAPI.js":"15","C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\forms\\MyBackpackForm.js":"16","C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\forms\\ViewBadgeForm.js":"17","C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\forms\\ViewAssertionsForm.js":"18","C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\API\\AddJIRARequestAPI.js":"19","C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\API\\ViewUsersAPI.js":"20","C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\forms\\AssertionDetailsForm.js":"21","C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\forms\\UserDetailsForm.js":"22","C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\forms\\AddUserForm.js":"23","C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\API\\MyBackpackAPI.js":"24","C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\forms\\MyBackpackDetailsForm.js":"25","C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\API\\ViewAssertionForReviewersAPI.js":"26","C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\forms\\BadgeDetailsForm.js":"27","C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\API\\ViewAssertionsAPI.js":"28","C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\API\\ViewBadgeAPI.js":"29","C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\API\\UpdateUserBadgeStatusAPI.js":"30","C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\API\\UpdateAssertionAPI.js":"31","C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\API\\UpdateUserDetailsAPI.js":"32","C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\API\\AddNewUserAPI.js":"33","C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\API\\AddLinkedInCertificateAPI.js":"34","C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\API\\AddNewAssertionAPI.js":"35","C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\API\\UpdateBadgeAPI.js":"36","C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\API\\BadgeDetailsByNameAPI.js":"37","C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\forms\\ForgotPasswordForm.js":"38","C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\API\\SendPasswordResetEmailAPI.js":"39"},{"size":517,"mtime":1614892566947,"results":"40","hashOfConfig":"41"},{"size":702,"mtime":1614275260322,"results":"42","hashOfConfig":"41"},{"size":375,"mtime":1613679308125,"results":"43","hashOfConfig":"41"},{"size":7349,"mtime":1613679308067,"results":"44","hashOfConfig":"41"},{"size":9419,"mtime":1613679308084,"results":"45","hashOfConfig":"41"},{"size":8075,"mtime":1613679308065,"results":"46","hashOfConfig":"41"},{"size":7191,"mtime":1614897724750,"results":"47","hashOfConfig":"41"},{"size":1189,"mtime":1613679307681,"results":"48","hashOfConfig":"41"},{"size":978,"mtime":1613679307711,"results":"49","hashOfConfig":"41"},{"size":1121,"mtime":1613679307677,"results":"50","hashOfConfig":"41"},{"size":930,"mtime":1613679307682,"results":"51","hashOfConfig":"41"},{"size":243,"mtime":1614275260352,"results":"52","hashOfConfig":"41"},{"size":13081,"mtime":1614893601362,"results":"53","hashOfConfig":"41"},{"size":5692,"mtime":1614275260346,"results":"54","hashOfConfig":"41"},{"size":1032,"mtime":1613679307745,"results":"55","hashOfConfig":"41"},{"size":5400,"mtime":1613679308079,"results":"56","hashOfConfig":"41"},{"size":5124,"mtime":1614892797966,"results":"57","hashOfConfig":"41"},{"size":6898,"mtime":1614892566946,"results":"58","hashOfConfig":"41"},{"size":1289,"mtime":1614892566934,"results":"59","hashOfConfig":"41"},{"size":989,"mtime":1613679307764,"results":"60","hashOfConfig":"41"},{"size":16887,"mtime":1613679308061,"results":"61","hashOfConfig":"41"},{"size":14973,"mtime":1614275260345,"results":"62","hashOfConfig":"41"},{"size":14378,"mtime":1613679308060,"results":"63","hashOfConfig":"41"},{"size":905,"mtime":1613679307699,"results":"64","hashOfConfig":"41"},{"size":12685,"mtime":1614275260343,"results":"65","hashOfConfig":"41"},{"size":1087,"mtime":1614892566938,"results":"66","hashOfConfig":"41"},{"size":30044,"mtime":1614892747651,"results":"67","hashOfConfig":"41"},{"size":1008,"mtime":1613679307747,"results":"68","hashOfConfig":"41"},{"size":991,"mtime":1613679307750,"results":"69","hashOfConfig":"41"},{"size":1177,"mtime":1613679307729,"results":"70","hashOfConfig":"41"},{"size":1255,"mtime":1613679307712,"results":"71","hashOfConfig":"41"},{"size":1331,"mtime":1614275260311,"results":"72","hashOfConfig":"41"},{"size":1086,"mtime":1613679307666,"results":"73","hashOfConfig":"41"},{"size":339,"mtime":1613679307661,"results":"74","hashOfConfig":"41"},{"size":1382,"mtime":1613679307663,"results":"75","hashOfConfig":"41"},{"size":1441,"mtime":1613679307727,"results":"76","hashOfConfig":"41"},{"size":1115,"mtime":1613679307679,"results":"77","hashOfConfig":"41"},{"size":3371,"mtime":1614900511761,"results":"78","hashOfConfig":"41"},{"size":960,"mtime":1614900383658,"results":"79","hashOfConfig":"41"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},"lr831o",{"filePath":"83","messages":"84","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"82"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"82"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"82"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"82"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"82"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"82"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"82"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"82"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"82"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"82"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"82"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"82"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"82"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"82"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"82"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\index.js",[],["174","175"],"C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\App.js",["176","177","178"],"import React from 'react';\r\nimport LoginForm from './forms/LoginForm';\r\nimport RegistrationForm from './forms/RegistrationForm';\r\nimport CreateBadgeForm from './forms/CreateBadgeForm';\r\nimport CertificateForm from '../src/forms/CertificatePublicLinkForm';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\n\r\nconst App = () => {\r\n  \r\n  return (\r\n    <Router>\r\n    <div>\r\n      {/* <LoginForm /> */}\r\n      {/* <CreateBadgeForm /> */}\r\n      <Switch>\r\n          <Route path=\"/:assertionId\" children={<CertificateForm />} />\r\n          <Route path=\"\" children={<LoginForm/>}/>\r\n      </Switch>\r\n    </div>\r\n    </Router>\r\n\r\n  );\r\n};\r\n\r\nexport default App;\r\n","C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\reportWebVitals.js",[],"C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\forms\\CreateBadgeForm.js",["179","180","181","182","183","184","185"],"// import React from 'react';\r\nimport React, { useState } from 'react';\r\nimport getCreateBadgeResponse from '../API/CreateBadgeAPI'\r\nimport RegistrationForm from './RegistrationForm';\r\n\r\nconst CreateBadgeForm = (props) => {\r\n\r\n    const [badgeName, setBadgeName] = useState('');\r\n    const [badgeDescription, setBadgeDescription] = useState('');\r\n    const [badgeLink, setBadgeLink] = useState('');\r\n    const [reviewer, setReviewer] = useState('');\r\n    const [evidence, setEvidence] = useState('True');\r\n    const [owner, setOwner] = useState('');\r\n    const [badgeIcon, setBadgeIcon] = useState('');\r\n    const [userRequestable, setUserRequestable] = useState('True');\r\n    const [badgeType, setBadgeType] = useState('Open Badge');\r\n\r\n    // const [mandatoryBadgeName, setMandatoryBadgeName] = useState('');\r\n\r\n    const [createBadgeResponse, setCreateBadgeResponse] = useState('');\r\n\r\n    const handleBadgeName = event => {\r\n        setBadgeName(event.target.value);\r\n\r\n    };\r\n\r\n    const handleBadgeDescription = event => {\r\n        setBadgeDescription(event.target.value);\r\n\r\n    };\r\n\r\n    const handleBadgeLink = event => {\r\n        setBadgeLink(event.target.value);\r\n\r\n    };\r\n\r\n    const handleReviewer = event => {\r\n        setReviewer(event.target.value);\r\n\r\n    };\r\n\r\n    const handleEvidence = event => {\r\n        setEvidence(event.target.value);\r\n\r\n    };\r\n\r\n    const handleOwner = event => {\r\n        setOwner(event.target.value);\r\n\r\n    };\r\n    const handleUserRequestable = event => {\r\n        setUserRequestable(event.target.value);\r\n\r\n    };\r\n    const handleBadgeType = event => {\r\n        setBadgeType(event.target.value);\r\n\r\n    };\r\n\r\n    const handleBadgeIcon = event => {\r\n        setBadgeIcon(event.target.files[0]);\r\n    }\r\n\r\n    const ImageThumb = ({ image }) => {\r\n        return <img src={URL.createObjectURL(image)} alt={image.name} />;\r\n      };\r\n\r\n    const handleCreateBadge = async () => {\r\n\r\n        if(badgeName==''||badgeDescription==''||badgeLink==''||owner==''||reviewer=='')\r\n        {\r\n            // if(badgeName=='')\r\n            // setMandatoryBadgeName('Enter badge name')\r\n            setCreateBadgeResponse('Please fill all mandatory fields');\r\n        }\r\n        else{\r\n        var response = new Promise((resolve, reject) => {\r\n            resolve(getCreateBadgeResponse(badgeName, badgeDescription, badgeLink, userRequestable, badgeType, owner, reviewer, badgeIcon.name ,evidence));\r\n        }).then(value => {\r\n            // setPassword('');\r\n            setCreateBadgeResponse(value);\r\n\r\n\r\n        }\r\n        );\r\n            }\r\n\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <br></br>\r\n            <div>\r\n                <label> Badge Name *</label> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                <input type=\"text\"\r\n                    data-testid=\"badgeName\"\r\n                    value={badgeName}\r\n                    onChange={handleBadgeName}\r\n                />\r\n               {/* <label>{mandatoryBadgeName}</label> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; */}\r\n            </div>\r\n            <br></br>\r\n            <div>\r\n                <label> Badge Description *</label> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                <input type=\"text\"\r\n                    data-testid=\"badgeDescription\"\r\n                    value={badgeDescription}\r\n                    onChange={handleBadgeDescription}\r\n                />\r\n                \r\n            </div>\r\n\r\n            <br></br>\r\n            <div>\r\n                <label> Badge Link *</label> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                <input type=\"text\"\r\n                    data-testid=\"badgeLink\"\r\n                    value={badgeLink}\r\n                    onChange={handleBadgeLink}\r\n                />\r\n\r\n            </div>\r\n\r\n            <br></br>\r\n            <div>\r\n                <label> User Requestable</label> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                <select\r\n                    data-testid=\"userRequestable\"\r\n                    value={userRequestable}\r\n                    onChange={handleUserRequestable}>\r\n                        <option value='True'>\r\n                            True\r\n                        </option>\r\n                        <option value='False'>\r\n                            False\r\n                        </option>\r\n                </select>\r\n\r\n            </div>\r\n\r\n            <br></br>\r\n            <div>\r\n                <label> Badge Type</label> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                <select\r\n                    data-testid=\"badgeType\"\r\n                    value={badgeType}                    \r\n                    onChange={handleBadgeType}>\r\n                         <option value='Open Badge'>\r\n                    Open Badge\r\n                </option>\r\n                <option value='Community Badge'>\r\n                    Community Badge\r\n                </option>\r\n                    </select>                   \r\n            </div>\r\n\r\n            <br></br>\r\n            <div>\r\n                <label> Evidence *</label> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;              \r\n                <select\r\n                     data-testid=\"evidence\"\r\n                     value={evidence}\r\n                     onChange={handleEvidence}>\r\n                        <option value='True'>\r\n                            True\r\n                        </option>\r\n                        <option value='False'>\r\n                            False\r\n                        </option>\r\n                </select>\r\n            </div>\r\n\r\n            <br></br>\r\n            <div>\r\n                <label> Owner *</label> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                <input type=\"text\"\r\n                    data-testid=\"owner\"\r\n                    value={owner}\r\n                    onChange={handleOwner}\r\n                />\r\n\r\n            </div>\r\n\r\n            <br></br>\r\n            <div>\r\n                <label> Reviewer *</label> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                <input type=\"text\"\r\n                    data-testid=\"reviewer\"\r\n                    value={reviewer}\r\n                    onChange={handleReviewer}\r\n                />\r\n            </div>\r\n\r\n           \r\n\r\n            <br></br>\r\n            <div id=\"upload-box\">\r\n                <input type=\"file\"\r\n                    onChange={handleBadgeIcon}\r\n                    data-testid=\"badgeIcon\"\r\n                />\r\n            <br></br><br></br>\r\n            {badgeIcon && <ImageThumb image={badgeIcon} />}\r\n            </div>\r\n\r\n            <br></br>\r\n            <button data-testid=\"createBadgeButton\" onClick={handleCreateBadge}  >\r\n                Create Badge\r\n            </button>\r\n            <br></br>\r\n\r\n            <input\r\n                type=\"text\"\r\n                data-testid=\"createBadgeResponse\"\r\n                value={createBadgeResponse}\r\n                hidden\r\n                readOnly\r\n            />\r\n\r\n            <label>\r\n                {createBadgeResponse}\r\n            </label>\r\n\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\n\r\n\r\nexport default CreateBadgeForm;","C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\forms\\RegistrationForm.js",["186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206"],"import React, { useState, Text } from 'react';\r\nimport getRegistrationResponse from '../API/RegistrationAPI';\r\nimport LoginForm from './LoginForm';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\n\r\n\r\nconst RegistrationForm = () => {\r\n\r\n  const [firstName, setFirstName] = useState('');\r\n  const [lastName, setLastName] = useState('');\r\n  const [middleName, SetMiddleName] = useState('');\r\n  const [organizationName, SetOrganizationName] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [confirmPassword, setConfirmPassword] = useState('');\r\n  const [response, setresponse] = useState('');\r\n  const [firstNameClick,setFirstNameClick] = useState('False');\r\n  const [lastNameClick,setLastNameClick] = useState('False');\r\n  const [emailClick,setEmailClick] = useState('False');\r\n  const [passClick,setPassClick] = useState('False');\r\n  const [confPassClick,setConfPassClick] = useState('False');\r\n\r\n\r\n\r\n\r\n  const handleFirstNameChange = event => {\r\n    setFirstName(event.target.value);\r\n  };\r\n  const handleMiddleNameChange = event => {\r\n    SetMiddleName(event.target.value);\r\n  };\r\n  const handleLastNameChange = event => {\r\n    setLastName(event.target.value);\r\n  };\r\n  const handleOrganizationNameChange = event => {\r\n    SetOrganizationName(event.target.value);\r\n  };\r\n  const handleEmailChange = event => {\r\n    setEmail(event.target.value);\r\n  };\r\n  const handlePasswordChange = event => {\r\n    setPassword(event.target.value);\r\n  };\r\n  const handleConfirmPasswordChange = event => {\r\n    setConfirmPassword(event.target.value);\r\n\r\n  };\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n      marginTop: theme.spacing(8),\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'center',\r\n    },\r\n    avatar: {\r\n      margin: theme.spacing(1),\r\n      backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n      width: '100%', // Fix IE 11 issue.\r\n      marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n      margin: theme.spacing(3, 0, 2),\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n\r\n  const handleLogin = event => {\r\n    setresponse('login');\r\n  };\r\n\r\n  const handleRegistration = () => {\r\n    setFirstNameClick('True');\r\n    setLastNameClick('True');\r\n    setEmailClick('True');\r\n    setPassClick('True');\r\n    setConfPassClick('True');\r\n    \r\n    if (password != confirmPassword) {\r\n      setresponse('Password Mismatch');\r\n      setPassword('');\r\n      setConfirmPassword('');\r\n    }\r\n    else {\r\n      var response = new Promise((resolve, reject) => {\r\n        resolve(getRegistrationResponse(email, password,firstName,lastName,organizationName));\r\n      }).then(value => {\r\n        setresponse(value);\r\n      });\r\n    }\r\n  }\r\n\r\n  const handleReset = () => {\r\n    setPassword('');\r\n\r\n  }\r\n  if (response == 'login') {\r\n    return (\r\n      <div>\r\n        <LoginForm />\r\n\r\n      </div>\r\n    );\r\n  }\r\n  else {\r\n    if (response == 'registered') {\r\n      return (\r\n        <div>\r\n          <LoginForm result={'Registration Successful! Kindly Login!'} />\r\n\r\n        </div>\r\n      );\r\n    }\r\n    else {\r\n      return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n          <CssBaseline />\r\n          <div className={classes.paper}>\r\n            <Avatar className={classes.avatar}>\r\n              <LockOutlinedIcon />\r\n            </Avatar>\r\n            <Typography component=\"h1\" variant=\"h5\">\r\n              Sign up\r\n        </Typography>\r\n            {/* <form className={classes.form} noValidate> */}\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  autoComplete=\"fname\"\r\n                  name=\"firstName\"\r\n                  variant=\"outlined\"\r\n                  required\r\n                  fullWidth\r\n                  id=\"firstName\"\r\n                  label=\"First Name\"\r\n                  className={((firstName.length=='')&& (firstNameClick=='True')) ? 'emptyfield' : ''}\r\n                  inputProps={{\r\n                    \"data-testid\": \"firstName\",\r\n                  }}\r\n                  value={firstName}\r\n                  onChange={handleFirstNameChange}\r\n                  autoFocus\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  required\r\n                  fullWidth\r\n                  id=\"lastName\"\r\n                  label=\"Last Name\"\r\n                  name=\"lastName\"\r\n                  autoComplete=\"lname\"\r\n                  className={((lastName.length=='')&& (lastNameClick=='True')) ? 'emptyfield' : ''}\r\n                  inputProps={{\r\n                    \"data-testid\": \"lastName\",\r\n                  }}\r\n                  value={lastName}\r\n                  onChange={handleLastNameChange}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  \r\n                  fullWidth\r\n                  id=\"organization\"\r\n                  label=\"Organization Name\"\r\n                  name=\"organization\"\r\n                  autoComplete=\"organization\"\r\n                  inputProps={{\r\n                    \"data-testid\": \"organizationName\",\r\n                  }}\r\n                  value={organizationName}\r\n                  onChange={handleOrganizationNameChange}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  required\r\n                  fullWidth\r\n                  id=\"email\"\r\n                  label=\"Email Address\"\r\n                  name=\"email\"\r\n                  autoComplete=\"email\"\r\n                  className={((email.length=='')&& (emailClick=='True')) ? 'emptyfield' : ''}\r\n                  inputProps={{\r\n                    \"data-testid\": \"emailID\",\r\n                  }}\r\n                  value={email}\r\n                  onChange={handleEmailChange}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  required\r\n                  fullWidth\r\n                  name=\"password\"\r\n                  label=\"Password\"\r\n                  type=\"password\"\r\n                  className={((password.length=='')&& (passClick=='True')) ? 'emptyfield' : ''}\r\n                  id=\"password\"\r\n                  // autoComplete=\"current-password\"\r\n                  inputProps={{\r\n                    \"data-testid\": \"password\",\r\n                  }}\r\n                  value={password}\r\n                  onChange={handlePasswordChange}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  required\r\n                  fullWidth\r\n                  name=\"confirmpassword\"\r\n                  label=\"Confirm Password\"\r\n                  type=\"password\"\r\n                  className={((confirmPassword.length=='')&& (confPassClick=='True')) ? 'emptyfield' : ''}\r\n                  id=\"confirmpassword\"\r\n                  // autoComplete=\"current-password\"\r\n                  inputProps={{\r\n                    \"data-testid\": \"confirmPassword\",\r\n                  }}\r\n\r\n                  value={confirmPassword}\r\n                  onChange={handleConfirmPasswordChange}\r\n                />\r\n              </Grid>\r\n              {/* <Grid item xs={12}>\r\n              <FormControlLabel\r\n                control={<Checkbox value=\"allowExtraEmails\" color=\"primary\" />}\r\n                label=\"I want to receive inspiration, marketing promotions and updates via email.\"\r\n              />\r\n            </Grid> */}\r\n            </Grid>\r\n            <Button\r\n              type=\"submit\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.submit}\r\n              data-testid=\"registerButton\" onClick={handleRegistration}>\r\n              Sign Up\r\n\r\n          </Button>\r\n            <Grid container justify=\"flex-end\">\r\n              <Grid item>\r\n                <Link href=\"#\" variant=\"body2\"\r\n                  data-testid=\"loginButton\" onClick={handleLogin}>\r\n                  Already have an account? Sign in\r\n              </Link>\r\n              </Grid>\r\n            </Grid>\r\n            <input type=\"text\"\r\n              data-testid=\"response\"\r\n              hidden\r\n              readOnly\r\n              value={response} />\r\n            <label>{response}</label>\r\n            {/* </form> */}\r\n          </div>\r\n        </Container>\r\n      );\r\n    }\r\n  }\r\n};\r\n\r\nexport default RegistrationForm;","C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\forms\\CertificatePublicLinkForm.js",["207","208","209","210","211","212","213","214","215","216","217","218","219","220","221"],"import React, {useState, Text, useEffect} from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport LabelImportantIcon from '@material-ui/icons/LabelImportant';\r\nimport CardMembershipIcon from '@material-ui/icons/CardMembership';\r\nimport getAssertionDetailByIdResponse from '../API/AssertionDetailsByIdAPI';\r\nimport formatDate from '../scripts/functions';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n\r\n  useParams\r\n} from \"react-router-dom\";\r\nconst CertificateForm = () => {\r\n  // const [assertionId, setAssertionId] = useState(props.assertionId);\r\n  const [badgeName, setBadgeName] = useState('');\r\n  const [badgeRecipient, setBadgeRecipient] = useState('');\r\n  const [badgeDescription, setBadgeDescription] = useState('');\r\n  const [publicImage, setPublicImage]=useState('');\r\n  let { assertionId } = useParams();\r\n  const [badgeIssuedOn, setBadgeIssuedOn] = useState('');\r\n    const useStyles = makeStyles((theme) => ({\r\n      root: {\r\n        height: '100vh',\r\n      },\r\n      root1: {\r\n        maxWidth: 345,\r\n      },\r\n      media: {\r\n        height: '80vh',\r\n      },\r\n      mediasub: {\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        height: '70%',\r\n        width:'70%',\r\n        marginLeft:80,\r\n      },\r\n      image: {\r\n        backgroundImage: 'url(image)',\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundColor:\r\n          theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[900],\r\n        backgroundSize: 'cover',\r\n        backgroundPosition: 'center',\r\n      },\r\n      paper: {\r\n        margin: theme.spacing(8, 4),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n      },\r\n      paper1: {\r\n        margin: theme.spacing(5, 3),\r\n        display: 'inline',\r\n        // flexDirection: 'column',\r\n        textAlign: 'left',\r\n      },\r\n      avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.success.main,\r\n      },\r\n      form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n      },\r\n      submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n      },\r\n    }));\r\n\r\n    const handleviewAssertionById = async () => {\r\n\r\n      var response1 = new Promise((resolve, reject) => {\r\n          resolve(getAssertionDetailByIdResponse(assertionId));\r\n      }).then(value => {\r\n          if (value != undefined) {\r\n             \r\n              setBadgeName(value[0].badge_details[0].name);\r\n              setBadgeRecipient(value[0].user_details[0].email);\r\n              setBadgeDescription(value[0].badge_details[0].description);\r\n              setPublicImage(value[0].badge_details[0].icon);\r\n              if(value[0].issuedOn!=null)\r\n                  setBadgeIssuedOn(formatDate(value[0].issuedOn.$date));\r\n              \r\n          }\r\n\r\n\r\n      });\r\n\r\n  }\r\n    useEffect(() => {\r\n    \r\n      if(assertionId!=null)\r\n        handleviewAssertionById()\r\n    }, []);\r\n      const classes = useStyles();\r\n\r\n  \r\n    \r\n    \r\n        return (\r\n      \r\n          <Grid container component=\"main\" className={classes.root}>\r\n          <CssBaseline />\r\n          <Grid item xs={false} sm={4} md={5} className={classes.image} >\r\n            <div>\r\n            <Card className={classes.root}>\r\n      <CardActionArea>\r\n        <CardMedia\r\n          className={classes.media}\r\n          image=\"/static/images/white-background.jpg\"\r\n          title=\"Contemporary Background\"\r\n        >\r\n        <br></br>\r\n        <br></br>\r\n        <br></br>\r\n        <br></br>\r\n        <CardMedia \r\n          className={classes.mediasub} \r\n          id=\"publiclink_iconImage\"\r\n          data-testid=\"publiclink_iconImage\"\r\n          \r\n          image={publicImage}\r\n          title=\"Badge Icon\"\r\n        />\r\n          \r\n        </CardMedia>\r\n        <CardContent>\r\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n          DXC Industrialized AI Badge Platform\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n            Experiment, Experience and Evolve your AI Skills.\r\n            <br/>\r\n           <a href=\"https://industrialized-ai-starter.azurewebsites.net/\">\r\n            https://industrialized-ai-starter.azurewebsites.net/\r\n            </a>\r\n          </Typography>\r\n        </CardContent>\r\n      </CardActionArea>\r\n   \r\n    </Card>\r\n            </div>\r\n            </Grid>\r\n          <Grid item xs={12} sm={8} md={7} component={Paper} elevation={6} square>\r\n            <div className={classes.paper}>\r\n              <Avatar className={classes.avatar}>\r\n                <CardMembershipIcon />\r\n              </Avatar>\r\n              <Typography component=\"h1\" variant=\"h5\">\r\n                Badge Issued\r\n              </Typography>\r\n              <br/>\r\n              \r\n              <form className={classes.form} noValidate>\r\n  \r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  margin=\"normal\"\r\n            \r\n                  fullWidth\r\n                  id=\"email\"\r\n                  label=\"Recipient\"\r\n                  name=\"email\"\r\n                  \r\n                  value={badgeRecipient}\r\n                  inputProps={{\r\n                    \"data-testid\": \"pubiclink_recipient\",\r\n                  }}\r\n                />\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  margin=\"normal\"\r\n                  \r\n                  fullWidth\r\n                  name=\"Name\"\r\n                  label=\"Badge Name\"\r\n                  value={badgeName}\r\n                  inputProps={{\r\n                    \"data-testid\": \"pubiclink_name\",\r\n                  }}\r\n                  \r\n                />\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  margin=\"normal\"\r\n                  value={badgeDescription}\r\n                  fullWidth\r\n                  multiline\r\n                  name=\"Description\"\r\n                  label=\"Badge Description\"\r\n                  inputProps={{\r\n                    \"data-testid\": \"pubiclink_description\",\r\n                  }}\r\n                  \r\n                  \r\n                />\r\n\r\n            <TextField\r\n                  variant=\"outlined\"\r\n                  margin=\"normal\"\r\n                  \r\n                  fullWidth\r\n                  name=\"IssuedOn\"\r\n                  label=\"Issued On\"\r\n                  value={badgeIssuedOn}\r\n                  inputProps={{\r\n                    \"data-testid\": \"pubiclink_issuedOn\",\r\n                  }}\r\n                  \r\n                />\r\n\r\n<TextField\r\n                  variant=\"outlined\"\r\n                  margin=\"normal\"\r\n                  \r\n                  fullWidth\r\n                  name=\"Issuer\"\r\n                  label=\"Issuer\"\r\n                  value=\"DXC Technology\"\r\n                  \r\n                  inputProps={{\r\n                    \"data-testid\": \"pubiclink_issuedBy\",\r\n                  }}\r\n                />\r\n               \r\n              </form>\r\n            </div>\r\n          </Grid>\r\n        </Grid>\r\n        );\r\n    }\r\n\r\n\r\n\r\nexport default CertificateForm;","C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\forms\\LoginForm.js",["222","223","224","225","226","227","228","229","230","231","232","233","234","235","236"],"C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\API\\CreateBadgeAPI.js",[],"C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\API\\RegistrationAPI.js",["237"],"const getRegistrationResponse = async(username, password,firstName,lastName,organization) => {\r\n    //GET request\r\n    var url = process.env.REACT_APP_APILINK+'/register?email=' + username + '&password=' + password+'&userType=regular'+'&firstName='+firstName+'&secondName='+lastName+'&organizationName='+organization;\r\n    return await fetch(url, {\r\n            method: 'GET',\r\n            //Request Type\r\n        })\r\n        .then((response) => response.text())\r\n        //If response is in json then in success\r\n        .then((responseText) => {\r\n            //Success\r\n            // alert(JSON.stringify(responseJson));\r\n            console.log(responseText);\r\n            return responseText;\r\n        })\r\n        //If response is not in json then in error\r\n        .catch((error) => {\r\n            //Error\r\n            // alert(JSON.stringify(error));\r\n            console.error(error);\r\n            return error;\r\n        });\r\n}\r\n\r\nexport default getRegistrationResponse;","C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\API\\AssertionDetailsByIdAPI.js",[],"C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\API\\LoginAPI.js",[],"C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\scripts\\functions.js",[],"C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\forms\\LandingForm.js",["238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254"],"C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\forms\\ViewUsersForm.js",["255","256","257","258","259","260","261","262","263","264"],"import React, { useState, Text, useEffect } from 'react';\r\nimport ViewUsersResponse from '../API/ViewUsersAPI';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport EditSharpIcon from '@material-ui/icons/EditSharp';\r\nimport formatDate from '../scripts/functions';\r\nimport Hidden from '@material-ui/core/Hidden';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AssertionDetailsForm from './AssertionDetailsForm';\r\nimport UserDetailByEmailResponse from '../API/UserDetailsByEmailAPI';\r\nimport UserDetailsForm from './UserDetailsForm';\r\nimport AddUserForm from './AddUserForm';\r\nimport Button from '@material-ui/core/Button';\r\nimport Box from '@material-ui/core/Box';\r\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\r\n\r\nconst ViewUsersForm = (props) => {\r\n\r\n\r\n  const [response, setresponse] = useState('0');\r\n  const [userDetailClick, setUserDetailClick] = useState('false');\r\n  const [clickedUser, setClickedUser] = useState('');\r\n  const [addUserButtonClick, setAddUserButtonClick] = useState('false');\r\n  const [userID, setUserID]=useState(props.userID)\r\n\r\n  function createData(id, mongoId, email, userType, userStatus, createdDate, lastModified, firstName, lastName, middleName, organizationName) {\r\n    return { id, mongoId, email, userType, userStatus, createdDate, lastModified, firstName, lastName, middleName, organizationName};\r\n  }\r\n\r\n  const [rows, setrows] = useState([]);\r\n  // //   const [passwordClick,setPasswordClick] = useState('False');\r\n\r\n  const handleUserDetails = event => {\r\n    setUserDetailClick('true');\r\n    setClickedUser(event.currentTarget.value);\r\n  }\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    seeMore: {\r\n      marginTop: theme.spacing(3),\r\n    },\r\n  }));\r\n\r\n\r\n  const classes = useStyles();\r\n\r\n  const handleAddUserButton = () =>{\r\n    setAddUserButtonClick('true');\r\n  }\r\n\r\n\r\n  const handleviewUsers = async () => {\r\n\r\n    var response1 = new Promise((resolve, reject) => {\r\n      resolve(ViewUsersResponse());\r\n    }).then(value => {\r\n      if (value != undefined) {\r\n        setresponse(value.length);\r\n        const temp_rows = []\r\n        for (var i = 0; i < value.length; i++) {\r\n          temp_rows.push(createData(i, value[i]._id.$oid, value[i].email, value[i].user_type_details[0].type, value[i].user_status_details[0].userStatus, value[i].created.$date, value[i].modified.$date, value[i].firstName, value[i].secondName, value[i].middleName, value[i].organizationName));\r\n        }\r\n\r\n        setrows(temp_rows);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    handleviewUsers()\r\n  }, []);\r\n\r\nif (addUserButtonClick =='true') { return (<div><AddUserForm/></div>);}\r\nelse{\r\n  if (userDetailClick == 'true') { return (<div><UserDetailsForm email={clickedUser} userID={userID}/></div>); }\r\n  else {\r\n\r\n    return (\r\n      <div>\r\n        \r\n        \r\n        <input data-testid='viewUsers_RowCount' hidden value={response} />\r\n\r\n        <React.Fragment>\r\n                <Box mx=\"auto\" ml={6} className={classes.root}>\r\n                <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.button}\r\n                startIcon={<PersonAddIcon/>}\r\n                data-testid=\"viewUsers_addUserButton\"\r\n                onClick={handleAddUserButton}\r\n                >\r\n                Add New User\r\n                </Button>\r\n                </Box>\r\n\r\n\r\n                <br></br>\r\n          <Table size=\"small\">\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell></TableCell>\r\n                <TableCell data-testid='viewUsers_email'>Email</TableCell>\r\n                <TableCell>User Type</TableCell>\r\n                <TableCell>User Status</TableCell>\r\n                <TableCell>Created</TableCell>\r\n                <TableCell>Last Modified</TableCell>\r\n                <TableCell>First Name</TableCell>\r\n                <TableCell>Middle Name</TableCell>\r\n                <TableCell>Last Name</TableCell>\r\n                <TableCell>Organization Name</TableCell>\r\n                <TableCell align=\"right\">Options</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {rows.map((row) => (\r\n                <TableRow data-testid={'viewUsers_RowID' + row.id} key={row.id} >\r\n\r\n                  <TableCell></TableCell>\r\n\r\n                  <TableCell>{row.email}</TableCell>\r\n                  <TableCell >{row.userType}</TableCell>\r\n                  <TableCell>{row.userStatus}</TableCell>\r\n                  <TableCell>{formatDate(row.createdDate)}</TableCell>\r\n                  <TableCell>{formatDate(row.lastModified)}</TableCell>\r\n                  <TableCell>{row.firstName}</TableCell>\r\n                  <TableCell >{row.middleName}</TableCell>\r\n                  <TableCell>{row.lastName}</TableCell>\r\n                  <TableCell>{row.organizationName}</TableCell>\r\n                  \r\n                  <TableCell align=\"right\">\r\n                    <IconButton data-testid={'viewUsers_editUserButton' + row.id} value={row.email} onClick={handleUserDetails}>\r\n                      <EditSharpIcon />\r\n                    </IconButton>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </React.Fragment>\r\n      </div >\r\n\r\n    );\r\n }\r\n}\r\n};\r\n\r\nexport default ViewUsersForm;","C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\API\\UserDetailsByEmailAPI.js",[],"C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\forms\\MyBackpackForm.js",["265","266","267","268","269","270","271","272"],"import React,{useEffect, useState} from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CameraIcon from '@material-ui/icons/PhotoCamera';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport Link from '@material-ui/core/Link';\r\nimport getMyBackpackResponse from '../API/MyBackpackAPI';\r\nimport MyBackpackDetailsForm from './MyBackpackDetailsForm';\r\n\r\nconst MyBackpackForm = (props) => {\r\n\r\n\r\nconst [response, setresponse] = useState('0');\r\nconst [userID,setuserID] = useState(props.userID);\r\nconst [mybackpackDetailsClick, setMybackpackDetailsClick] = useState('false');\r\nconst [clickedAssertion, setClickedAssertion] = useState('');\r\n\r\nfunction createData(i, id, badgeName, badgeIcon) {\r\n  return {i, id, badgeName, badgeIcon };\r\n}\r\n\r\nconst [rows, setrows] = useState([]);\r\n\r\nconst handleMybackpackAssertionButton = event => {\r\n  setMybackpackDetailsClick('true');\r\n  setClickedAssertion(event.currentTarget.value);\r\n  //alert(event.currentTarget.value);\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  icon: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  heroContent: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    padding: theme.spacing(8, 0, 6),\r\n  },\r\n  heroButtons: {\r\n    marginTop: theme.spacing(4),\r\n  },\r\n  cardGrid: {\r\n    paddingTop: theme.spacing(8),\r\n    paddingBottom: theme.spacing(8),\r\n  },\r\n  card: {\r\n    height: '100%',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n  },\r\n  cardMedia: {\r\n    paddingTop: '56.25%', // 16:9\r\n    width: '60%',\r\n    height: '60%',   \r\n    marginLeft:'20%' ,\r\n  },\r\n  cardContent: {\r\n    flexGrow: 1,\r\n  },\r\n  footer: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    padding: theme.spacing(6),\r\n  },\r\n}));\r\n\r\n      \r\n  const handleviewBackpackAssertions = async () => {\r\n\r\n    var response1 = new Promise((resolve, reject) => {\r\n      resolve(getMyBackpackResponse(userID));\r\n    }).then(value => {\r\n      if (value != undefined) {\r\n        setresponse(value.length);\r\n        // alert(value);\r\n        const temp_rows = []\r\n        for (var i = 0; i < value.length; i++) {\r\n          temp_rows.push(createData(i, value[i]._id.$oid, value[i].badge_name[0].name,value[i].badge_name[0].icon));\r\n\r\n        }\r\n\r\n        setrows(temp_rows);\r\n      }\r\n    });\r\n  }\r\n\r\n \r\n      useEffect(() => {\r\n        handleviewBackpackAssertions()\r\n    }, []);\r\n      \r\n      const cards = [1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n\r\n      const classes = useStyles();\r\n\r\nif (mybackpackDetailsClick == 'true') { return (<div><MyBackpackDetailsForm assertionId={clickedAssertion} /></div>); }\r\nelse {\r\n  return (\r\n    \r\n    <div>\r\n      <input data-testid='viewMyBackpack_RowCount' hidden value={response} />\r\n        <input data-testid='viewMyBackpack_badgeName' hidden value={response} />\r\n        <React.Fragment>\r\n      <CssBaseline />\r\n      <AppBar position=\"relative\">\r\n        <Toolbar>\r\n          {/* <CameraIcon className={classes.icon} /> */}\r\n          <Typography variant=\"h6\" color=\"inherit\" noWrap>\r\n            Backpack\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <main>\r\n        \r\n        <Container className={classes.cardGrid} maxWidth=\"md\">\r\n          \r\n          <Grid container spacing={4}>\r\n            {rows.map((row) => (\r\n              <Grid item key={row.i} xs={12} sm={6} md={4}>\r\n                <Card className={classes.card}>\r\n                  <CardMedia\r\n                    className={classes.cardMedia}\r\n                    image= {row.badgeIcon}     \r\n                    data-testid={'viewMyBackpack_Icon'+row.i}                  \r\n                  />\r\n                  <CardContent className={classes.cardContent}>\r\n                                       \r\n                    {/* <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                     {row.badgeName}\r\n                    </Typography> */}\r\n                    <Typography>\r\n                      <div data-testid={'viewMyBackpack_BadgeName'+row.i} key={row.i} >\r\n                      {row.badgeName.toUpperCase()}\r\n                      </div>\r\n                    </Typography>\r\n                  </CardContent>\r\n                   <CardActions>\r\n                    <Button size=\"small\" color=\"primary\"                      \r\n                      data-testid={'viewMybackpack_assertionsButton'+row.i}\r\n                      value={row.id}\r\n                      onClick={handleMybackpackAssertionButton}>\r\n                        View\r\n                    </Button>\r\n                    {/* <Button size=\"small\" color=\"primary\">\r\n                      Edit\r\n                    </Button> */}\r\n                  </CardActions> \r\n                </Card>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </Container>\r\n      </main>\r\n   \r\n    </React.Fragment>\r\n    </div>\r\n  );\r\n                  }\r\n};\r\n\r\nexport default MyBackpackForm;","C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\forms\\ViewBadgeForm.js",["273","274","275","276","277","278","279","280","281","282","283","284"],"import React, { useState, Text, useEffect } from 'react';\r\nimport getViewBadgeResponse from '../API/ViewBadgeAPI';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport EditSharpIcon from '@material-ui/icons/EditSharp';\r\nimport PageviewIcon from '@material-ui/icons/Pageview';\r\nimport BadgeDetailsForm from './BadgeDetailsForm';\r\nimport IconButton from '@material-ui/core/IconButton'\r\n\r\n\r\n\r\nconst ViewBadgeForm = (props) => {\r\n\r\n\r\n  const [response, setresponse] = useState('0');\r\n  const [userType, setUserType] = useState(props.userType);\r\n  const [userID, setUserID ]= useState(props.userID);\r\n  const [badgeDetailsClick, setBadgeDetailsClick] = useState('false');\r\n  const [clickedBadge, setClickedBadge]=useState('');\r\n  const [clickType, setClickType] = useState('');\r\n\r\n  function createData(id, mongoID, name, description, count, lastIssued, icon ) {\r\n    return { id, mongoID, name, description, count, lastIssued, icon};\r\n  }\r\n\r\n  const [rows, setrows] = useState([]);\r\n  const [passwordClick,setPasswordClick] = useState('False');\r\n\r\n\r\n  const handleUserViewBadgeDetails=event=>{\r\n    setBadgeDetailsClick('true');\r\n    setClickType('UserView');\r\n    setClickedBadge(event.currentTarget.value);\r\n  }\r\n\r\n  const handleAdminEditBadgeDetails=event=>{\r\n    setBadgeDetailsClick('true');\r\n    setClickType('AdminEdit');\r\n    setClickedBadge(event.currentTarget.value);\r\n  }\r\n\r\n  const handleAdminViewBadgeDetails=event=>{\r\n    setBadgeDetailsClick('true');\r\n    setClickType('AdminView');\r\n    setClickedBadge(event.currentTarget.value);\r\n  }\r\n\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    seeMore: {\r\n      marginTop: theme.spacing(3),\r\n    },\r\n  }));\r\n\r\n\r\n  const classes = useStyles();\r\n\r\n\r\n  const handleviewBadge = async () => {\r\n\r\n    var response1 = new Promise((resolve, reject) => {\r\n      resolve(getViewBadgeResponse());\r\n    }).then(value => {\r\n      if (value != undefined)\r\n      {\r\n        setresponse(value.length);\r\n        // console.log(response);\r\n         \r\n          const temp_rows = []\r\n          for (var i = 0; i < value.length; i++) {\r\n            temp_rows.push(createData(i,value[i]._id.$oid,value[i].name,value[i].description,value[i].lastIssued,value[i].count, value[i].icon));              \r\n          }\r\n          setrows (temp_rows);\r\n      }\r\n\r\n    \r\n    });\r\n\r\n  }\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    handleviewBadge()\r\n  }, []);\r\n\r\nif(badgeDetailsClick=='true'){ return (<div><BadgeDetailsForm userType={userType} clickType={clickType} badgeName={clickedBadge} userID={userID}/></div>);}\r\nelse\r\n{\r\n  \r\n  return (\r\n    \r\n    <div>\r\n      <input data-testid='viewBadge_RowCount' hidden value={response} readOnly />\r\n\r\n      <React.Fragment>\r\n        {/* <Title>Recent Orders</Title> */}\r\n        <Table size=\"small\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell></TableCell>\r\n              <TableCell data-testid='viewBadge_badgeName'>Badge Name</TableCell>\r\n              <TableCell>Description</TableCell>\r\n              <TableCell>Last Issued</TableCell>\r\n              <TableCell>Count</TableCell>\r\n              <TableCell align=\"right\">Options</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {rows.map((row) => (\r\n              <TableRow data-testid={'viewBadge_BadgeID'+row.id} key={row.id} >\r\n                {/* <TableCell >{row.mongoID}</TableCell> */}\r\n                <TableCell><img src={row.icon} width=\"100\"/></TableCell>\r\n                <TableCell>{row.name}</TableCell>\r\n                <TableCell >{row.description}</TableCell>\r\n                <TableCell>{row.lastIssued}</TableCell>\r\n                <TableCell >{row.count}</TableCell>\r\n                {userType=='5f760d4325c1036d4d466560'?\r\n                <TableCell align=\"right\">\r\n                <IconButton data-testId={'viewBadge_viewBadgeButton'+row.id} value={row.name} onClick={handleAdminViewBadgeDetails}>\r\n                <PageviewIcon/>\r\n                </IconButton>\r\n\r\n                <IconButton data-testId={'viewBadge_editBadgeButton'+row.id} value={row.name} onClick={handleAdminEditBadgeDetails}>\r\n                <EditSharpIcon/>\r\n                </IconButton>\r\n                </TableCell>\r\n                :\r\n                <TableCell align=\"right\">\r\n                <IconButton data-testId={'viewBadge_viewBadgeButton'+row.id} value={row.name} onClick={handleUserViewBadgeDetails}>\r\n                <PageviewIcon/>\r\n                </IconButton>\r\n                </TableCell>}\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n        {/* <div className={classes.seeMore}>\r\n          <Link color=\"primary\" href=\"#\" onClick={preventDefault}>\r\n            See more orders\r\n        </Link>\r\n        </div> */}\r\n      </React.Fragment>\r\n    </div>\r\n\r\n  );\r\n      }\r\n};\r\n\r\nexport default ViewBadgeForm;","C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\forms\\ViewAssertionsForm.js",["285","286","287","288","289","290","291","292","293","294","295","296","297"],"import React, { useState, Text, useEffect } from 'react';\r\nimport getViewAssertionsResponse from '../API/ViewAssertionsAPI';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport EditSharpIcon from '@material-ui/icons/EditSharp';\r\nimport formatDate from '../scripts/functions';\r\nimport Hidden from '@material-ui/core/Hidden';\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport AssertionDetailsForm from './AssertionDetailsForm';\r\nimport getViewAssertionsForReviewersResponse from '../API/ViewAssertionForReviewersAPI'\r\n\r\nconst ViewAssertionsForm = (props) => {\r\n\r\n\r\n  const [response, setresponse] = useState('0');\r\n  const [assertionDetailClick, setAssertionDetailClick] = useState('false');\r\n  const [clickedAssertion, setClickedAssertion] = useState('0');\r\n  const [email , setEmail] = useState(props.email);\r\n  const [userType,setUserType]=useState(props.userType);\r\n  const [userID,setUserID]=useState(props.userID);\r\n\r\n  function createData(id, mongoId, user, badgeName, issuedOn, status) {\r\n    return { id, mongoId, user, badgeName, issuedOn, status };\r\n  }\r\n\r\n  const [rows, setrows] = useState([]);\r\n  // //   const [passwordClick,setPasswordClick] = useState('False');\r\n\r\n  const handleAssertionDetails = event => {\r\n    setAssertionDetailClick('true');\r\n    setClickedAssertion(event.currentTarget.value);\r\n\r\n    //\r\n  }\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    seeMore: {\r\n      marginTop: theme.spacing(3),\r\n    },\r\n  }));\r\n\r\n\r\n  const classes = useStyles();\r\n\r\n\r\n  const handleviewAssertions = async () => {\r\n    if (userType=='5fc5567fcd831cc0c83774b8'){\r\n      var response1 = new Promise((resolve, reject) => {\r\n        resolve(getViewAssertionsForReviewersResponse(userID));\r\n      }).then(value => {\r\n        if (value != undefined) {\r\n          setresponse(value.length);\r\n          const temp_rows = []\r\n          for (var i = 0; i < value.length; i++) {\r\n            temp_rows.push(createData(i, value[i]._id.$oid, value[i].user_email_address[0].email, value[i].badge_details[0].name, value[i].issuedOn.$date, value[i].badge_status[0].badgeStatus));\r\n  \r\n          }\r\n  \r\n          setrows(temp_rows);\r\n        }\r\n      });\r\n  }\r\n  else{\r\n    var response1 = new Promise((resolve, reject) => {\r\n      resolve(getViewAssertionsResponse());\r\n    }).then(value => {\r\n      if (value != undefined) {\r\n        setresponse(value.length);\r\n        const temp_rows = []\r\n        for (var i = 0; i < value.length; i++) {\r\n          temp_rows.push(createData(i, value[i]._id.$oid, value[i].user_email_address[0].email, value[i].badge_name[0].name, value[i].issuedOn.$date, value[i].badge_status[0].badgeStatus));\r\n\r\n        }\r\n\r\n        setrows(temp_rows);\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n  \r\n\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    handleviewAssertions()\r\n  }, []);\r\n\r\n  if (assertionDetailClick == 'true') { return (<div><AssertionDetailsForm assertionId={clickedAssertion} email ={email} userType={userType} userID={userID} /></div>); }\r\n  else {\r\n// if(userType=='5fc5567fcd831cc0c83774b8')//reviewer\r\n// {\r\n//   return (\r\n//     <div>\r\n//       <input data-testid='viewAssertions_RowCount' hidden value={response} />\r\n\r\n//       <React.Fragment>\r\n//         {/* <Title>Recent Orders</Title> */}\r\n//         <Table size=\"small\">\r\n//           <TableHead>\r\n//             <TableRow>\r\n//               <TableCell></TableCell>\r\n//               <TableCell data-testid='viewAssertions_badgeName'>User</TableCell>\r\n//               <TableCell>Badge</TableCell>\r\n//               <TableCell>Issued On</TableCell>\r\n//               <TableCell>Status</TableCell>\r\n//               <TableCell align=\"right\">Options</TableCell>\r\n//             </TableRow>\r\n//           </TableHead>\r\n//           <TableBody>\r\n//             {rows.map((row) => (\r\n//               <TableRow data-testid={'viewAssertions_RowID' + row.id} key={row.id} >\r\n\r\n//                 <TableCell></TableCell>\r\n\r\n//                 {/* <TableCell display=\"none\" >{row.mongoId}</TableCell> */}\r\n\r\n//                 <TableCell>{row.user}</TableCell>\r\n//                 <TableCell >{row.badgeName}</TableCell>\r\n\r\n//                 <TableCell>{formatDate(row.issuedOn)}</TableCell>\r\n//                 <TableCell>{row.status}</TableCell>\r\n//                 {/* <TableCell align=\"right\"><EditSharpIcon id=\"viewAssertions_MongoID\" value={row.mongoId} /></TableCell> */}\r\n//                 <TableCell align=\"right\">\r\n//                   <IconButton data-testid={'viewAssertions_editAssertionButton' + row.id} value={row.mongoId} onClick={handleAssertionDetails}>\r\n//                     <EditSharpIcon />\r\n//                   </IconButton>\r\n//                 </TableCell>\r\n//               </TableRow>\r\n//             ))}\r\n//           </TableBody>\r\n//         </Table>\r\n//       </React.Fragment>\r\n//     </div >\r\n\r\n//   );\r\n// }\r\n// else{\r\n    return (\r\n      <div>\r\n        <input data-testid='viewAssertions_RowCount' hidden value={response} />\r\n\r\n        <React.Fragment>\r\n          {/* <Title>Recent Orders</Title> */}\r\n          <Table size=\"small\">\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell></TableCell>\r\n                <TableCell data-testid='viewAssertions_badgeName'>User</TableCell>\r\n                <TableCell>Badge</TableCell>\r\n                <TableCell>Issued On</TableCell>\r\n                <TableCell>Status</TableCell>\r\n                <TableCell align=\"right\">Options</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {rows.map((row) => (\r\n                <TableRow data-testid={'viewAssertions_RowID' + row.id} key={row.id} >\r\n\r\n                  <TableCell></TableCell>\r\n\r\n                  {/* <TableCell display=\"none\" >{row.mongoId}</TableCell> */}\r\n\r\n                  <TableCell>{row.user}</TableCell>\r\n                  <TableCell >{row.badgeName}</TableCell>\r\n\r\n                  <TableCell>{formatDate(row.issuedOn)}</TableCell>\r\n                  <TableCell>{row.status}</TableCell>\r\n                  {/* <TableCell align=\"right\"><EditSharpIcon id=\"viewAssertions_MongoID\" value={row.mongoId} /></TableCell> */}\r\n                  <TableCell align=\"right\">\r\n                    <IconButton data-testid={'viewAssertions_editAssertionButton' + row.id} value={row.mongoId} onClick={handleAssertionDetails}>\r\n                      <EditSharpIcon />\r\n                    </IconButton>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </React.Fragment>\r\n      </div >\r\n\r\n    );\r\n  }\r\n};\r\n// }\r\n\r\nexport default ViewAssertionsForm;","C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\API\\AddJIRARequestAPI.js",[],"C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\API\\ViewUsersAPI.js",[],"C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\forms\\AssertionDetailsForm.js",["298","299","300","301","302","303","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","320","321","322","323","324","325","326"],"import React, {useState, Text, useEffect} from 'react';\r\nimport getRegistrationResponse from '../API/RegistrationAPI';\r\nimport LoginForm from './LoginForm';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport getAssertionDetailByIdResponse from '../API/AssertionDetailsByIdAPI'\r\nimport formatDate from '../scripts/functions';\r\nimport CardMembershipOutlinedIcon from '@material-ui/icons/CardMembershipOutlined';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport updateAssertionResponse from '../API/UpdateAssertionAPI';\r\n\r\nimport { InputLabel } from '@material-ui/core';\r\nimport ViewAssertionsForm from './ViewAssertionsForm';\r\nimport UserDetailByEmailResponse from '../API/UserDetailsByEmailAPI';\r\nimport updateUserBadgeStatusResponse from '../API/UpdateUserBadgeStatusAPI';\r\n\r\nconst AssertionDetailsForm = (props) => {\r\n\r\n    const [assertionId, setAssertionId] = useState(props.assertionId);\r\n    const [badgeName, setBadgeName] = useState('');\r\n    const [badgeRecipient, setBadgeRecipient] = useState('');\r\n    const [modifiedDate, setModifiedDate] = useState('');\r\n    const [badgeStatus, setBadgeStatus] = useState('');\r\n    const [evidencelink, setEvidencelink] = useState('');\r\n    const [badgeReviewer, setBadgeReviewer] = useState('');\r\n    const [badgeComments, setBadgeComments] = useState('');\r\n    const [badgeIssuedOn, setBadgeIssuedOn] = useState('');\r\n    const [icon, setIcon] = useState('');\r\n    const [publicLink, setPublicLink] = useState('');\r\n    const [saveFlag, setSaveFlag] = useState('False');\r\n    const [result, setResult] = useState('');\r\n    const [backButtonClicked,setBackButtonClicked] = useState('False');\r\n    const [email,setEmail] = useState(props.email);\r\n    const [userID,setuserID] = useState(props.userID);\r\n    const [userType,setUserType]=useState(props.userType);\r\n\r\n\r\n    const useStyles = makeStyles((theme) => ({\r\n        paper: {\r\n            marginTop: theme.spacing(8),\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n        },\r\n        avatar: {\r\n            margin: theme.spacing(1),\r\n            backgroundColor: theme.palette.secondary.main,\r\n        },\r\n        form: {\r\n            width: '100%',\r\n            marginTop: theme.spacing(3),\r\n        },\r\n        submit: {\r\n            margin: theme.spacing(3, 0, 2),\r\n        },\r\n    }));\r\n\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleviewAssertionById = async () => {\r\n\r\n        var response1 = new Promise((resolve, reject) => {\r\n            resolve(getAssertionDetailByIdResponse(assertionId));\r\n        }).then(value => {\r\n            if (value != undefined) {\r\n                setAssertionId(value[0].assertionID.$oid);\r\n                setBadgeName(value[0].badge_details[0].name);\r\n                setBadgeRecipient(value[0].user_details[0].email);\r\n                if(value[0].issuedOn!=null)\r\n                    setBadgeIssuedOn(formatDate(value[0].issuedOn.$date));\r\n                setBadgeComments(value[0].comments);\r\n               \r\n                if(value[0].reviewer_details!='')\r\n                    setBadgeReviewer(value[0].reviewer_details[0].email);\r\n                setEvidencelink(value[0].workLink);\r\n                setBadgeStatus(value[0].badge_status[0]._id.$oid);\r\n                setModifiedDate(formatDate(value[0].modified.$date));\r\n                setPublicLink(value[0].publicLink);\r\n                setIcon(value[0].badge_details[0].icon);\r\n            }\r\n\r\n\r\n        });\r\n\r\n    }\r\n\r\n    const handleSaveAssertion = () => {\r\n\r\n     if(userType=='5f760d4325c1036d4d466560'){\r\n        var response2 = new Promise((resolve, reject) => {\r\n            // alert(userID);\r\n            resolve(updateAssertionResponse(assertionId, badgeStatus, evidencelink, badgeComments, publicLink, userID));\r\n        }).then(value => {\r\n            if (value==200){\r\n                setResult(\"Saved Successfully\");\r\n                setSaveFlag('False')\r\n                \r\n            }           \r\n\r\n        });\r\n     }\r\n     else{\r\n        var response2 = new Promise((resolve, reject) => {\r\n            // alert(userID);\r\n            resolve(updateUserBadgeStatusResponse(assertionId, userID, badgeStatus,badgeComments));\r\n        }).then(value => {\r\n            if (value==200){\r\n                setResult(\"Saved Successfully\");\r\n                setSaveFlag('False')\r\n                \r\n            }           \r\n\r\n        });\r\n    }\r\n        \r\n    }\r\n\r\n    const handleviewUserByEmail = async () => {\r\n        \r\n        var response1 = new Promise((resolve, reject) => {\r\n            resolve(UserDetailByEmailResponse(email));\r\n        }).then(value => {\r\n            if (value != undefined) {\r\n                setuserID(value[0]._id.$oid);\r\n   \r\n            }\r\n\r\n        });\r\n\r\n    }\r\n\r\n\r\n    const handleBackButtonClick = () =>{\r\n        setBackButtonClicked('True');\r\n    }\r\n\r\n    useEffect(() => {\r\n        handleviewAssertionById();\r\n        // handleviewUserByEmail();\r\n    }, []);\r\n\r\n    \r\n\r\n    const handleBadgeStatusChange = event => {\r\n        setBadgeStatus(event.target.value);\r\n        setSaveFlag('True');\r\n    }\r\n    const handleBadgeWorkLinkChange = event => {\r\n        setEvidencelink(event.target.value);\r\n        setSaveFlag('True');\r\n    }\r\n    const handleBadgeCommentsChange = event => {\r\n        setBadgeComments(event.target.value);\r\n        setSaveFlag('True');\r\n    }\r\n\r\n    const handlePublicLinkChange = event => {\r\n        setPublicLink(event.target.value);\r\n        setSaveFlag('True');\r\n    }\r\n\r\n    if (backButtonClicked=='True'){\r\nreturn(\r\n<div>\r\n    <ViewAssertionsForm  email={email} userType={userType} userID={userID} />\r\n</div>\r\n);\r\n    }\r\n    else{\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline/>\r\n            <div className={classes.paper} data-testid=\"assertionDetails_ID\">\r\n                {/* <Avatar className={classes.avatar}>\r\n                    <CardMembershipOutlinedIcon/>\r\n                </Avatar>\r\n               */}\r\n                <Typography >                \r\n                <img src={icon} width=\"150\"/>\r\n                </Typography>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Edit Assertion\r\n                </Typography>\r\n                <br></br>\r\n\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            name=\"badgeName\"\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n\r\n                            id=\"badgeName\"\r\n                            label=\"Badge Name\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"assertionDetails_badgeName\",\r\n                            }}\r\n                            value={badgeName}\r\n\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            multiline\r\n                            id=\"assertiondetails_recipient\"\r\n                            label=\"Badge Recipient\"\r\n                            name=\"badgeRecipient\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"assertionDetails_badgeRecipient\",\r\n                            }}\r\n                            value={badgeRecipient}\r\n\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            id=\"assertiondetails_modifiedDate\"\r\n                            label=\"Last Modified\"\r\n                            name=\"modifiedDate\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"assertiondetails_modifiedDate\",\r\n                            }}\r\n                            value={modifiedDate}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                    <InputLabel shrink id=\"assertionDetails_badgeStatus\">\r\n                        Badge Status\r\n                    </InputLabel>\r\n                        <Select\r\n                        variant =\"outlined\"\r\n                            labelId=\"assertionDetails_badgeStatus\"\r\n                            id=\"assertionDetails_badgeStatus\"\r\n                            name=\"Badge Status\"\r\n                            fullWidth\r\n                            label=\"Badge Status\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"assertionDetails_badgeStatus\",\r\n                            }}\r\n                            value={badgeStatus}\r\n                            onChange={handleBadgeStatusChange}\r\n                            >\r\n                            <MenuItem value={'5f776f556289f17659874f2e'}>Applied</MenuItem>\r\n                            <MenuItem value={'5f776ee06289f17659874f2a'}>Working</MenuItem>\r\n                            <MenuItem value={'5f776f336289f17659874f2b'}>Rework</MenuItem>\r\n                            <MenuItem value={'5f776f416289f17659874f2c'}>Approved</MenuItem>\r\n                            <MenuItem value={'5f776f4c6289f17659874f2d'}>Rejected</MenuItem>\r\n                        </Select>\r\n\r\n\r\n                        {/* <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            id=\"assertionDetails_badgeStatus\"\r\n                            label=\"Badge status\"\r\n                            name=\"badge status\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"assertionDetails_badgeStatus\",\r\n                            }}\r\n                            value={badgeStatus}\r\n                            onChange={handleBadgeStatusChange}\r\n                        /> */}\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            id=\"assertionDetails_badgeIssuedOn\"\r\n                            label=\"Issued On\"\r\n                            name=\"issuedOn\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"assertiondetails_badgeIssuedOn\",\r\n                            }}\r\n                            value={badgeIssuedOn}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            name=\"evidencelink\"\r\n                            label=\"Evidence Link\"\r\n                            id=\"assertionDetails_evidencelink\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"assertionDetails_evidencelink\",\r\n                            }}\r\n                            value={evidencelink}\r\n                           \r\n                            onChange={userType=='5fc5567fcd831cc0c83774b8'?'':handleBadgeWorkLinkChange}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            multiline\r\n                            name=\"badgeComments\"\r\n                            label=\"Badge Comments\"\r\n                            id=\"assertionDetails_badgeComments\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"assertionDetails_badgeComments\",\r\n                            }}\r\n                            value={badgeComments}\r\n                            onChange={handleBadgeCommentsChange}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            name=\"badgeReviewer\"\r\n                            label=\"Badge Reviewer\"\r\n                            id=\"assertionDetails_badgeReviewer\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"assertionDetails_badgeReviewer\",\r\n                            }}\r\n                            value={badgeReviewer}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            name=\"publicLink\"\r\n                            label=\"Public Link\"\r\n                            id=\"assertionDetails_publiclink\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"assertionDetails_publiclink\",\r\n                            }}\r\n                            value={publicLink}\r\n                            onChange={userType=='5fc5567fcd831cc0c83774b8'?'':handlePublicLinkChange}\r\n                           \r\n                        />\r\n                    </Grid>\r\n                    {/*\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            name=\"owners\"\r\n                            label=\"Owners of Badge\"\r\n                            id=\"owners\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"badgeDetails_owners\",\r\n                            }}\r\n                            value={owners}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            name=\"reviewers\"\r\n                            label=\"Reviewers of Badge\"\r\n                            id=\"reviewers\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"badgeDetails_reviewers\",\r\n                            }}\r\n                            value={reviewers}\r\n                        />\r\n                    </Grid>\r\n*/}\r\n\r\n                </Grid>\r\n                <Grid container spacing={1}>\r\n                    <Grid item xs={12} sm={6}>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.submit}\r\n                            disabled={saveFlag=='True'?false:true}\r\n                            data-testid=\"assertionDetails_saveButton\"\r\n                            onClick={handleSaveAssertion}>\r\n                            Save\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.submit}\r\n\r\n                            data-testid=\"assertionDetails_backButton\" \r\n                            onClick={handleBackButtonClick}>\r\n\r\n                            Back\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <label>{result}</label>\r\n                <input type=\"text\" hidden data-testid='assertionDetails_Result' value={result} readOnly />\r\n                <input type=\"text\" hidden data-testid='assertionDetails_userID' value={userID} readOnly/>\r\n            </div>\r\n        </Container>\r\n    );\r\n}\r\n    //   }\r\n    // }\r\n};\r\n\r\nexport default AssertionDetailsForm;","C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\forms\\UserDetailsForm.js",["327","328","329","330","331","332","333","334","335","336","337","338","339","340","341","342","343"],"import React, { useState, Text, useEffect } from 'react';\r\nimport getRegistrationResponse from '../API/RegistrationAPI';\r\nimport LoginForm from './LoginForm';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport UserDetailByEmailResponse from '../API/UserDetailsByEmailAPI';\r\nimport ViewUserForm from '../forms/ViewUsersForm';\r\nimport formatDate from '../scripts/functions';\r\nimport CardMembershipOutlinedIcon from '@material-ui/icons/CardMembershipOutlined';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport { InputLabel } from '@material-ui/core';\r\nimport UpdateUserDetailsResponse from '../API/UpdateUserDetailsAPI';\r\n\r\n\r\nconst UserDetailsForm = (props) => {\r\n\r\n    const [email, setEmail] = useState(props.email);\r\n    const [userType, setUserType] = useState('');\r\n    const [userStatus, setUserStatus] = useState('');\r\n    const [created, setCreated] = useState('');\r\n    const [lastmodified, setLastModified] = useState('');\r\n    const [firstName, setFirstName] = useState('');\r\n    const [lastName, setLastName] = useState('');\r\n    const [middleName, setMiddleName] = useState('');\r\n    const [organizationName, setOrganizationName] = useState('');\r\n    const [adminId, setAdminId] = useState(props.userID);\r\n\r\n    const [saveFlag, setSaveFlag] = useState('False');\r\n    const [result, setResult] = useState('');\r\n    const [backButtonClicked,setBackButtonClicked] = useState('False');\r\n\r\n\r\n    const useStyles = makeStyles((theme) => ({\r\n        paper: {\r\n            marginTop: theme.spacing(8),\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n        },\r\n        avatar: {\r\n            margin: theme.spacing(1),\r\n            backgroundColor: theme.palette.secondary.main,\r\n        },\r\n        form: {\r\n            width: '100%',\r\n            marginTop: theme.spacing(3),\r\n        },\r\n        submit: {\r\n            margin: theme.spacing(3, 0, 2),\r\n        },\r\n    }));\r\n\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleviewUserByEmail = async () => {\r\n        \r\n        var response1 = new Promise((resolve, reject) => {\r\n            resolve(UserDetailByEmailResponse(email));\r\n        }).then(value => {\r\n            if (value != undefined) {\r\n                setUserType(value[0].user_type_details[0].type);\r\n                setUserStatus(value[0].user_status_details[0].userStatus);\r\n                // _id.$oid\r\n                setCreated(formatDate(value[0].created.$date));\r\n                setLastModified(formatDate(value[0].modified.$date));\r\n                setFirstName(value[0].firstName);\r\n                setLastName(value[0].secondName);\r\n                setMiddleName(value[0].middleName);\r\n                setOrganizationName(value[0].organizationName);\r\n          \r\n            }\r\n\r\n        });\r\n\r\n    }\r\n\r\n    const handleSaveAssertion = () => {\r\n        var response2 = new Promise((resolve, reject) => {\r\n            resolve(UpdateUserDetailsResponse(email, userType, firstName, lastName, middleName, organizationName,adminId,userStatus));\r\n        }).then(value => {\r\n            if (value==200){\r\n                setResult(\"Saved Successfully\");\r\n                setSaveFlag('False')\r\n            }\r\n        });\r\n    }\r\n\r\n    const handleBackButtonClick = () =>{\r\n        setBackButtonClicked('True');\r\n    }\r\n\r\n    useEffect(() => {\r\n        handleviewUserByEmail()\r\n    }, []);\r\n\r\n    const handleUserTypeChange = event => {\r\n        setUserType(event.target.value);\r\n        setSaveFlag('True');\r\n    }\r\n    const handleUserStatusChange = event => {\r\n        setUserStatus(event.target.value);\r\n        setSaveFlag('True');\r\n    }\r\n\r\n    const handleFirstNameChange = event => {\r\n        setFirstName(event.target.value);\r\n        setSaveFlag('True');\r\n    }\r\n\r\n    const handleMiddleNameChange = event => {\r\n        setMiddleName(event.target.value);\r\n        setSaveFlag('True');\r\n    }\r\n\r\n    const handleLastNameChange = event => {\r\n        setLastName(event.target.value);\r\n        setSaveFlag('True');\r\n    }\r\n\r\n    const handleOrganizationNameChange = event => {\r\n        setOrganizationName(event.target.value);\r\n        setSaveFlag('True');\r\n    }\r\n  \r\n\r\n    if (backButtonClicked=='True'){\r\nreturn(\r\n<div>\r\n    <ViewUserForm userID={adminId}/>\r\n</div>\r\n);\r\n    }\r\n    else{\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline />\r\n            <div className={classes.paper} data-testid=\"userDetails_ID\">\r\n                <Avatar className={classes.avatar}>\r\n                    <CardMembershipOutlinedIcon />\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Edit User Details\r\n      </Typography>\r\n                <br></br>\r\n         \r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={12} >\r\n                        <TextField\r\n                            name=\"email\"\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            id=\"userDetails_email\"\r\n                            label=\"Email\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"userDetails_email\",\r\n                            }}\r\n                            value={email}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                    <InputLabel shrink id=\"userDetails_userType\">\r\n                        User Type\r\n                    </InputLabel>\r\n                        <Select\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            multiline\r\n                            id=\"userDetails_userType\"\r\n                            label=\"User Type\"\r\n                            name=\"userType\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"userDetails_userType\",\r\n                            }}\r\n                            value={userType}\r\n                            onChange={handleUserTypeChange}\r\n                            >\r\n                            <MenuItem value={'regular'}>Regular</MenuItem>\r\n                            <MenuItem value={'admin'}>Admin</MenuItem>\r\n                            <MenuItem value={'reviewer'}>Reviewer</MenuItem>\r\n                            \r\n                        </Select> \r\n\r\n                    </Grid> \r\n\r\n                    <Grid item xs={12}>\r\n                    <InputLabel shrink id=\"userDetails_userStatus\">\r\n                        User Status\r\n                    </InputLabel>\r\n                        <Select\r\n                              variant=\"outlined\"\r\n                              fullWidth\r\n                              id=\"userDetails_userStatus\"\r\n                              label=\"User Status\"\r\n                              name=\"userStatus\"\r\n                              inputProps={{\r\n                                  \"data-testid\": \"userDetails_userStatus\",\r\n                                  \r\n                              }}\r\n                              value={userStatus}\r\n                              onChange={handleUserStatusChange}\r\n                            >\r\n                            <MenuItem value={'active'}>Active</MenuItem>\r\n                            <MenuItem value={'inactive'}>Inactive</MenuItem>\r\n                            <MenuItem value={'blocked'}>Blocked</MenuItem>                            \r\n                        </Select> \r\n                    </Grid>                     \r\n           \r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            id=\"userDetails_created\"\r\n                            label=\"Created Date\"\r\n                            name=\"created\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"userDetails_created\",\r\n                            }}\r\n                            value={created}\r\n                        />\r\n                    </Grid>\r\n                    {/* <Grid item xs={12}>\r\n                    <InputLabel shrink id=\"assertionDetails_badgeStatus\">\r\n                        Badge Status\r\n                    </InputLabel>\r\n                        <Select\r\n                        variant =\"outlined\"\r\n                            labelId=\"assertionDetails_badgeStatus\"\r\n                            id=\"assertionDetails_badgeStatus\"\r\n                            name=\"Badge Status\"\r\n                            fullWidth\r\n                            label=\"Badge Status\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"assertionDetails_badgeStatus\",\r\n                            }}\r\n                            value={badgeStatus}\r\n                            onChange={handleBadgeStatusChange}\r\n                            >\r\n                            <MenuItem value={'5f776f556289f17659874f2e'}>Applied</MenuItem>\r\n                            <MenuItem value={'5f776ee06289f17659874f2a'}>Working</MenuItem>\r\n                            <MenuItem value={'5f776f336289f17659874f2b'}>Rework</MenuItem>\r\n                            <MenuItem value={'5f776f416289f17659874f2c'}>Approved</MenuItem>\r\n                            <MenuItem value={'5f776f4c6289f17659874f2d'}>Rejected</MenuItem>\r\n                        </Select> \r\n\r\n                    </Grid> */}\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            id=\"userDetails_lastModified\"\r\n                            label=\"Last Modified\"\r\n                            name=\"lastModified\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"userDetails_lastModified\",\r\n                            }}\r\n                            value={lastmodified}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            name=\"firstName\"\r\n                            label=\"First Name\"\r\n                            id=\"userDetails_firstName\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"userDetails_firstName\",\r\n                            }}\r\n                            value={firstName}\r\n                            onChange={handleFirstNameChange}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            name=\"middlename\"\r\n                            label=\"Middle Name\"\r\n                            id=\"userDetails_middleName\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"userDetails_middleName\",\r\n                            }}\r\n                            value={middleName}\r\n                            onChange={handleMiddleNameChange}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            multiline\r\n                            name=\"lastName\"\r\n                            label=\"Last Name\"\r\n                            id=\"userDetails_lastName\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"userDetails_lastName\",\r\n                            }}\r\n                            value={lastName}\r\n                            onChange={handleLastNameChange}\r\n                        />\r\n                    </Grid>\r\n                   \r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            name=\"organizationName\"\r\n                            label=\"Organization Name\"\r\n                            id=\"userDetails_organizationName\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"userDetails_organizationName\",\r\n                            }}\r\n                            value={organizationName}\r\n                            onChange={handleOrganizationNameChange}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={1}>\r\n                    <Grid item xs={12} sm={6}>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.submit}\r\n                            disabled={saveFlag=='True'?false:true}\r\n                            data-testid=\"userDetails_saveButton\"\r\n                            onClick={handleSaveAssertion}\r\n                            >\r\n                            Save\r\n                 </Button>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.submit}\r\n                            data-testid=\"userDetails_backButton\" \r\n                            onClick={handleBackButtonClick}\r\n                            >\r\n                            Back\r\n                    </Button>\r\n                    </Grid>\r\n                </Grid>\r\n                <label>{result}</label>\r\n                <input type=\"text\" hidden readOnly data-testid='userDetails_Result' value={result} />\r\n            </div>\r\n        </Container>\r\n    );\r\n                        }\r\n};\r\n\r\nexport default UserDetailsForm;","C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\forms\\AddUserForm.js",["344","345","346","347","348","349","350","351","352","353","354","355","356","357","358","359","360","361","362","363","364","365","366","367","368","369","370","371","372","373","374","375","376"],"import React, { useState, Text, useEffect } from 'react';\r\nimport getRegistrationResponse from '../API/RegistrationAPI';\r\nimport LoginForm from './LoginForm';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport UserDetailByEmailResponse from '../API/UserDetailsByEmailAPI';\r\nimport ViewUserForm from '../forms/ViewUsersForm';\r\nimport formatDate from '../scripts/functions';\r\nimport CardMembershipOutlinedIcon from '@material-ui/icons/CardMembershipOutlined';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport addNewUserResponse from '../API/AddNewUserAPI';\r\nimport { InputLabel } from '@material-ui/core';\r\nimport userEvent from '@testing-library/user-event';\r\n\r\n\r\nconst AddUserForm = (props) => {\r\n\r\n    const [email, setEmail] = useState('');\r\n    const [userType, setUserType] = useState('regular');\r\n    const [firstName, setFirstName] = useState('');\r\n    const [lastName, setLastName] = useState('');\r\n    const [middleName, setMiddleName] = useState('');\r\n    const [organizationName, setOrganizationName] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [confirmPassword, setConfirmPassword] = useState('');\r\n\r\n    const [firstNameClick,setFirstNameClick] = useState('False');\r\n    const [lastNameClick,setLastNameClick] = useState('False');\r\n    const [emailClick,setEmailClick] = useState('False');\r\n    const [userTypeClick, setUserTypeClick] = useState('False');\r\n    const [organizationNameClick, setOrganizationNameClick] = useState('False');\r\n    const [middleNameClick, setMiddleNameClick] = useState('False');\r\n    const [passClick,setPassClick] = useState('False');\r\n    const [confPassClick,setConfPassClick] = useState('False');\r\n\r\n    const [saveFlag, setSaveFlag] = useState('False');\r\n    const [result, setResult] = useState('');\r\n    const [backButtonClicked,setBackButtonClicked] = useState('False');\r\n\r\n\r\n    const useStyles = makeStyles((theme) => ({\r\n        paper: {\r\n            marginTop: theme.spacing(8),\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n        },\r\n        avatar: {\r\n            margin: theme.spacing(1),\r\n            backgroundColor: theme.palette.secondary.main,\r\n        },\r\n        form: {\r\n            width: '100%',\r\n            marginTop: theme.spacing(3),\r\n        },\r\n        submit: {\r\n            margin: theme.spacing(3, 0, 2),\r\n        },\r\n    }));\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleAddUserButton = () => {\r\n        setFirstNameClick('True');\r\n        setMiddleNameClick('True');\r\n        setLastNameClick('True');\r\n        setOrganizationNameClick('True');\r\n        setEmailClick('True');\r\n        setPassClick('True');\r\n        setConfPassClick('True');\r\n        \r\n\r\n        if (password != confirmPassword) {\r\n            setResult('Password Mismatch');\r\n            setPassword('');\r\n            setConfirmPassword('');\r\n          }\r\n          else{\r\n        var response2 = new Promise((resolve, reject) => {\r\n            resolve(addNewUserResponse(email, password, userType, firstName, lastName, middleName, organizationName));\r\n        }).then(value => {\r\n            if (value=='registered'){\r\n                setResult(\"Created User Successfully\");\r\n                setSaveFlag('False');\r\n            }\r\n\r\n        });\r\n    }\r\n}\r\n\r\n    const handleBackButtonClick = () =>{\r\n        setBackButtonClicked('True');\r\n    }\r\n\r\n\r\n    const handleUserTypeChange = event => {\r\n        setUserType(event.target.value);\r\n        setUserTypeClick('True');\r\n        setSaveFlag('True');\r\n    }\r\n\r\n    const handleFirstNameChange = event => {\r\n        setFirstName(event.target.value);\r\n        setFirstNameClick('True');\r\n        setSaveFlag('True');\r\n    }\r\n\r\n    const handleMiddleNameChange = event => {\r\n        setMiddleName(event.target.value);\r\n        setMiddleNameClick('True');\r\n        setSaveFlag('True');\r\n    }\r\n\r\n    const handleLastNameChange = event => {\r\n        setLastName(event.target.value);\r\n        setLastNameClick('True');\r\n        setSaveFlag('True');\r\n    }\r\n\r\n    const handleOrganizationNameChange = event => {\r\n        setOrganizationName(event.target.value);\r\n        setOrganizationNameClick('True');\r\n        setSaveFlag('True');\r\n    }\r\n\r\n    const handleEmailChange = event => {\r\n        setEmail(event.target.value);\r\n        setEmailClick('True');\r\n        setSaveFlag('True');\r\n    }\r\n\r\n    const handlePasswordChange = event => {\r\n        setPassword(event.target.value);\r\n        setPassClick('True');\r\n        setSaveFlag('True');\r\n        setResult('');\r\n    }\r\n\r\n    const handleConfirmPasswordChange = event => {\r\n        setConfirmPassword(event.target.value);\r\n        setConfPassClick('True');\r\n        setSaveFlag('True');\r\n        setResult('');\r\n    }\r\n  \r\n\r\n    if (backButtonClicked=='True'){\r\n    return(\r\n    <div>\r\n        <ViewUserForm />\r\n    </div>\r\n    );\r\n    }\r\n    else{\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline />\r\n            <div className={classes.paper} data-testid=\"addUser_ID\">\r\n                <Avatar className={classes.avatar}>\r\n                    <CardMembershipOutlinedIcon />\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Add User\r\n      </Typography>\r\n                <br></br>\r\n         \r\n                <Grid container spacing={2}>\r\n                <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            required\r\n                            name=\"firstName\"\r\n                            label=\"First Name\"\r\n                            id=\"addUser_firstName\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"addUser_firstName\",\r\n                            }}\r\n                            className={((firstName.length=='')&& (firstNameClick=='True')) ? 'emptyfield' : ''}\r\n                            value={firstName}\r\n                            onChange={handleFirstNameChange}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            required\r\n                            name=\"middlename\"\r\n                            label=\"Middle Name\"\r\n                            id=\"addUser_middleName\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"addUser_middleName\",\r\n                            }}\r\n                            value={middleName}\r\n                            className={((middleName.length=='')&& (middleNameClick=='True')) ? 'emptyfield' : ''}\r\n                            onChange={handleMiddleNameChange}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            required\r\n                            name=\"lastName\"\r\n                            label=\"Last Name\"\r\n                            id=\"addUser_lastName\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"addUser_lastName\",\r\n                            }}\r\n                            value={lastName}\r\n                            className={((lastName.length=='')&& (lastNameClick=='True')) ? 'emptyfield' : ''}\r\n                            onChange={handleLastNameChange}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} >\r\n                        <TextField\r\n                            name=\"email\"\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            required\r\n                            id=\"addUser_email\"\r\n                            label=\"Email\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"addUser_email\",\r\n                            }}\r\n                            value={email}\r\n                            className={((email.length=='')&& (emailClick=='True')) ? 'emptyfield' : ''}\r\n                            onChange={handleEmailChange}\r\n\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                    <InputLabel shrink id=\"addUser_userType\">\r\n                        User Type\r\n                    </InputLabel>\r\n                        <Select\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            required\r\n                            id=\"addUser_userType\"\r\n                            label=\"User Type\"\r\n                            name=\"userType\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"addUser_userType\",\r\n                            }}\r\n                            value={userType}\r\n                            onChange={handleUserTypeChange}\r\n                            className={((userType.length=='')&& (userTypeClick=='True')) ? 'emptyfield' : ''}\r\n                            >\r\n                            <MenuItem value={'regular'}>Regular</MenuItem>\r\n                            <MenuItem value={'admin'}>Admin</MenuItem>\r\n                            <MenuItem value={'reviewer'}>Reviewer</MenuItem>\r\n                            \r\n                        </Select> \r\n\r\n                    </Grid> \r\n\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            required\r\n                            type='password'\r\n                            name=\"password\"\r\n                            label=\"Password\"\r\n                            id=\"addUser_password\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"addUser_password\",\r\n                            }}\r\n                            value={password}\r\n                            className={((password.length=='')&& (passClick=='True')) ? 'emptyfield' : ''}\r\n                            onChange={handlePasswordChange}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            required\r\n                            type='password'\r\n                            name=\"confirmpassword\"\r\n                            label=\"Confirm Password\"\r\n                            id=\"addUser_confirmPassword\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"addUser_confirmPassword\",\r\n                            }}\r\n                            value={confirmPassword}\r\n                            className={((confirmPassword.length=='')&& (confPassClick=='True')) ? 'emptyfield' : ''}\r\n                            onChange={handleConfirmPasswordChange}\r\n                        />\r\n                    </Grid>\r\n                   \r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            required\r\n                            name=\"organizationName\"\r\n                            label=\"Organization Name\"\r\n                            id=\"addUser_organizationName\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"addUser_organizationName\",\r\n                            }}\r\n                            value={organizationName}\r\n                            className={((organizationName.length=='')&& (organizationNameClick=='True')) ? 'emptyfield' : ''}\r\n                            onChange={handleOrganizationNameChange}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={1}>\r\n                    <Grid item xs={12} sm={6}>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.submit}\r\n                            disabled={saveFlag=='True'?false:true}\r\n                            data-testid=\"addUser_submitButton\"\r\n                            onClick={handleAddUserButton}\r\n                            >\r\n                            Save\r\n                 </Button>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.submit}\r\n                            data-testid=\"addUser_backButton\" \r\n                            onClick={handleBackButtonClick}\r\n                            >\r\n                            Back\r\n                    </Button>\r\n                    </Grid>\r\n                </Grid>\r\n                <label>{result}</label>\r\n                <input type=\"text\" hidden data-testid='addUser_Result' value={result} />\r\n            </div>\r\n        </Container>\r\n    );\r\n                        }\r\n};\r\n\r\nexport default AddUserForm;","C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\API\\MyBackpackAPI.js",[],"C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\forms\\MyBackpackDetailsForm.js",["377","378","379","380","381","382","383","384","385"],"import React, {useState, Text, useEffect} from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport getAssertionDetailByIdResponse from '../API/AssertionDetailsByIdAPI'\r\nimport formatDate from '../scripts/functions';\r\nimport CardMembershipOutlinedIcon from '@material-ui/icons/CardMembershipOutlined';\r\nimport MyBackpackForm from './MyBackpackForm';\r\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\r\nimport getLinkedInResponse from '../API/AddLinkedInCertificateAPI';\r\nimport LaunchIcon from '@material-ui/icons/Launch';\r\n\r\nconst MyBackpackDetailsForm = (props) => {\r\n\r\n    const [assertionId, setAssertionId] = useState(props.assertionId);\r\n    const [badgeName, setBadgeName] = useState('');\r\n    const [badgeRecipient, setBadgeRecipient] = useState('');\r\n    const [modifiedDate, setModifiedDate] = useState('');\r\n    const [badgeStatus, setBadgeStatus] = useState('');\r\n    const [evidencelink, setEvidencelink] = useState('');\r\n    const [badgeReviewer, setBadgeReviewer] = useState('');\r\n    const [badgeComments, setBadgeComments] = useState('');\r\n    const [badgeIssuedOn, setBadgeIssuedOn] = useState('');\r\n    const [publicLink, setPublicLink] = useState('');\r\n    const [badgeIcon, setBadgeIcon] = useState('');\r\n    // const [saveFlag, setSaveFlag] = useState('False');\r\n    // const [result, setResult] = useState('');\r\n    const [backButtonClicked,setBackButtonClicked] = useState('False');\r\n    //const [email,setEmail] = useState('');\r\n    const [userID,setuserID] = useState('');\r\n\r\n\r\n    const useStyles = makeStyles((theme) => ({\r\n        paper: {\r\n            marginTop: theme.spacing(8),\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n        },\r\n        avatar: {\r\n            // margin: theme.spacing(1),\r\n       \r\n            backgroundColor: theme.palette.secondary.main,\r\n        },\r\n        \r\n        avatar_additional: {\r\n          \r\n          \r\n            backgroundColor: theme.palette.info.main,\r\n        },\r\n        root: {\r\n            display: 'flex',\r\n            '& > *': {\r\n              margin: theme.spacing(1),\r\n            },\r\n          },\r\n         \r\n        form: {\r\n            width: '100%',\r\n            marginTop: theme.spacing(3),\r\n        },\r\n        submit: {\r\n            margin: theme.spacing(3, 0, 2),\r\n        },\r\n        innerText :{\r\n            width :'90%',\r\n        },\r\n        innerLogo :{\r\n            width :'10%',\r\n        },\r\n    }));\r\n\r\n\r\n    const classes = useStyles();\r\n\r\n     \r\n    const handleLinkedIn = async () => {\r\n\r\n        var response1 = new Promise((resolve, reject) => {\r\n            const dt=new Date(badgeIssuedOn);\r\n       \r\n            resolve(getLinkedInResponse(badgeName,dt.getMonth()+1,dt.getFullYear(),publicLink));\r\n        }).then(value => {\r\n            if (value != undefined) {\r\n                \r\n            }\r\n\r\n\r\n        });\r\n\r\n    }\r\n\r\n    const handleviewAssertionById = async () => {\r\n\r\n        var response1 = new Promise((resolve, reject) => {\r\n            //alert(assertionId);\r\n            resolve(getAssertionDetailByIdResponse(assertionId));\r\n        }).then(value => {\r\n            if (value != undefined) {\r\n                setAssertionId(value[0].assertionID.$oid);\r\n                setBadgeName(value[0].badge_details[0].name);\r\n                setBadgeRecipient(value[0].user_details[0].email);\r\n                setBadgeIssuedOn(formatDate(value[0].issuedOn.$date));\r\n                setBadgeComments(value[0].comments);\r\n                setBadgeReviewer(value[0].reviewer_details[0].email);\r\n                setEvidencelink(value[0].workLink);\r\n                setBadgeStatus(value[0].badge_status[0].badgeStatus);\r\n                setBadgeIcon(value[0].badge_details[0].icon);\r\n                setModifiedDate(formatDate(value[0].modified.$date));\r\n                setPublicLink(value[0].publicLink);\r\n                setuserID(value[0].user_details[0]._id.$oid);\r\n            }\r\n\r\n\r\n        });\r\n\r\n    }\r\n\r\n    \r\n    const handleBackButtonClick = () =>{\r\n        setBackButtonClicked('True');\r\n    }\r\n\r\n    useEffect(() => {\r\n        handleviewAssertionById();\r\n    }, []);\r\n\r\n    if (backButtonClicked=='True'){\r\nreturn(\r\n<div>\r\n    <MyBackpackForm userID={userID} />\r\n</div>\r\n);\r\n    }\r\n    else{\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline/>\r\n            <div className={classes.paper} data-testid=\"backpackDetails_ID\">\r\n\r\n            <div className={classes.root}>\r\n      \r\n  \r\n                <Typography >\r\n                <img src={badgeIcon} width=\"150\"/>\r\n                </Typography>\r\n                \r\n                {/* <Avatar className={classes.avatar_additional} data-testid=\"backpackDetails_linkedIn\"  onClick={handleLinkedIn}>\r\n                    <LinkedInIcon/>\r\n                    </Avatar> */}\r\n                    </div>\r\n                \r\n                <Typography component=\"h1\" variant=\"h5\" >\r\n                    Assertion Details\r\n                    <Avatar className={classes.avatar_additional} data-testid=\"backpackDetails_linkedIn\"  onClick={handleLinkedIn}>\r\n                    <LinkedInIcon/>\r\n                    </Avatar>\r\n                </Typography>\r\n               \r\n                <br></br>\r\n\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            name=\"badgeName\"\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n\r\n                            id=\"backpackDetails_badgeName\"\r\n                            label=\"Badge Name\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"backpackDetails_badgeName\",\r\n                            }}\r\n                            value={badgeName}\r\n\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            multiline\r\n                            id=\"backpackDetails_badgeRecipient\"\r\n                            label=\"Badge Recipient\"\r\n                            name=\"badgeRecipient\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"backpackDetails_badgeRecipient\",\r\n                            }}\r\n                            value={badgeRecipient}\r\n\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            id=\"backpackDetails_modifiedDate\"\r\n                            label=\"Last Modified\"\r\n                            name=\"modifiedDate\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"backpackDetails_modifiedDate\",\r\n                            }}\r\n                            value={modifiedDate}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            id=\"backpackDetails_badgeStatus\"\r\n                            label=\"Badge status\"\r\n                            name=\"badge status\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"backpackDetails_badgeStatus\",\r\n                            }}\r\n                            value={badgeStatus}\r\n                            \r\n                        /> \r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            id=\"backpackDetails_badgeIssuedOn\"\r\n                            label=\"Issued On\"\r\n                            name=\"issuedOn\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"backpackDetails_badgeIssuedOn\",\r\n                            }}\r\n                            value={badgeIssuedOn}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            name=\"evidencelink\"\r\n                            label=\"Evidence Link\"\r\n                            id=\"backpackDetails_evidencelink\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"backpackDetails_evidencelink\",\r\n                            }}\r\n                            value={evidencelink}\r\n\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            multiline\r\n                            name=\"badgeComments\"\r\n                            label=\"Badge Comments\"\r\n                            id=\"backpackDetails_badgeComments\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"backpackDetails_badgeComments\",\r\n                            }}\r\n                            value={badgeComments}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            name=\"badgeReviewer\"\r\n                            label=\"Badge Reviewer\"\r\n                            id=\"backpackDetails_badgeReviewer\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"backpackDetails_badgeReviewer\",\r\n                            }}\r\n                            value={badgeReviewer}\r\n                        />\r\n                    </Grid>\r\n                    \r\n                    <Grid container item xs={12}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            name=\"publicLink\"\r\n                            className={classes.innerText}\r\n                            label=\"Public Link\"\r\n                            id=\"backpackDetails_publiclink\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"backpackDetails_publiclink\",\r\n                            }}\r\n                            value={publicLink}\r\n                        />\r\n                           <LaunchIcon className={classes.innerLogo} onClick={() => window.open(publicLink, \"_blank\")}/>\r\n                   \r\n                      \r\n                    </Grid>\r\n\r\n                </Grid>\r\n                <Grid container spacing={1}>\r\n                    {/* <Grid item xs={12} sm={6}>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.submit}\r\n                            disabled={saveFlag=='True'?false:true}\r\n                            data-testid=\"assertionDetails_saveButton\"\r\n                            onClick={handleSaveAssertion}>\r\n                            Save\r\n                        </Button>\r\n                    </Grid> */}\r\n                    <Grid item xs={12} sm={6}>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.submit}\r\n                            data-testid=\"backpackDetails_backButton\" \r\n                            onClick={handleBackButtonClick}>\r\n\r\n                            Back\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n            </div>\r\n        </Container>\r\n    );\r\n}\r\n};\r\n\r\nexport default MyBackpackDetailsForm;","C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\API\\ViewAssertionForReviewersAPI.js",[],"C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\forms\\BadgeDetailsForm.js",["386","387","388","389","390","391","392","393","394","395","396","397","398","399","400","401","402","403","404","405","406","407","408","409","410","411","412","413","414","415","416","417"],"import React, { useState, Text, useEffect } from 'react';\r\nimport getRegistrationResponse from '../API/RegistrationAPI';\r\nimport LoginForm from './LoginForm';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport getViewBadgeByNameResponse from '../API/BadgeDetailsByNameAPI'\r\nimport formatDate from '../scripts/functions';\r\nimport CardMembershipOutlinedIcon from '@material-ui/icons/CardMembershipOutlined';\r\nimport ViewBadgeForm from '../forms/ViewBadgeForm';\r\nimport updateBadgeResponseAPI from '../API/UpdateBadgeAPI'\r\nimport { InputLabel, StepIcon } from '@material-ui/core';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport addNewAssertionResponse from '../API/AddNewAssertionAPI';\r\nimport UserDetailByEmailResponse from '../API/UserDetailsByEmailAPI';\r\n\r\n\r\n\r\nconst BadgeDetailsForm = (props) => {\r\n\r\n  const [badgeId,setbadgeID]=useState('');\r\n  const [badgeName, setbadgeName] = useState(props.badgeName);\r\n  const [userType, setUserType]=useState(props.userType);\r\n  const [userID, setUserID]=useState(props.userID);\r\n  const [clickType, setClickType] = useState(props.clickType);\r\n  const [badgeDescriptoion, setBadgeDescription] = useState('');\r\n  const [createdDate, setCreatedDate] = useState('');\r\n  const [modifiedDate, setModifiedDate] = useState('');\r\n  const [link, setLink] = useState('');\r\n  const [badgeType, setBadgeType] = useState('');\r\n  const [evidenceRequired, setEvidenceRequired] = useState('');\r\n  const [userRequestable, setUserRequestable] = useState('');\r\n  const [owners, setOwners] = useState('');\r\n  const [reviewers, setReviewers] = useState('');\r\n  const [icon, setIcon] = useState('');\r\n  const [saveFlag, setSaveFlag]=useState('False');\r\n  const [result, setResult]=useState('');\r\n  const [requestBadgeResult,setrequestBadgeResult]=useState('');\r\n  const [assignBadgeResult, setAssignBadgeResult]=useState('');\r\n  const [backbuttonClicked, setBackButtonClicked]=useState('False');\r\n  const [requestBadgeButtonClicked, setRequestBadgeButtonClicked]=useState(false);\r\n  const [assignBadgeButtonClicked, setAssignBadgeButtonClicked]=useState(false);\r\n  const [workLink, setWorkLink]=useState('');\r\n  const [assigneeEmail, setAssigneeEmail] = useState('');\r\n  const [assigneeID, setAssigneeID] = useState('');\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n      marginTop: theme.spacing(8),\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'center',\r\n    },\r\n    avatar: {\r\n      margin: theme.spacing(1),\r\n      backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n      width: '100%', // Fix IE 11 issue.\r\n      marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n      margin: theme.spacing(3, 0, 2),\r\n    },\r\n  }));\r\n\r\n\r\n  const classes = useStyles();\r\n\r\n  const handleBadgeNameChange =event =>{\r\n    setbadgeName(event.target.value);\r\n    setSaveFlag('True');\r\n  }\r\n\r\n  const handleBadgeDescriptionChange =event =>{\r\n    setBadgeDescription(event.target.value);\r\n    setSaveFlag('True');\r\n  }\r\n  const handleBadgeLinkChange =event =>{\r\n    setLink(event.target.value);\r\n    setSaveFlag('True');\r\n  }\r\n  const handleBadgeTypeChange =event =>{\r\n    setBadgeType(event.target.value);\r\n    setSaveFlag('True');\r\n  }\r\n  const handleEvidenceRequiredChange =event =>{\r\n    setEvidenceRequired(event.target.value);\r\n    setSaveFlag('True');\r\n  }\r\n  const handleUserRequestableChange =event =>{\r\n    setUserRequestable(event.target.value);\r\n    setSaveFlag('True');\r\n  }\r\n  const handleOwnerChange =event =>{\r\n    setOwners(event.target.value);\r\n    setSaveFlag('True');\r\n  }\r\n  const handleReviewerChange =event =>{\r\n    setReviewers(event.target.value);\r\n    setSaveFlag('True');\r\n  }\r\n\r\n  const handleWorkLinkChange =event =>{\r\n    setWorkLink(event.target.value);\r\n\r\n  }\r\n\r\n  const handleAssigneeEmailChange =event =>{\r\n    setAssigneeEmail(event.target.value);\r\n  }\r\n\r\n  const handleSaveButtonClick = () =>{\r\n    var response2 = new Promise((resolve, reject) => {\r\n      resolve(updateBadgeResponseAPI(badgeName, badgeDescriptoion, link, userRequestable, badgeType, owners, reviewers, 'icon link',evidenceRequired));\r\n    }).then(value=>{\r\n      if (value==200){\r\n        setResult('Saved Successfully');\r\n        setSaveFlag('False');\r\n      }\r\n    });\r\n  }\r\n\r\n  const handleBackButtonClick = () =>{\r\n    setBackButtonClicked('True');\r\n  }\r\n\r\n  const handleRequestBadgeButtonClick =() =>{\r\n    setRequestBadgeButtonClicked(true);\r\n  }\r\n\r\n  const handleAssignBadgeButtonClick =() =>{\r\n    setAssignBadgeButtonClicked(true);\r\n  }\r\n\r\n  const handleRequestBadgeButtonClose = () => {\r\n    setRequestBadgeButtonClicked(false);\r\n  };\r\n\r\n  const handleAssignBadgeButtonClose = () => {\r\n    setAssignBadgeButtonClicked(false);\r\n  };\r\n\r\n  const handlerequestBadge = async() => {\r\n    var response3 = new Promise((resolve, reject) => {\r\n      resolve(addNewAssertionResponse(userID,badgeId,'',workLink,'',''));\r\n    }).then(value => {   \r\n      if (value == 200) {\r\n        setrequestBadgeResult('Request for Badge is successfully submitted');\r\n      }\r\n\r\n\r\n    });\r\n    setRequestBadgeButtonClicked(false);\r\n  };\r\n\r\n  const handleAssignBadge =async() => {\r\n    var response4 = new Promise((resolve, reject) => {\r\n      resolve(UserDetailByEmailResponse(assigneeEmail));\r\n      }).then(value => {\r\n      if (value != undefined) {\r\n          setAssigneeID(value[0]._id.$oid);\r\n      }\r\n    });\r\n    var response5 = new Promise((resolve, reject) => {\r\n      resolve(addNewAssertionResponse(assigneeID,badgeId,'','','',''));\r\n    }).then(value => {   \r\n      if (value == 200) {\r\n        setAssignBadgeResult('Badge Assigned successfully');\r\n      }\r\n\r\n\r\n    });\r\n    setAssignBadgeButtonClicked(false);\r\n  }\r\n  const handleviewBadgeByName = async () => {\r\n\r\n    var response1 = new Promise((resolve, reject) => {\r\n      resolve(getViewBadgeByNameResponse(badgeName));\r\n    }).then(value => {\r\n      if (value != undefined) {\r\n        setbadgeID(value[0]._id.$oid);\r\n        setBadgeDescription(value[0].description);\r\n        setLink(value[0].link);\r\n        setUserRequestable(value[0].userRequestable);\r\n        setEvidenceRequired(value[0].evidence);\r\n        setOwners(value[0].owner_details[0].email);\r\n        setReviewers(value[0].reviewer_details[0].email);\r\n        setBadgeType(value[0].badge_type_details[0].badgeType);\r\n        setCreatedDate(formatDate(value[0].created.$date));\r\n        setModifiedDate(formatDate(value[0].modified.$date));\r\n        setIcon(value[0].icon);\r\n      }\r\n\r\n\r\n    });\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n    handleviewBadgeByName()\r\n  }, []);\r\n\r\n  \r\nif (backbuttonClicked=='True'){\r\nreturn (\r\n  <div><ViewBadgeForm userType={userType} /> </div>\r\n);\r\n}\r\nelse{\r\nif(clickType=='AdminEdit'){\r\nreturn (\r\n<Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Typography >\r\n          {/* <CardMembershipOutlinedIcon /> */}\r\n          <img src={icon} width=\"150\"/>\r\n        </Typography>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Badge Details\r\n      </Typography>\r\n        <br></br>\r\n        {/* <form className={classes.form} noValidate> */}\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={12} >\r\n            <TextField\r\n              name=\"badgeName\"\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              id=\"badgeName\"\r\n              label=\"Badge Name\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgeDetails_badgeName\",\r\n              }}\r\n              value={badgeName}\r\n              onChange={handleBadgeNameChange}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} >\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              multiline\r\n              id=\"badgeDescriptoion\"\r\n              label=\"Badge Description\"\r\n              name=\"badgeDescriptoion\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgeDetails_badgeDescription\",\r\n              }}\r\n              value={badgeDescriptoion}\r\n              onChange={handleBadgeDescriptionChange}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              id=\"createdDate\"\r\n              label=\"Created Date\"\r\n              name=\"createdDate\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgedetails_createdDate\",\r\n              }}\r\n              value={createdDate}\r\n\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              id=\"modifiedDate\"\r\n              label=\"modified Date\"\r\n              name=\"modifiedDate\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgeDetails_modifiedDate\",\r\n              }}\r\n              value={modifiedDate}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              name=\"link\"\r\n              label=\"Link\"\r\n              id=\"link\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgeDetails_link\",\r\n              }}\r\n              value={link}\r\n              onChange={handleBadgeLinkChange}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n          <InputLabel shrink id=\"badgeDetails_badgeType\">\r\n                        Badge Type\r\n                    </InputLabel>\r\n                        <Select\r\n                        variant =\"outlined\"\r\n                            labelId=\"badgeDetails_badgeType\"\r\n                            id=\"badgeDetails_badgeType\"\r\n                            name=\"Badge Status\"\r\n                            fullWidth\r\n                            label=\"Badge Type\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"badgeDetails_badgeType\",\r\n                            }}\r\n                            value={badgeType}\r\n                            onChange={handleBadgeTypeChange}\r\n                            >\r\n                            <MenuItem value={'Open Badge'}>Open Badge</MenuItem>\r\n                            <MenuItem value={'Community Badge'}>Community Badge</MenuItem>\r\n                        </Select>\r\n            {/* <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              name=\"badgeType\"\r\n              label=\"Badge Type\"\r\n              id=\"badgeType\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgeDetails_badgeType\",\r\n              }}\r\n              value={badgeType}\r\n              onChange={handleBadgeTypeChange}\r\n            /> */}\r\n          </Grid>\r\n\r\n          <Grid item xs={12}>\r\n          <InputLabel shrink id=\"badgeDetails_evidenceRequired\">\r\n                        Evidence Required\r\n                    </InputLabel>\r\n                        <Select\r\n                        variant =\"outlined\"\r\n                            labelId=\"badgeDetails_evidenceRequired\"\r\n                            id=\"badgeDetails_evidenceRequired\"\r\n                            name=\"badgeDetails_evidenceRequired\"\r\n                            fullWidth\r\n                            label=\"Evidence Required\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"badgeDetails_evidenceRequired\",\r\n                            }}\r\n                            value={evidenceRequired}\r\n                            onChange={handleEvidenceRequiredChange}\r\n                            >\r\n                            <MenuItem value={'True'}>True</MenuItem>\r\n                            <MenuItem value={'False'}>False</MenuItem>\r\n                        </Select>\r\n            {/* <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              name=\"evidenceRequired\"\r\n              label=\"Evidence Required\"\r\n              id=\"evidenceRequired\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgeDetails_evidenceRequired\",\r\n              }}\r\n              value={evidenceRequired}\r\n              onChange={handleEvidenceRequiredChange}\r\n            /> */}\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n          <InputLabel shrink id=\"badgeDetails_userRequestable\">\r\n                        User Requestable\r\n                    </InputLabel>\r\n                        <Select\r\n                        variant =\"outlined\"\r\n                            labelId=\"badgeDetails_userRequestable\"\r\n                            id=\"badgeDetails_userRequestable\"\r\n                            name=\"badgeDetails_userRequestable\"\r\n                            fullWidth\r\n                            label=\"User Requestable\"\r\n                            inputProps={{\r\n                                \"data-testid\": \"badgeDetails_userRequestable\",\r\n                            }}\r\n                            value={userRequestable}\r\n                            onChange={handleUserRequestableChange}\r\n                            >\r\n                            <MenuItem value={'True'}>True</MenuItem>\r\n                            <MenuItem value={'False'}>False</MenuItem>\r\n                        </Select>\r\n            {/* <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              name=\"userRequestable\"\r\n              label=\"User Requestable\"\r\n              id=\"userRequestable\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgeDetails_userRequestable\",\r\n              }}\r\n              value={userRequestable}\r\n              onChange={handleUserRequestableChange}\r\n            /> */}\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              name=\"owners\"\r\n              label=\"Owners of Badge\"\r\n              id=\"owners\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgeDetails_owners\",\r\n              }}\r\n              value={owners}\r\n              onChange={handleOwnerChange}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              \r\n              name=\"reviewers\"\r\n              label=\"Reviewers of Badge\"\r\n              id=\"reviewers\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgeDetails_reviewers\",\r\n              }}\r\n              value={reviewers}\r\n              onChange={handleReviewerChange}\r\n            />\r\n          </Grid>\r\n\r\n        </Grid>\r\n        <Grid container spacing={1}>\r\n          <Grid item xs={12} sm={6}>\r\n            <Button\r\n              type=\"submit\"\r\n              fullWidth\r\n              disabled={saveFlag=='True'?false:true}\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.submit}\r\n              data-testid=\"badgeDetails_UpdateButton\"\r\n              onClick={handleSaveButtonClick} >\r\n              \r\n              Save\r\n        </Button>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n            data-testid=\"badgeDetails_backButton\" \r\n            onClick={handleBackButtonClick}>\r\n            Back to Badges\r\n        </Button>\r\n          </Grid>\r\n        </Grid>\r\n        <label>{result}</label>\r\n        <input type=\"text\" hidden data-testid='badgeDetails_Result' value={result} />\r\n      </div>\r\n    </Container>\r\n);\r\n}\r\nelse if(clickType=='AdminView'){\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Typography >\r\n          <img src={icon} width=\"150\"/>\r\n        </Typography>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Badge Details\r\n      </Typography>\r\n        <br></br>\r\n        {/* <form className={classes.form} noValidate> */}\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={12} >\r\n            <TextField\r\n              name=\"badgeName\"\r\n              variant=\"outlined\"\r\n              fullWidth\r\n\r\n              id=\"badgeName\"\r\n              label=\"Badge Name\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgeDetails_badgeName\",\r\n              }}\r\n              value={badgeName}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} >\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              multiline\r\n              id=\"badgeDescription\"\r\n              label=\"Badge Description\"\r\n              name=\"badgeDescription\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgeDetails_badgeDescription\",\r\n              }}\r\n              value={badgeDescriptoion}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              id=\"createdDate\"\r\n              label=\"Created Date\"\r\n              name=\"createdDate\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgedetails_createdDate\",\r\n              }}\r\n              value={createdDate}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              id=\"modifiedDate\"\r\n              label=\"modified Date\"\r\n              name=\"modifiedDate\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgeDetails_modifiedDate\",\r\n              }}\r\n              value={modifiedDate}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              name=\"link\"\r\n              label=\"Link\"\r\n              id=\"link\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgeDetails_link\",\r\n              }}\r\n              value={link}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              name=\"badgeType\"\r\n              label=\"Badge Type\"\r\n              id=\"badgeType\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgeDetails_badgeType\",\r\n              }}\r\n              value={badgeType}\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              name=\"evidenceRequired\"\r\n              label=\"Evidence Required\"\r\n              id=\"evidenceRequired\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgeDetails_evidenceRequired\",\r\n              }}\r\n              value={evidenceRequired}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              name=\"userRequestable\"\r\n              label=\"User Requestable\"\r\n              id=\"userRequestable\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgeDetails_userRequestable\",\r\n              }}\r\n              value={userRequestable}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              name=\"owners\"\r\n              label=\"Owners of Badge\"\r\n              id=\"owners\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgeDetails_owners\",\r\n              }}\r\n              value={owners}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              \r\n              name=\"reviewers\"\r\n              label=\"Reviewers of Badge\"\r\n              id=\"reviewers\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgeDetails_reviewers\",\r\n              }}\r\n              value={reviewers}\r\n            />\r\n          </Grid>\r\n\r\n        </Grid>\r\n        <Grid container spacing={1}>\r\n          <Grid item xs={12} sm={6}>\r\n            <Button\r\n              type=\"submit\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.submit}\r\n              data-testid=\"badgeDetails_assignButton\" \r\n              onClick={handleAssignBadgeButtonClick}>\r\n              Assign Badge\r\n        </Button>\r\n        <Dialog open={assignBadgeButtonClicked} onClose={handleAssignBadgeButtonClose} aria-labelledby=\"form-dialog-title\">\r\n        <DialogTitle id=\"form-dialog-title\">Assign Badge</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            To assign this badge to many users, enter all email addresses here separated with a comma\r\n          </DialogContentText>\r\n          <TextField\r\n            autoFocus\r\n            margin=\"dense\"\r\n            id=\"assigneeEmail\"\r\n            label=\"Assignee Emails\"\r\n            type=\"url\"\r\n            fullWidth\r\n            onChange={handleAssigneeEmailChange}\r\n            value={assigneeEmail}\r\n            required\r\n            inputProps={{\r\n              \"data-testid\": \"badgeDetails_assigneeEmail\",\r\n            }}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleAssignBadgeButtonClose} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={handleAssignBadge} data-testid=\"badgeDetails_assignBadge\"  color=\"primary\">\r\n            Assign Badge\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n            data-testid=\"badgeDetails_backButton\" \r\n            onClick={handleBackButtonClick}>\r\n            Back to Badges\r\n        </Button>\r\n          </Grid>\r\n        </Grid>\r\n        <label>{assignBadgeResult}</label>\r\n        <input type=\"text\" hidden data-testid='badgeDetails_AssignResult' value={assignBadgeResult} readOnly />\r\n      </div>\r\n    </Container>\r\n  );\r\n      }\r\n\r\nelse {\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        {/* <Avatar className={classes.avatar}>\r\n          <CardMembershipOutlinedIcon />\r\n        </Avatar> */}\r\n        <Typography >\r\n          {/* <CardMembershipOutlinedIcon /> */}\r\n          <img src={icon} width=\"150\"/>\r\n        </Typography>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Badge Details\r\n      </Typography>\r\n        <br></br>\r\n        {/* <form className={classes.form} noValidate> */}\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={12} >\r\n            <TextField\r\n              name=\"badgeName\"\r\n              variant=\"outlined\"\r\n              fullWidth\r\n\r\n              id=\"badgeName\"\r\n              label=\"Badge Name\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgeDetails_badgeName\",\r\n              }}\r\n              value={badgeName}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} >\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              multiline\r\n              id=\"badgeDescription\"\r\n              label=\"Badge Description\"\r\n              name=\"badgeDescription\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgeDetails_badgeDescription\",\r\n              }}\r\n              value={badgeDescriptoion}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              id=\"createdDate\"\r\n              label=\"Created Date\"\r\n              name=\"createdDate\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgedetails_createdDate\",\r\n              }}\r\n              value={createdDate}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              id=\"modifiedDate\"\r\n              label=\"modified Date\"\r\n              name=\"modifiedDate\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgeDetails_modifiedDate\",\r\n              }}\r\n              value={modifiedDate}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              name=\"link\"\r\n              label=\"Link\"\r\n              id=\"link\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgeDetails_link\",\r\n              }}\r\n              value={link}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              name=\"badgeType\"\r\n              label=\"Badge Type\"\r\n              id=\"badgeType\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgeDetails_badgeType\",\r\n              }}\r\n              value={badgeType}\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              name=\"evidenceRequired\"\r\n              label=\"Evidence Required\"\r\n              id=\"evidenceRequired\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgeDetails_evidenceRequired\",\r\n              }}\r\n              value={evidenceRequired}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              name=\"userRequestable\"\r\n              label=\"User Requestable\"\r\n              id=\"userRequestable\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgeDetails_userRequestable\",\r\n              }}\r\n              value={userRequestable}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              name=\"owners\"\r\n              label=\"Owners of Badge\"\r\n              id=\"owners\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgeDetails_owners\",\r\n              }}\r\n              value={owners}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              \r\n              name=\"reviewers\"\r\n              label=\"Reviewers of Badge\"\r\n              id=\"reviewers\"\r\n              inputProps={{\r\n                \"data-testid\": \"badgeDetails_reviewers\",\r\n              }}\r\n              value={reviewers}\r\n            />\r\n          </Grid>\r\n\r\n        </Grid>\r\n        <Grid container spacing={1}>\r\n          <Grid item xs={12} sm={6}>\r\n            <Button\r\n              type=\"submit\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.submit}\r\n              data-testid=\"badgeDetails_requestButton\" \r\n              onClick={handleRequestBadgeButtonClick}>\r\n              Request Badge\r\n        </Button>\r\n        <Dialog open={requestBadgeButtonClicked} onClose={handleRequestBadgeButtonClose} aria-labelledby=\"form-dialog-title\">\r\n        <DialogTitle id=\"form-dialog-title\">Request Badge</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            To request badge please enter your Evidence Link\r\n          </DialogContentText>\r\n          <TextField\r\n            autoFocus\r\n            margin=\"dense\"\r\n            id=\"workLink\"\r\n            label=\"Evidence Link\"\r\n            type=\"url\"\r\n            fullWidth\r\n            onChange={handleWorkLinkChange}\r\n            value={workLink}\r\n            required\r\n            inputProps={{\r\n              \"data-testid\": \"badgeDetails_workLink\",\r\n            }}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleRequestBadgeButtonClose} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={handlerequestBadge} data-testid=\"badgeDetails_applyBadge\"  color=\"primary\">\r\n            Request Badge\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n            data-testid=\"badgeDetails_backButton\" \r\n            onClick={handleBackButtonClick} >\r\n            Back to Badges\r\n        </Button>\r\n          </Grid>\r\n        </Grid>\r\n        <label>{requestBadgeResult}</label>\r\n        <input type=\"text\" hidden data-testid='badgeDetails_RequestResult' value={requestBadgeResult} readOnly />\r\n      </div>\r\n    </Container>\r\n  );\r\n      } \r\n\r\n}\r\n  //   }\r\n  // }\r\n};\r\n\r\nexport default BadgeDetailsForm;","C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\API\\ViewAssertionsAPI.js",[],"C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\API\\ViewBadgeAPI.js",[],"C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\API\\UpdateUserBadgeStatusAPI.js",[],"C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\API\\UpdateAssertionAPI.js",[],"C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\API\\UpdateUserDetailsAPI.js",[],"C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\API\\AddNewUserAPI.js",[],"C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\API\\AddLinkedInCertificateAPI.js",["418"],"const getLinkedInResponse = async(name,issueMonth,issueYear,url) => {\r\n\r\n    var url = 'https://www.linkedin.com/profile/add?startTask=CERTIFICATION_NAME&name=' + name + '&organizationId=16198010&issueYear=' + issueYear+'&issueMonth='+issueMonth+'&certUrl='+url;\r\n    \r\n    window.open(url);\r\n    \r\n}\r\n\r\nexport default getLinkedInResponse;","C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\API\\AddNewAssertionAPI.js",[],"C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\API\\UpdateBadgeAPI.js",[],"C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\API\\BadgeDetailsByNameAPI.js",[],"C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\forms\\ForgotPasswordForm.js",["419","420","421","422"],"C:\\Capstone_UI\\AI_Badger_API\\UI\\src\\API\\SendPasswordResetEmailAPI.js",[],{"ruleId":"423","replacedBy":"424"},{"ruleId":"425","replacedBy":"426"},{"ruleId":"427","severity":1,"message":"428","line":3,"column":8,"nodeType":"429","messageId":"430","endLine":3,"endColumn":24},{"ruleId":"427","severity":1,"message":"431","line":4,"column":8,"nodeType":"429","messageId":"430","endLine":4,"endColumn":23},{"ruleId":"427","severity":1,"message":"432","line":10,"column":3,"nodeType":"429","messageId":"430","endLine":10,"endColumn":7},{"ruleId":"427","severity":1,"message":"428","line":4,"column":8,"nodeType":"429","messageId":"430","endLine":4,"endColumn":24},{"ruleId":"433","severity":1,"message":"434","line":70,"column":21,"nodeType":"435","messageId":"436","endLine":70,"endColumn":23},{"ruleId":"433","severity":1,"message":"434","line":70,"column":43,"nodeType":"435","messageId":"436","endLine":70,"endColumn":45},{"ruleId":"433","severity":1,"message":"434","line":70,"column":58,"nodeType":"435","messageId":"436","endLine":70,"endColumn":60},{"ruleId":"433","severity":1,"message":"434","line":70,"column":69,"nodeType":"435","messageId":"436","endLine":70,"endColumn":71},{"ruleId":"433","severity":1,"message":"434","line":70,"column":83,"nodeType":"435","messageId":"436","endLine":70,"endColumn":85},{"ruleId":"427","severity":1,"message":"437","line":77,"column":13,"nodeType":"429","messageId":"430","endLine":77,"endColumn":21},{"ruleId":"427","severity":1,"message":"438","line":1,"column":27,"nodeType":"429","messageId":"430","endLine":1,"endColumn":31},{"ruleId":"427","severity":1,"message":"439","line":8,"column":8,"nodeType":"429","messageId":"430","endLine":8,"endColumn":24},{"ruleId":"427","severity":1,"message":"440","line":9,"column":8,"nodeType":"429","messageId":"430","endLine":9,"endColumn":16},{"ruleId":"427","severity":1,"message":"441","line":12,"column":8,"nodeType":"429","messageId":"430","endLine":12,"endColumn":11},{"ruleId":"427","severity":1,"message":"442","line":23,"column":10,"nodeType":"429","messageId":"430","endLine":23,"endColumn":20},{"ruleId":"427","severity":1,"message":"443","line":41,"column":9,"nodeType":"429","messageId":"430","endLine":41,"endColumn":31},{"ruleId":"433","severity":1,"message":"444","line":94,"column":18,"nodeType":"435","messageId":"436","endLine":94,"endColumn":20},{"ruleId":"427","severity":1,"message":"437","line":100,"column":11,"nodeType":"429","messageId":"430","endLine":100,"endColumn":19},{"ruleId":"427","severity":1,"message":"445","line":108,"column":9,"nodeType":"429","messageId":"430","endLine":108,"endColumn":20},{"ruleId":"433","severity":1,"message":"434","line":112,"column":16,"nodeType":"435","messageId":"436","endLine":112,"endColumn":18},{"ruleId":"433","severity":1,"message":"434","line":121,"column":18,"nodeType":"435","messageId":"436","endLine":121,"endColumn":20},{"ruleId":"433","severity":1,"message":"434","line":151,"column":48,"nodeType":"435","messageId":"436","endLine":151,"endColumn":50},{"ruleId":"433","severity":1,"message":"434","line":151,"column":71,"nodeType":"435","messageId":"436","endLine":151,"endColumn":73},{"ruleId":"433","severity":1,"message":"434","line":169,"column":47,"nodeType":"435","messageId":"436","endLine":169,"endColumn":49},{"ruleId":"433","severity":1,"message":"434","line":169,"column":69,"nodeType":"435","messageId":"436","endLine":169,"endColumn":71},{"ruleId":"433","severity":1,"message":"434","line":202,"column":44,"nodeType":"435","messageId":"436","endLine":202,"endColumn":46},{"ruleId":"433","severity":1,"message":"434","line":202,"column":63,"nodeType":"435","messageId":"436","endLine":202,"endColumn":65},{"ruleId":"433","severity":1,"message":"434","line":218,"column":47,"nodeType":"435","messageId":"436","endLine":218,"endColumn":49},{"ruleId":"433","severity":1,"message":"434","line":218,"column":65,"nodeType":"435","messageId":"436","endLine":218,"endColumn":67},{"ruleId":"433","severity":1,"message":"434","line":236,"column":54,"nodeType":"435","messageId":"436","endLine":236,"endColumn":56},{"ruleId":"433","severity":1,"message":"434","line":236,"column":76,"nodeType":"435","messageId":"436","endLine":236,"endColumn":78},{"ruleId":"427","severity":1,"message":"438","line":1,"column":26,"nodeType":"429","messageId":"430","endLine":1,"endColumn":30},{"ruleId":"427","severity":1,"message":"446","line":3,"column":8,"nodeType":"429","messageId":"430","endLine":3,"endColumn":14},{"ruleId":"427","severity":1,"message":"439","line":6,"column":8,"nodeType":"429","messageId":"430","endLine":6,"endColumn":24},{"ruleId":"427","severity":1,"message":"440","line":7,"column":8,"nodeType":"429","messageId":"430","endLine":7,"endColumn":16},{"ruleId":"427","severity":1,"message":"432","line":8,"column":8,"nodeType":"429","messageId":"430","endLine":8,"endColumn":12},{"ruleId":"427","severity":1,"message":"441","line":10,"column":8,"nodeType":"429","messageId":"430","endLine":10,"endColumn":11},{"ruleId":"427","severity":1,"message":"447","line":12,"column":8,"nodeType":"429","messageId":"430","endLine":12,"endColumn":24},{"ruleId":"427","severity":1,"message":"448","line":17,"column":8,"nodeType":"429","messageId":"430","endLine":17,"endColumn":19},{"ruleId":"427","severity":1,"message":"449","line":20,"column":8,"nodeType":"429","messageId":"430","endLine":20,"endColumn":26},{"ruleId":"427","severity":1,"message":"450","line":25,"column":20,"nodeType":"429","messageId":"430","endLine":25,"endColumn":26},{"ruleId":"427","severity":1,"message":"451","line":26,"column":3,"nodeType":"429","messageId":"430","endLine":26,"endColumn":9},{"ruleId":"427","severity":1,"message":"452","line":27,"column":3,"nodeType":"429","messageId":"430","endLine":27,"endColumn":8},{"ruleId":"427","severity":1,"message":"453","line":91,"column":11,"nodeType":"429","messageId":"430","endLine":91,"endColumn":20},{"ruleId":"433","severity":1,"message":"444","line":94,"column":21,"nodeType":"435","messageId":"436","endLine":94,"endColumn":23},{"ruleId":"454","severity":1,"message":"455","line":113,"column":8,"nodeType":"456","endLine":113,"endColumn":10,"suggestions":"457"},{"ruleId":"427","severity":1,"message":"439","line":9,"column":8,"nodeType":"429","messageId":"430","endLine":9,"endColumn":24},{"ruleId":"427","severity":1,"message":"440","line":10,"column":8,"nodeType":"429","messageId":"430","endLine":10,"endColumn":16},{"ruleId":"427","severity":1,"message":"441","line":13,"column":8,"nodeType":"429","messageId":"430","endLine":13,"endColumn":11},{"ruleId":"427","severity":1,"message":"458","line":20,"column":8,"nodeType":"429","messageId":"430","endLine":20,"endColumn":23},{"ruleId":"427","severity":1,"message":"459","line":21,"column":8,"nodeType":"429","messageId":"430","endLine":21,"endColumn":18},{"ruleId":"427","severity":1,"message":"437","line":74,"column":13,"nodeType":"429","messageId":"430","endLine":74,"endColumn":21},{"ruleId":"433","severity":1,"message":"434","line":83,"column":15,"nodeType":"435","messageId":"436","endLine":83,"endColumn":17},{"ruleId":"433","severity":1,"message":"434","line":83,"column":55,"nodeType":"435","messageId":"436","endLine":83,"endColumn":57},{"ruleId":"433","severity":1,"message":"434","line":83,"column":95,"nodeType":"435","messageId":"436","endLine":83,"endColumn":97},{"ruleId":"433","severity":1,"message":"434","line":95,"column":22,"nodeType":"435","messageId":"436","endLine":95,"endColumn":24},{"ruleId":"433","severity":1,"message":"434","line":104,"column":26,"nodeType":"435","messageId":"436","endLine":104,"endColumn":28},{"ruleId":"433","severity":1,"message":"434","line":133,"column":44,"nodeType":"435","messageId":"436","endLine":133,"endColumn":46},{"ruleId":"433","severity":1,"message":"434","line":133,"column":63,"nodeType":"435","messageId":"436","endLine":133,"endColumn":65},{"ruleId":"433","severity":1,"message":"434","line":152,"column":47,"nodeType":"435","messageId":"436","endLine":152,"endColumn":49},{"ruleId":"433","severity":1,"message":"434","line":152,"column":69,"nodeType":"435","messageId":"436","endLine":152,"endColumn":71},{"ruleId":"460","severity":1,"message":"461","line":3,"column":120,"nodeType":"435","messageId":"462","endLine":3,"endColumn":121},{"ruleId":"427","severity":1,"message":"463","line":1,"column":17,"nodeType":"429","messageId":"430","endLine":1,"endColumn":30},{"ruleId":"427","severity":1,"message":"441","line":6,"column":8,"nodeType":"429","messageId":"430","endLine":6,"endColumn":11},{"ruleId":"427","severity":1,"message":"432","line":17,"column":8,"nodeType":"429","messageId":"430","endLine":17,"endColumn":12},{"ruleId":"427","severity":1,"message":"464","line":44,"column":8,"nodeType":"429","messageId":"430","endLine":44,"endColumn":9},{"ruleId":"427","severity":1,"message":"465","line":52,"column":21,"nodeType":"429","messageId":"430","endLine":52,"endColumn":32},{"ruleId":"427","severity":1,"message":"466","line":53,"column":18,"nodeType":"429","messageId":"430","endLine":53,"endColumn":26},{"ruleId":"427","severity":1,"message":"437","line":83,"column":11,"nodeType":"429","messageId":"430","endLine":83,"endColumn":19},{"ruleId":"427","severity":1,"message":"453","line":284,"column":9,"nodeType":"429","messageId":"430","endLine":284,"endColumn":18},{"ruleId":"433","severity":1,"message":"444","line":287,"column":19,"nodeType":"435","messageId":"436","endLine":287,"endColumn":21},{"ruleId":"454","severity":1,"message":"467","line":301,"column":4,"nodeType":"456","endLine":301,"endColumn":6,"suggestions":"468"},{"ruleId":"433","severity":1,"message":"434","line":348,"column":18,"nodeType":"435","messageId":"436","endLine":348,"endColumn":20},{"ruleId":"433","severity":1,"message":"434","line":348,"column":89,"nodeType":"435","messageId":"436","endLine":348,"endColumn":91},{"ruleId":"433","severity":1,"message":"434","line":357,"column":28,"nodeType":"435","messageId":"436","endLine":357,"endColumn":30},{"ruleId":"433","severity":1,"message":"434","line":358,"column":28,"nodeType":"435","messageId":"436","endLine":358,"endColumn":30},{"ruleId":"433","severity":1,"message":"434","line":359,"column":28,"nodeType":"435","messageId":"436","endLine":359,"endColumn":30},{"ruleId":"433","severity":1,"message":"434","line":360,"column":28,"nodeType":"435","messageId":"436","endLine":360,"endColumn":30},{"ruleId":"433","severity":1,"message":"434","line":361,"column":28,"nodeType":"435","messageId":"436","endLine":361,"endColumn":30},{"ruleId":"427","severity":1,"message":"438","line":1,"column":27,"nodeType":"429","messageId":"430","endLine":1,"endColumn":31},{"ruleId":"427","severity":1,"message":"469","line":11,"column":8,"nodeType":"429","messageId":"430","endLine":11,"endColumn":14},{"ruleId":"427","severity":1,"message":"470","line":13,"column":8,"nodeType":"429","messageId":"430","endLine":13,"endColumn":28},{"ruleId":"427","severity":1,"message":"471","line":14,"column":8,"nodeType":"429","messageId":"430","endLine":14,"endColumn":33},{"ruleId":"427","severity":1,"message":"472","line":28,"column":18,"nodeType":"429","messageId":"430","endLine":28,"endColumn":27},{"ruleId":"427","severity":1,"message":"453","line":58,"column":9,"nodeType":"429","messageId":"430","endLine":58,"endColumn":18},{"ruleId":"433","severity":1,"message":"444","line":61,"column":17,"nodeType":"435","messageId":"436","endLine":61,"endColumn":19},{"ruleId":"454","severity":1,"message":"473","line":78,"column":6,"nodeType":"456","endLine":78,"endColumn":8,"suggestions":"474"},{"ruleId":"433","severity":1,"message":"434","line":80,"column":24,"nodeType":"435","messageId":"436","endLine":80,"endColumn":26},{"ruleId":"433","severity":1,"message":"434","line":82,"column":23,"nodeType":"435","messageId":"436","endLine":82,"endColumn":25},{"ruleId":"427","severity":1,"message":"475","line":4,"column":8,"nodeType":"429","messageId":"430","endLine":4,"endColumn":18},{"ruleId":"427","severity":1,"message":"432","line":15,"column":8,"nodeType":"429","messageId":"430","endLine":15,"endColumn":12},{"ruleId":"427","severity":1,"message":"476","line":23,"column":15,"nodeType":"429","messageId":"430","endLine":23,"endColumn":24},{"ruleId":"427","severity":1,"message":"453","line":77,"column":9,"nodeType":"429","messageId":"430","endLine":77,"endColumn":18},{"ruleId":"433","severity":1,"message":"444","line":80,"column":17,"nodeType":"435","messageId":"436","endLine":80,"endColumn":19},{"ruleId":"454","severity":1,"message":"477","line":97,"column":8,"nodeType":"456","endLine":97,"endColumn":10,"suggestions":"478"},{"ruleId":"427","severity":1,"message":"479","line":99,"column":13,"nodeType":"429","messageId":"430","endLine":99,"endColumn":18},{"ruleId":"433","severity":1,"message":"434","line":103,"column":28,"nodeType":"435","messageId":"436","endLine":103,"endColumn":30},{"ruleId":"427","severity":1,"message":"438","line":1,"column":27,"nodeType":"429","messageId":"430","endLine":1,"endColumn":31},{"ruleId":"427","severity":1,"message":"465","line":20,"column":20,"nodeType":"429","messageId":"430","endLine":20,"endColumn":31},{"ruleId":"427","severity":1,"message":"472","line":21,"column":18,"nodeType":"429","messageId":"430","endLine":21,"endColumn":27},{"ruleId":"427","severity":1,"message":"480","line":31,"column":10,"nodeType":"429","messageId":"430","endLine":31,"endColumn":23},{"ruleId":"427","severity":1,"message":"481","line":31,"column":24,"nodeType":"429","messageId":"430","endLine":31,"endColumn":40},{"ruleId":"427","severity":1,"message":"482","line":60,"column":9,"nodeType":"429","messageId":"430","endLine":60,"endColumn":16},{"ruleId":"427","severity":1,"message":"453","line":65,"column":9,"nodeType":"429","messageId":"430","endLine":65,"endColumn":18},{"ruleId":"433","severity":1,"message":"444","line":68,"column":17,"nodeType":"435","messageId":"436","endLine":68,"endColumn":19},{"ruleId":"454","severity":1,"message":"483","line":89,"column":6,"nodeType":"456","endLine":89,"endColumn":8,"suggestions":"484"},{"ruleId":"433","severity":1,"message":"434","line":91,"column":21,"nodeType":"435","messageId":"436","endLine":91,"endColumn":23},{"ruleId":"485","severity":1,"message":"486","line":117,"column":28,"nodeType":"487","endLine":117,"endColumn":61},{"ruleId":"433","severity":1,"message":"434","line":122,"column":26,"nodeType":"435","messageId":"436","endLine":122,"endColumn":28},{"ruleId":"427","severity":1,"message":"438","line":1,"column":27,"nodeType":"429","messageId":"430","endLine":1,"endColumn":31},{"ruleId":"427","severity":1,"message":"469","line":11,"column":8,"nodeType":"429","messageId":"430","endLine":11,"endColumn":14},{"ruleId":"427","severity":1,"message":"466","line":22,"column":18,"nodeType":"429","messageId":"430","endLine":22,"endColumn":26},{"ruleId":"427","severity":1,"message":"465","line":23,"column":19,"nodeType":"429","messageId":"430","endLine":23,"endColumn":30},{"ruleId":"427","severity":1,"message":"472","line":24,"column":17,"nodeType":"429","messageId":"430","endLine":24,"endColumn":26},{"ruleId":"427","severity":1,"message":"482","line":47,"column":9,"nodeType":"429","messageId":"430","endLine":47,"endColumn":16},{"ruleId":"433","severity":1,"message":"434","line":51,"column":17,"nodeType":"435","messageId":"436","endLine":51,"endColumn":19},{"ruleId":"433","severity":1,"message":"444","line":55,"column":19,"nodeType":"435","messageId":"436","endLine":55,"endColumn":21},{"ruleId":"488","severity":1,"message":"489","line":68,"column":9,"nodeType":"429","messageId":"490","endLine":68,"endColumn":18},{"ruleId":"427","severity":1,"message":"453","line":68,"column":9,"nodeType":"429","messageId":"430","endLine":68,"endColumn":18},{"ruleId":"433","severity":1,"message":"444","line":71,"column":17,"nodeType":"435","messageId":"436","endLine":71,"endColumn":19},{"ruleId":"454","severity":1,"message":"491","line":92,"column":6,"nodeType":"456","endLine":92,"endColumn":8,"suggestions":"492"},{"ruleId":"433","severity":1,"message":"434","line":94,"column":28,"nodeType":"435","messageId":"436","endLine":94,"endColumn":30},{"ruleId":"427","severity":1,"message":"438","line":1,"column":26,"nodeType":"429","messageId":"430","endLine":1,"endColumn":30},{"ruleId":"427","severity":1,"message":"493","line":2,"column":8,"nodeType":"429","messageId":"430","endLine":2,"endColumn":31},{"ruleId":"427","severity":1,"message":"494","line":3,"column":8,"nodeType":"429","messageId":"430","endLine":3,"endColumn":17},{"ruleId":"427","severity":1,"message":"495","line":4,"column":8,"nodeType":"429","messageId":"430","endLine":4,"endColumn":14},{"ruleId":"427","severity":1,"message":"439","line":8,"column":8,"nodeType":"429","messageId":"430","endLine":8,"endColumn":24},{"ruleId":"427","severity":1,"message":"440","line":9,"column":8,"nodeType":"429","messageId":"430","endLine":9,"endColumn":16},{"ruleId":"427","severity":1,"message":"432","line":10,"column":8,"nodeType":"429","messageId":"430","endLine":10,"endColumn":12},{"ruleId":"427","severity":1,"message":"441","line":12,"column":8,"nodeType":"429","messageId":"430","endLine":12,"endColumn":11},{"ruleId":"427","severity":1,"message":"447","line":13,"column":8,"nodeType":"429","messageId":"430","endLine":13,"endColumn":24},{"ruleId":"427","severity":1,"message":"496","line":19,"column":8,"nodeType":"429","messageId":"430","endLine":19,"endColumn":34},{"ruleId":"427","severity":1,"message":"466","line":45,"column":18,"nodeType":"429","messageId":"430","endLine":45,"endColumn":26},{"ruleId":"427","severity":1,"message":"465","line":47,"column":21,"nodeType":"429","messageId":"430","endLine":47,"endColumn":32},{"ruleId":"427","severity":1,"message":"453","line":75,"column":13,"nodeType":"429","messageId":"430","endLine":75,"endColumn":22},{"ruleId":"433","severity":1,"message":"444","line":78,"column":23,"nodeType":"435","messageId":"436","endLine":78,"endColumn":25},{"ruleId":"433","severity":1,"message":"444","line":86,"column":45,"nodeType":"435","messageId":"436","endLine":86,"endColumn":47},{"ruleId":"433","severity":1,"message":"434","line":102,"column":17,"nodeType":"435","messageId":"436","endLine":102,"endColumn":19},{"ruleId":"433","severity":1,"message":"434","line":107,"column":22,"nodeType":"435","messageId":"436","endLine":107,"endColumn":24},{"ruleId":"488","severity":1,"message":"497","line":116,"column":13,"nodeType":"429","messageId":"490","endLine":116,"endColumn":22},{"ruleId":"427","severity":1,"message":"498","line":116,"column":13,"nodeType":"429","messageId":"430","endLine":116,"endColumn":22},{"ruleId":"433","severity":1,"message":"434","line":120,"column":22,"nodeType":"435","messageId":"436","endLine":120,"endColumn":24},{"ruleId":"427","severity":1,"message":"499","line":131,"column":11,"nodeType":"429","messageId":"430","endLine":131,"endColumn":32},{"ruleId":"427","severity":1,"message":"453","line":133,"column":13,"nodeType":"429","messageId":"430","endLine":133,"endColumn":22},{"ruleId":"433","severity":1,"message":"444","line":136,"column":23,"nodeType":"435","messageId":"436","endLine":136,"endColumn":25},{"ruleId":"454","severity":1,"message":"500","line":153,"column":8,"nodeType":"456","endLine":153,"endColumn":10,"suggestions":"501"},{"ruleId":"433","severity":1,"message":"434","line":175,"column":26,"nodeType":"435","messageId":"436","endLine":175,"endColumn":28},{"ruleId":"485","severity":1,"message":"486","line":192,"column":17,"nodeType":"487","endLine":192,"endColumn":46},{"ruleId":"433","severity":1,"message":"434","line":307,"column":47,"nodeType":"435","messageId":"436","endLine":307,"endColumn":49},{"ruleId":"433","severity":1,"message":"434","line":350,"column":47,"nodeType":"435","messageId":"436","endLine":350,"endColumn":49},{"ruleId":"433","severity":1,"message":"434","line":392,"column":47,"nodeType":"435","messageId":"436","endLine":392,"endColumn":49},{"ruleId":"427","severity":1,"message":"438","line":1,"column":27,"nodeType":"429","messageId":"430","endLine":1,"endColumn":31},{"ruleId":"427","severity":1,"message":"493","line":2,"column":8,"nodeType":"429","messageId":"430","endLine":2,"endColumn":31},{"ruleId":"427","severity":1,"message":"494","line":3,"column":8,"nodeType":"429","messageId":"430","endLine":3,"endColumn":17},{"ruleId":"427","severity":1,"message":"439","line":8,"column":8,"nodeType":"429","messageId":"430","endLine":8,"endColumn":24},{"ruleId":"427","severity":1,"message":"440","line":9,"column":8,"nodeType":"429","messageId":"430","endLine":9,"endColumn":16},{"ruleId":"427","severity":1,"message":"432","line":10,"column":8,"nodeType":"429","messageId":"430","endLine":10,"endColumn":12},{"ruleId":"427","severity":1,"message":"441","line":12,"column":8,"nodeType":"429","messageId":"430","endLine":12,"endColumn":11},{"ruleId":"427","severity":1,"message":"447","line":13,"column":8,"nodeType":"429","messageId":"430","endLine":13,"endColumn":24},{"ruleId":"427","severity":1,"message":"466","line":29,"column":19,"nodeType":"429","messageId":"430","endLine":29,"endColumn":27},{"ruleId":"427","severity":1,"message":"502","line":38,"column":21,"nodeType":"429","messageId":"430","endLine":38,"endColumn":31},{"ruleId":"427","severity":1,"message":"453","line":70,"column":13,"nodeType":"429","messageId":"430","endLine":70,"endColumn":22},{"ruleId":"433","severity":1,"message":"444","line":73,"column":23,"nodeType":"435","messageId":"436","endLine":73,"endColumn":25},{"ruleId":"427","severity":1,"message":"498","line":91,"column":13,"nodeType":"429","messageId":"430","endLine":91,"endColumn":22},{"ruleId":"433","severity":1,"message":"434","line":94,"column":22,"nodeType":"435","messageId":"436","endLine":94,"endColumn":24},{"ruleId":"454","severity":1,"message":"467","line":107,"column":8,"nodeType":"456","endLine":107,"endColumn":10,"suggestions":"503"},{"ruleId":"433","severity":1,"message":"434","line":139,"column":26,"nodeType":"435","messageId":"436","endLine":139,"endColumn":28},{"ruleId":"433","severity":1,"message":"434","line":341,"column":47,"nodeType":"435","messageId":"436","endLine":341,"endColumn":49},{"ruleId":"427","severity":1,"message":"438","line":1,"column":27,"nodeType":"429","messageId":"430","endLine":1,"endColumn":31},{"ruleId":"427","severity":1,"message":"504","line":1,"column":33,"nodeType":"429","messageId":"430","endLine":1,"endColumn":42},{"ruleId":"427","severity":1,"message":"493","line":2,"column":8,"nodeType":"429","messageId":"430","endLine":2,"endColumn":31},{"ruleId":"427","severity":1,"message":"494","line":3,"column":8,"nodeType":"429","messageId":"430","endLine":3,"endColumn":17},{"ruleId":"427","severity":1,"message":"439","line":8,"column":8,"nodeType":"429","messageId":"430","endLine":8,"endColumn":24},{"ruleId":"427","severity":1,"message":"440","line":9,"column":8,"nodeType":"429","messageId":"430","endLine":9,"endColumn":16},{"ruleId":"427","severity":1,"message":"432","line":10,"column":8,"nodeType":"429","messageId":"430","endLine":10,"endColumn":12},{"ruleId":"427","severity":1,"message":"441","line":12,"column":8,"nodeType":"429","messageId":"430","endLine":12,"endColumn":11},{"ruleId":"427","severity":1,"message":"447","line":13,"column":8,"nodeType":"429","messageId":"430","endLine":13,"endColumn":24},{"ruleId":"427","severity":1,"message":"471","line":17,"column":8,"nodeType":"429","messageId":"430","endLine":17,"endColumn":33},{"ruleId":"427","severity":1,"message":"459","line":19,"column":8,"nodeType":"429","messageId":"430","endLine":19,"endColumn":18},{"ruleId":"427","severity":1,"message":"505","line":25,"column":8,"nodeType":"429","messageId":"430","endLine":25,"endColumn":17},{"ruleId":"433","severity":1,"message":"444","line":85,"column":22,"nodeType":"435","messageId":"436","endLine":85,"endColumn":24},{"ruleId":"427","severity":1,"message":"498","line":91,"column":13,"nodeType":"429","messageId":"430","endLine":91,"endColumn":22},{"ruleId":"433","severity":1,"message":"434","line":94,"column":22,"nodeType":"435","messageId":"436","endLine":94,"endColumn":24},{"ruleId":"433","severity":1,"message":"434","line":159,"column":26,"nodeType":"435","messageId":"436","endLine":159,"endColumn":28},{"ruleId":"433","severity":1,"message":"434","line":191,"column":58,"nodeType":"435","messageId":"436","endLine":191,"endColumn":60},{"ruleId":"433","severity":1,"message":"434","line":191,"column":81,"nodeType":"435","messageId":"436","endLine":191,"endColumn":83},{"ruleId":"433","severity":1,"message":"434","line":209,"column":59,"nodeType":"435","messageId":"436","endLine":209,"endColumn":61},{"ruleId":"433","severity":1,"message":"434","line":209,"column":83,"nodeType":"435","messageId":"436","endLine":209,"endColumn":85},{"ruleId":"433","severity":1,"message":"434","line":226,"column":57,"nodeType":"435","messageId":"436","endLine":226,"endColumn":59},{"ruleId":"433","severity":1,"message":"434","line":226,"column":79,"nodeType":"435","messageId":"436","endLine":226,"endColumn":81},{"ruleId":"433","severity":1,"message":"434","line":243,"column":54,"nodeType":"435","messageId":"436","endLine":243,"endColumn":56},{"ruleId":"433","severity":1,"message":"434","line":243,"column":73,"nodeType":"435","messageId":"436","endLine":243,"endColumn":75},{"ruleId":"433","severity":1,"message":"434","line":264,"column":57,"nodeType":"435","messageId":"436","endLine":264,"endColumn":59},{"ruleId":"433","severity":1,"message":"434","line":264,"column":79,"nodeType":"435","messageId":"436","endLine":264,"endColumn":81},{"ruleId":"433","severity":1,"message":"434","line":287,"column":57,"nodeType":"435","messageId":"436","endLine":287,"endColumn":59},{"ruleId":"433","severity":1,"message":"434","line":287,"column":75,"nodeType":"435","messageId":"436","endLine":287,"endColumn":77},{"ruleId":"433","severity":1,"message":"434","line":305,"column":64,"nodeType":"435","messageId":"436","endLine":305,"endColumn":66},{"ruleId":"433","severity":1,"message":"434","line":305,"column":86,"nodeType":"435","messageId":"436","endLine":305,"endColumn":88},{"ruleId":"433","severity":1,"message":"434","line":322,"column":65,"nodeType":"435","messageId":"436","endLine":322,"endColumn":67},{"ruleId":"433","severity":1,"message":"434","line":322,"column":95,"nodeType":"435","messageId":"436","endLine":322,"endColumn":97},{"ruleId":"433","severity":1,"message":"434","line":335,"column":47,"nodeType":"435","messageId":"436","endLine":335,"endColumn":49},{"ruleId":"427","severity":1,"message":"438","line":1,"column":26,"nodeType":"429","messageId":"430","endLine":1,"endColumn":30},{"ruleId":"427","severity":1,"message":"496","line":12,"column":8,"nodeType":"429","messageId":"430","endLine":12,"endColumn":34},{"ruleId":"427","severity":1,"message":"453","line":84,"column":13,"nodeType":"429","messageId":"430","endLine":84,"endColumn":22},{"ruleId":"433","severity":1,"message":"444","line":89,"column":23,"nodeType":"435","messageId":"436","endLine":89,"endColumn":25},{"ruleId":"427","severity":1,"message":"453","line":100,"column":13,"nodeType":"429","messageId":"430","endLine":100,"endColumn":22},{"ruleId":"433","severity":1,"message":"444","line":104,"column":23,"nodeType":"435","messageId":"436","endLine":104,"endColumn":25},{"ruleId":"454","severity":1,"message":"500","line":131,"column":8,"nodeType":"456","endLine":131,"endColumn":10,"suggestions":"506"},{"ruleId":"433","severity":1,"message":"434","line":133,"column":26,"nodeType":"435","messageId":"436","endLine":133,"endColumn":28},{"ruleId":"485","severity":1,"message":"486","line":150,"column":17,"nodeType":"487","endLine":150,"endColumn":51},{"ruleId":"427","severity":1,"message":"438","line":1,"column":27,"nodeType":"429","messageId":"430","endLine":1,"endColumn":31},{"ruleId":"427","severity":1,"message":"493","line":2,"column":8,"nodeType":"429","messageId":"430","endLine":2,"endColumn":31},{"ruleId":"427","severity":1,"message":"494","line":3,"column":8,"nodeType":"429","messageId":"430","endLine":3,"endColumn":17},{"ruleId":"427","severity":1,"message":"495","line":4,"column":8,"nodeType":"429","messageId":"430","endLine":4,"endColumn":14},{"ruleId":"427","severity":1,"message":"439","line":8,"column":8,"nodeType":"429","messageId":"430","endLine":8,"endColumn":24},{"ruleId":"427","severity":1,"message":"440","line":9,"column":8,"nodeType":"429","messageId":"430","endLine":9,"endColumn":16},{"ruleId":"427","severity":1,"message":"432","line":10,"column":8,"nodeType":"429","messageId":"430","endLine":10,"endColumn":12},{"ruleId":"427","severity":1,"message":"441","line":12,"column":8,"nodeType":"429","messageId":"430","endLine":12,"endColumn":11},{"ruleId":"427","severity":1,"message":"447","line":13,"column":8,"nodeType":"429","messageId":"430","endLine":13,"endColumn":24},{"ruleId":"427","severity":1,"message":"496","line":19,"column":8,"nodeType":"429","messageId":"430","endLine":19,"endColumn":34},{"ruleId":"427","severity":1,"message":"507","line":22,"column":22,"nodeType":"429","messageId":"430","endLine":22,"endColumn":30},{"ruleId":"427","severity":1,"message":"465","line":39,"column":20,"nodeType":"429","messageId":"430","endLine":39,"endColumn":31},{"ruleId":"427","severity":1,"message":"472","line":40,"column":18,"nodeType":"429","messageId":"430","endLine":40,"endColumn":27},{"ruleId":"427","severity":1,"message":"508","line":41,"column":21,"nodeType":"429","messageId":"430","endLine":41,"endColumn":33},{"ruleId":"427","severity":1,"message":"498","line":130,"column":9,"nodeType":"429","messageId":"430","endLine":130,"endColumn":18},{"ruleId":"433","severity":1,"message":"434","line":133,"column":16,"nodeType":"435","messageId":"436","endLine":133,"endColumn":18},{"ruleId":"427","severity":1,"message":"509","line":161,"column":9,"nodeType":"429","messageId":"430","endLine":161,"endColumn":18},{"ruleId":"433","severity":1,"message":"434","line":164,"column":17,"nodeType":"435","messageId":"436","endLine":164,"endColumn":19},{"ruleId":"427","severity":1,"message":"510","line":174,"column":9,"nodeType":"429","messageId":"430","endLine":174,"endColumn":18},{"ruleId":"433","severity":1,"message":"444","line":177,"column":17,"nodeType":"435","messageId":"436","endLine":177,"endColumn":19},{"ruleId":"427","severity":1,"message":"511","line":181,"column":9,"nodeType":"429","messageId":"430","endLine":181,"endColumn":18},{"ruleId":"433","severity":1,"message":"434","line":184,"column":17,"nodeType":"435","messageId":"436","endLine":184,"endColumn":19},{"ruleId":"427","severity":1,"message":"453","line":194,"column":9,"nodeType":"429","messageId":"430","endLine":194,"endColumn":18},{"ruleId":"433","severity":1,"message":"444","line":197,"column":17,"nodeType":"435","messageId":"436","endLine":197,"endColumn":19},{"ruleId":"454","severity":1,"message":"512","line":218,"column":6,"nodeType":"456","endLine":218,"endColumn":8,"suggestions":"513"},{"ruleId":"433","severity":1,"message":"434","line":221,"column":22,"nodeType":"435","messageId":"436","endLine":221,"endColumn":24},{"ruleId":"433","severity":1,"message":"434","line":227,"column":13,"nodeType":"435","messageId":"436","endLine":227,"endColumn":15},{"ruleId":"485","severity":1,"message":"486","line":234,"column":11,"nodeType":"487","endLine":234,"endColumn":40},{"ruleId":"433","severity":1,"message":"434","line":448,"column":33,"nodeType":"435","messageId":"436","endLine":448,"endColumn":35},{"ruleId":"433","severity":1,"message":"434","line":477,"column":18,"nodeType":"435","messageId":"436","endLine":477,"endColumn":20},{"ruleId":"485","severity":1,"message":"486","line":483,"column":11,"nodeType":"487","endLine":483,"endColumn":40},{"ruleId":"485","severity":1,"message":"486","line":700,"column":11,"nodeType":"487","endLine":700,"endColumn":40},{"ruleId":"488","severity":1,"message":"514","line":3,"column":9,"nodeType":"429","messageId":"490","endLine":3,"endColumn":12},{"ruleId":"427","severity":1,"message":"438","line":1,"column":27,"nodeType":"429","messageId":"430","endLine":1,"endColumn":31},{"ruleId":"427","severity":1,"message":"437","line":49,"column":13,"nodeType":"429","messageId":"430","endLine":49,"endColumn":21},{"ruleId":"433","severity":1,"message":"434","line":78,"column":44,"nodeType":"435","messageId":"436","endLine":78,"endColumn":46},{"ruleId":"433","severity":1,"message":"434","line":78,"column":63,"nodeType":"435","messageId":"436","endLine":78,"endColumn":65},"no-native-reassign",["515"],"no-negated-in-lhs",["516"],"no-unused-vars","'RegistrationForm' is defined but never used.","Identifier","unusedVar","'CreateBadgeForm' is defined but never used.","'Link' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'response' is assigned a value but never used.","'Text' is defined but never used.","'FormControlLabel' is defined but never used.","'Checkbox' is defined but never used.","'Box' is defined but never used.","'middleName' is assigned a value but never used.","'handleMiddleNameChange' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'handleReset' is assigned a value but never used.","'Button' is defined but never used.","'LockOutlinedIcon' is defined but never used.","'CardActions' is defined but never used.","'LabelImportantIcon' is defined but never used.","'Router' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'response1' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'assertionId' and 'handleviewAssertionById'. Either include them or remove the dependency array.","ArrayExpression",["517"],"'formatTimeStamp' is defined but never used.","'formatDate' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'useDebugValue' is defined but never used.","'$' is defined but never used.","'setUserType' is assigned a value but never used.","'setEmail' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'handleviewUserByEmail'. Either include it or remove the dependency array.",["518"],"'Hidden' is defined but never used.","'AssertionDetailsForm' is defined but never used.","'UserDetailByEmailResponse' is defined but never used.","'setUserID' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'handleviewUsers'. Either include it or remove the dependency array.",["519"],"'CameraIcon' is defined but never used.","'setuserID' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'handleviewBackpackAssertions'. Either include it or remove the dependency array.",["520"],"'cards' is assigned a value but never used.","'passwordClick' is assigned a value but never used.","'setPasswordClick' is assigned a value but never used.","'classes' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'handleviewBadge'. Either include it or remove the dependency array.",["521"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-redeclare","'response1' is already defined.","redeclared","React Hook useEffect has a missing dependency: 'handleviewAssertions'. Either include it or remove the dependency array.",["522"],"'getRegistrationResponse' is defined but never used.","'LoginForm' is defined but never used.","'Avatar' is defined but never used.","'CardMembershipOutlinedIcon' is defined but never used.","'response2' is already defined.","'response2' is assigned a value but never used.","'handleviewUserByEmail' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'handleviewAssertionById'. Either include it or remove the dependency array.",["523"],"'setAdminId' is assigned a value but never used.",["524"],"'useEffect' is defined but never used.","'userEvent' is defined but never used.",["525"],"'StepIcon' is defined but never used.","'setClickType' is assigned a value but never used.","'response3' is assigned a value but never used.","'response4' is assigned a value but never used.","'response5' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'handleviewBadgeByName'. Either include it or remove the dependency array.",["526"],"'url' is already defined.","no-global-assign","no-unsafe-negation",{"desc":"527","fix":"528"},{"desc":"529","fix":"530"},{"desc":"531","fix":"532"},{"desc":"533","fix":"534"},{"desc":"535","fix":"536"},{"desc":"537","fix":"538"},{"desc":"539","fix":"540"},{"desc":"529","fix":"541"},{"desc":"539","fix":"542"},{"desc":"543","fix":"544"},"Update the dependencies array to be: [assertionId, handleviewAssertionById]",{"range":"545","text":"546"},"Update the dependencies array to be: [handleviewUserByEmail]",{"range":"547","text":"548"},"Update the dependencies array to be: [handleviewUsers]",{"range":"549","text":"550"},"Update the dependencies array to be: [handleviewBackpackAssertions]",{"range":"551","text":"552"},"Update the dependencies array to be: [handleviewBadge]",{"range":"553","text":"554"},"Update the dependencies array to be: [handleviewAssertions]",{"range":"555","text":"556"},"Update the dependencies array to be: [handleviewAssertionById]",{"range":"557","text":"558"},{"range":"559","text":"548"},{"range":"560","text":"558"},"Update the dependencies array to be: [handleviewBadgeByName]",{"range":"561","text":"562"},[3882,3884],"[assertionId, handleviewAssertionById]",[10013,10015],"[handleviewUserByEmail]",[2845,2847],"[handleviewUsers]",[2875,2877],"[handleviewBackpackAssertions]",[2641,2643],"[handleviewBadge]",[3059,3061],"[handleviewAssertions]",[5679,5681],"[handleviewAssertionById]",[4076,4078],[4528,4530],[7562,7564],"[handleviewBadgeByName]"]