[{"/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/index.js":"1","/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/App.js":"2","/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/reportWebVitals.js":"3","/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/forms/LoginForm.js":"4","/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/forms/RegistrationForm.js":"5","/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/forms/CertificatePublicLinkForm.js":"6","/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/forms/CreateBadgeForm.js":"7","/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/forms/LandingForm.js":"8","/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/API/LoginAPI.js":"9","/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/API/CreateBadgeAPI.js":"10","/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/API/AssertionDetailsByIdAPI.js":"11","/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/API/RegistrationAPI.js":"12","/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/scripts/functions.js":"13","/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/API/UserDetailsByEmailAPI.js":"14","/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/forms/MyBackpackForm.js":"15","/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/forms/ViewUsersForm.js":"16","/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/forms/ViewAssertionsForm.js":"17","/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/forms/ViewBadgeForm.js":"18","/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/forms/MyBackpackDetailsForm.js":"19","/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/API/MyBackpackAPI.js":"20","/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/API/ViewUsersAPI.js":"21","/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/forms/UserDetailsForm.js":"22","/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/forms/AssertionDetailsForm.js":"23","/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/forms/AddUserForm.js":"24","/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/forms/BadgeDetailsForm.js":"25","/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/API/ViewAssertionsAPI.js":"26","/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/API/ViewBadgeAPI.js":"27","/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/API/AddLinkedInCertificateAPI.js":"28","/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/API/UpdateAssertionAPI.js":"29","/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/API/UpdateUserBadgeStatusAPI.js":"30","/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/API/AddNewUserAPI.js":"31","/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/API/AddNewAssertionAPI.js":"32","/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/API/UpdateBadgeAPI.js":"33","/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/API/BadgeDetailsByNameAPI.js":"34","/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/API/UpdateUserDetailsAPI.js":"35"},{"size":500,"mtime":1614149736357,"results":"36","hashOfConfig":"37"},{"size":671,"mtime":1614104974469,"results":"38","hashOfConfig":"37"},{"size":362,"mtime":1612469893933,"results":"39","hashOfConfig":"37"},{"size":7466,"mtime":1614104974492,"results":"40","hashOfConfig":"37"},{"size":9134,"mtime":1611186027926,"results":"41","hashOfConfig":"37"},{"size":7822,"mtime":1614104974489,"results":"42","hashOfConfig":"37"},{"size":7117,"mtime":1614104974490,"results":"43","hashOfConfig":"37"},{"size":12278,"mtime":1614104974490,"results":"44","hashOfConfig":"37"},{"size":901,"mtime":1614104974464,"results":"45","hashOfConfig":"37"},{"size":1159,"mtime":1614104974464,"results":"46","hashOfConfig":"37"},{"size":1087,"mtime":1614104974463,"results":"47","hashOfConfig":"37"},{"size":954,"mtime":1614104974465,"results":"48","hashOfConfig":"37"},{"size":237,"mtime":1614104974500,"results":"49","hashOfConfig":"37"},{"size":1002,"mtime":1614104974467,"results":"50","hashOfConfig":"37"},{"size":5233,"mtime":1614104974493,"results":"51","hashOfConfig":"37"},{"size":5536,"mtime":1614104974496,"results":"52","hashOfConfig":"37"},{"size":4180,"mtime":1614104974495,"results":"53","hashOfConfig":"37"},{"size":4321,"mtime":1614104974495,"results":"54","hashOfConfig":"37"},{"size":12349,"mtime":1614104974493,"results":"55","hashOfConfig":"37"},{"size":876,"mtime":1614104974464,"results":"56","hashOfConfig":"37"},{"size":957,"mtime":1614104974468,"results":"57","hashOfConfig":"37"},{"size":14604,"mtime":1614104974494,"results":"58","hashOfConfig":"37"},{"size":16463,"mtime":1614104974488,"results":"59","hashOfConfig":"37"},{"size":14015,"mtime":1611186027923,"results":"60","hashOfConfig":"37"},{"size":21471,"mtime":1614104974489,"results":"61","hashOfConfig":"37"},{"size":976,"mtime":1614104974467,"results":"62","hashOfConfig":"37"},{"size":959,"mtime":1614104974468,"results":"63","hashOfConfig":"37"},{"size":331,"mtime":1614104974462,"results":"64","hashOfConfig":"37"},{"size":1221,"mtime":1614104974465,"results":"65","hashOfConfig":"37"},{"size":1143,"mtime":1614104974466,"results":"66","hashOfConfig":"37"},{"size":1057,"mtime":1614104974463,"results":"67","hashOfConfig":"37"},{"size":1344,"mtime":1614104974463,"results":"68","hashOfConfig":"37"},{"size":1405,"mtime":1614104974465,"results":"69","hashOfConfig":"37"},{"size":1080,"mtime":1614104974463,"results":"70","hashOfConfig":"37"},{"size":1300,"mtime":1614104974466,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"1e0uwlr",{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"74"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"74"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"74"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"74"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"74"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"74"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"74"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"74"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"74"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"74"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"74"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"74"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"74"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"74"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"74"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"74"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"74"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/index.js",[],["161","162"],"/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/App.js",["163","164","165"],"import React from 'react';\nimport LoginForm from './forms/LoginForm';\nimport RegistrationForm from './forms/RegistrationForm';\nimport CreateBadgeForm from './forms/CreateBadgeForm';\nimport CertificateForm from '../src/forms/CertificatePublicLinkForm';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n\nconst App = () => {\n  \n  return (\n    <Router>\n    <div>\n      {/* <LoginForm /> */}\n      {/* <CreateBadgeForm /> */}\n      <Switch>\n          <Route path=\"/:assertionId\" children={<CertificateForm />} />\n          <Route path=\"\" children={<LoginForm/>}/>\n      </Switch>\n    </div>\n    </Router>\n\n  );\n};\n\nexport default App;\n","/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/reportWebVitals.js",[],"/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/forms/LoginForm.js",["166","167","168","169","170","171","172","173","174","175","176","177","178","179"],"// import React from 'react';\nimport React, { useState } from 'react';\nimport getLoginResponse from '../API/LoginAPI'\nimport RegistrationForm from './RegistrationForm';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport LandingForm from './LandingForm';\nimport formatTimeStamp from '../scripts/functions'\nimport formatDate from '../scripts/functions';\n// import '../index.css'; \n\nconst LoginForm = (props) => {\n    const [email, setEmail] = useState('');\n    const [emailClick,setEmailClick] = useState('False');\n    const [passwordClick,setPasswordClick] = useState('False');\n    const [password, setPassword] = useState('');\n    const [result, setResult] = useState(props.result);\n    const [registration, setRegistration] = useState('');\n\n    const handlePasswordChange = event => {\n        setPassword(event.target.value);\n    };\n\n    const handleEmailChange = event => {\n        setEmail(event.target.value);\n    };\n\n    const handleRegister = event => {\n        setRegistration('register');\n    };\n\n    const useStyles = makeStyles((theme) => ({\n        paper: {\n          marginTop: theme.spacing(8),\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n        },\n        avatar: {\n          margin: theme.spacing(1),\n          backgroundColor: theme.palette.secondary.main,\n        },\n        form: {\n          width: '100%', // Fix IE 11 issue.\n          marginTop: theme.spacing(1),\n        },\n        submit: {\n          margin: theme.spacing(3, 0, 2),\n        },\n      }));\n\n      const classes = useStyles();\n\n    const handleLogin = async () => {\n        setEmailClick('True');\n        setPasswordClick('True');\n        var response = new Promise((resolve, reject) => {\n            resolve(getLoginResponse(email, password));\n        }).then(value => {\n            setPassword('');\n            setResult(value)\n        }\n        );\n    }\n    \n    if(result == '5f760d3425c1036d4d46655f' || result == '5f760d4325c1036d4d466560' || result == '5fc5567fcd831cc0c83774b8')\n    {\n        return (\n            <div>\n                <LandingForm userType={result} email={email}/>\n\n            </div>\n        );\n    }\n    else{\n\n    \n    if (registration == 'register') {\n        return (\n            <div>\n                <RegistrationForm />\n            </div>\n        );\n    }\n    else {\n        return (\n      \n            // <div>\n            //     <br></br>\n            //     <div>\n            //         <label> Enter Email</label> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n            //     <input type=\"text\"\n            //             data-testid=\"loginId\"\n            //             value={email}\n            //             onChange={handleEmailChange}\n            //         />\n\n            //     </div>\n            //     <br></br>\n            //     <div>\n            //         <label>Enter Password</label>&nbsp;&nbsp;&nbsp;&nbsp;\n            // <input type=\"password\"\n            //             data-testid=\"password\"\n            //             value={password}\n            //             onChange={handlePasswordChange}\n            //         />\n            //         <br></br>\n            //     </div>\n            //     <br></br>\n            //     <button data-testid=\"loginButton\" onClick={handleLogin}>\n            //         Login\n            // </button>\n            //  &nbsp;&nbsp;&nbsp;&nbsp;\n            //  &nbsp;&nbsp;&nbsp;&nbsp;\n\n\n            //     <button data-testid=\"registerButton\" onClick={handleRegister} >\n            //         Register\n            // </button>\n            //     <br></br>\n            //     <input\n            //         type=\"text\"\n            //         data-testid=\"result\"\n            //         value={result}\n            //         hidden\n            //         readOnly\n            //     />\n\n            //     <input\n            //         type=\"text\"\n            //         data-testid=\"registration\"\n            //         value={registration}\n            //         hidden\n            //         readOnly\n            //     />\n            //     <label>\n            //         {result}\n            //     </label>\n\n            // </div>\n\n<Container component=\"main\" maxWidth=\"xs\">\n<CssBaseline />\n<div className={classes.paper}>\n{/* <div>Here{process.env.REACT_APP_APILINK}</div> */}\n  <Avatar className={classes.avatar}>\n    <LockOutlinedIcon />\n  </Avatar>\n  <Typography component=\"h1\" variant=\"h5\">\n    Sign in \n  </Typography>\n  {/* <form className={classes.form} noValidate> */}\n    <TextField\n      variant=\"outlined\"\n      margin=\"normal\"\n      required\n      fullWidth\n      id=\"email\"\n      label=\"Email Address\"\n      name=\"email\"\n      className={((email.length=='')&& (emailClick=='True')) ? 'emptyfield' : ''}\n      autoComplete=\"email\"\n      autoFocus\n        inputProps={{\n            \"data-testid\": \"loginId\",\n        }}\n        // data-testid=\"loginId\"\n        value={email}\n        onChange={handleEmailChange}\n    />\n    <TextField\n      variant=\"outlined\"\n      margin=\"normal\"\n      required\n      fullWidth\n      name=\"password\"\n      label=\"Password\"\n      type=\"password\"\n      id=\"password\"\n      className={((password.length=='')&& (passwordClick=='True'))  ? 'emptyfield' : ''}\n      autoComplete=\"current-password\"\n      inputProps={{\n        \"data-testid\": \"password\",\n    }}\n        \n        value={password}\n        onChange={handlePasswordChange}\n    />\n    {/* <FormControlLabel\n      control={<Checkbox value=\"remember\" color=\"primary\" />}\n      label=\"Remember me\"\n    /> */}\n    <Button\n      type=\"submit\"\n      fullWidth\n      variant=\"contained\"\n      color=\"primary\"\n      className={classes.submit}\n      data-testid=\"loginButton\" \n      \n      onClick={handleLogin}\n    >\n      Sign In\n    </Button>\n    <Grid container>\n      <Grid item xs>\n        {/* <Link href=\"#\" variant=\"body2\">\n          Forgot password?\n        </Link> */}\n      </Grid>\n      <Grid item>\n        <Link href=\"#\" variant=\"body2\" \n        data-testid=\"registerButton\" \n        onClick={handleRegister}>\n          {\"Don't have an account? Sign Up\"}\n        </Link>\n      </Grid>\n    </Grid>\n    <input\n                    type=\"text\"\n                    data-testid=\"result\"\n                    value={result}\n                    hidden\n                    readOnly\n                />\n\n                <input\n                    type=\"text\"\n                    data-testid=\"registration\"\n                    value={registration}\n                    hidden\n                    readOnly\n                />\n                <label>\n                    {result}\n                </label>\n                \n  {/* </form> */}\n  {/* <input\n  type='text'\n  value={formatTimeStamp(1605553582964)}\n\n  /> */}\n\n\n</div>\n\n</Container>\n        );\n    }\n}\n};\n\n\n\nexport default LoginForm;","/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/forms/RegistrationForm.js",["180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200"],"import React, { useState, Text } from 'react';\nimport getRegistrationResponse from '../API/RegistrationAPI';\nimport LoginForm from './LoginForm';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\n\n\nconst RegistrationForm = () => {\n\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [middleName, SetMiddleName] = useState('');\n  const [organizationName, SetOrganizationName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [response, setresponse] = useState('');\n  const [firstNameClick,setFirstNameClick] = useState('False');\n  const [lastNameClick,setLastNameClick] = useState('False');\n  const [emailClick,setEmailClick] = useState('False');\n  const [passClick,setPassClick] = useState('False');\n  const [confPassClick,setConfPassClick] = useState('False');\n\n\n\n\n  const handleFirstNameChange = event => {\n    setFirstName(event.target.value);\n  };\n  const handleMiddleNameChange = event => {\n    SetMiddleName(event.target.value);\n  };\n  const handleLastNameChange = event => {\n    setLastName(event.target.value);\n  };\n  const handleOrganizationNameChange = event => {\n    SetOrganizationName(event.target.value);\n  };\n  const handleEmailChange = event => {\n    setEmail(event.target.value);\n  };\n  const handlePasswordChange = event => {\n    setPassword(event.target.value);\n  };\n  const handleConfirmPasswordChange = event => {\n    setConfirmPassword(event.target.value);\n\n  };\n\n  const useStyles = makeStyles((theme) => ({\n    paper: {\n      marginTop: theme.spacing(8),\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n    },\n    avatar: {\n      margin: theme.spacing(1),\n      backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n      width: '100%', // Fix IE 11 issue.\n      marginTop: theme.spacing(3),\n    },\n    submit: {\n      margin: theme.spacing(3, 0, 2),\n    },\n  }));\n\n  const classes = useStyles();\n\n  const handleLogin = event => {\n    setresponse('login');\n  };\n\n  const handleRegistration = () => {\n    setFirstNameClick('True');\n    setLastNameClick('True');\n    setEmailClick('True');\n    setPassClick('True');\n    setConfPassClick('True');\n    \n    if (password != confirmPassword) {\n      setresponse('Password Mismatch');\n      setPassword('');\n      setConfirmPassword('');\n    }\n    else {\n      var response = new Promise((resolve, reject) => {\n        resolve(getRegistrationResponse(email, password,firstName,lastName,organizationName));\n      }).then(value => {\n        setresponse(value);\n      });\n    }\n  }\n\n  const handleReset = () => {\n    setPassword('');\n\n  }\n  if (response == 'login') {\n    return (\n      <div>\n        <LoginForm />\n\n      </div>\n    );\n  }\n  else {\n    if (response == 'registered') {\n      return (\n        <div>\n          <LoginForm result={'Registration Successful! Kindly Login!'} />\n\n        </div>\n      );\n    }\n    else {\n      return (\n        <Container component=\"main\" maxWidth=\"xs\">\n          <CssBaseline />\n          <div className={classes.paper}>\n            <Avatar className={classes.avatar}>\n              <LockOutlinedIcon />\n            </Avatar>\n            <Typography component=\"h1\" variant=\"h5\">\n              Sign up\n        </Typography>\n            {/* <form className={classes.form} noValidate> */}\n            <Grid container spacing={2}>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  autoComplete=\"fname\"\n                  name=\"firstName\"\n                  variant=\"outlined\"\n                  required\n                  fullWidth\n                  id=\"firstName\"\n                  label=\"First Name\"\n                  className={((firstName.length=='')&& (firstNameClick=='True')) ? 'emptyfield' : ''}\n                  inputProps={{\n                    \"data-testid\": \"firstName\",\n                  }}\n                  value={firstName}\n                  onChange={handleFirstNameChange}\n                  autoFocus\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <TextField\n                  variant=\"outlined\"\n                  required\n                  fullWidth\n                  id=\"lastName\"\n                  label=\"Last Name\"\n                  name=\"lastName\"\n                  autoComplete=\"lname\"\n                  className={((lastName.length=='')&& (lastNameClick=='True')) ? 'emptyfield' : ''}\n                  inputProps={{\n                    \"data-testid\": \"lastName\",\n                  }}\n                  value={lastName}\n                  onChange={handleLastNameChange}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  variant=\"outlined\"\n                  \n                  fullWidth\n                  id=\"organization\"\n                  label=\"Organization Name\"\n                  name=\"organization\"\n                  autoComplete=\"organization\"\n                  inputProps={{\n                    \"data-testid\": \"organizationName\",\n                  }}\n                  value={organizationName}\n                  onChange={handleOrganizationNameChange}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  variant=\"outlined\"\n                  required\n                  fullWidth\n                  id=\"email\"\n                  label=\"Email Address\"\n                  name=\"email\"\n                  autoComplete=\"email\"\n                  className={((email.length=='')&& (emailClick=='True')) ? 'emptyfield' : ''}\n                  inputProps={{\n                    \"data-testid\": \"emailID\",\n                  }}\n                  value={email}\n                  onChange={handleEmailChange}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  variant=\"outlined\"\n                  required\n                  fullWidth\n                  name=\"password\"\n                  label=\"Password\"\n                  type=\"password\"\n                  className={((password.length=='')&& (passClick=='True')) ? 'emptyfield' : ''}\n                  id=\"password\"\n                  // autoComplete=\"current-password\"\n                  inputProps={{\n                    \"data-testid\": \"password\",\n                  }}\n                  value={password}\n                  onChange={handlePasswordChange}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  variant=\"outlined\"\n                  required\n                  fullWidth\n                  name=\"confirmpassword\"\n                  label=\"Confirm Password\"\n                  type=\"password\"\n                  className={((confirmPassword.length=='')&& (confPassClick=='True')) ? 'emptyfield' : ''}\n                  id=\"confirmpassword\"\n                  // autoComplete=\"current-password\"\n                  inputProps={{\n                    \"data-testid\": \"confirmPassword\",\n                  }}\n\n                  value={confirmPassword}\n                  onChange={handleConfirmPasswordChange}\n                />\n              </Grid>\n              {/* <Grid item xs={12}>\n              <FormControlLabel\n                control={<Checkbox value=\"allowExtraEmails\" color=\"primary\" />}\n                label=\"I want to receive inspiration, marketing promotions and updates via email.\"\n              />\n            </Grid> */}\n            </Grid>\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.submit}\n              data-testid=\"registerButton\" onClick={handleRegistration}>\n              Sign Up\n\n          </Button>\n            <Grid container justify=\"flex-end\">\n              <Grid item>\n                <Link href=\"#\" variant=\"body2\"\n                  data-testid=\"loginButton\" onClick={handleLogin}>\n                  Already have an account? Sign in\n              </Link>\n              </Grid>\n            </Grid>\n            <input type=\"text\"\n              data-testid=\"response\"\n              hidden\n              readOnly\n              value={response} />\n            <label>{response}</label>\n            {/* </form> */}\n          </div>\n        </Container>\n      );\n    }\n  }\n};\n\nexport default RegistrationForm;","/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/forms/CertificatePublicLinkForm.js",["201","202","203","204","205","206","207","208","209","210","211","212","213","214","215"],"import React, {useState, Text, useEffect} from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Link from '@material-ui/core/Link';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport LabelImportantIcon from '@material-ui/icons/LabelImportant';\nimport CardMembershipIcon from '@material-ui/icons/CardMembership';\nimport getAssertionDetailByIdResponse from '../API/AssertionDetailsByIdAPI';\nimport formatDate from '../scripts/functions';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n\n  useParams\n} from \"react-router-dom\";\nconst CertificateForm = () => {\n  // const [assertionId, setAssertionId] = useState(props.assertionId);\n  const [badgeName, setBadgeName] = useState('');\n  const [badgeRecipient, setBadgeRecipient] = useState('');\n  const [badgeDescription, setBadgeDescription] = useState('');\n  const [publicImage, setPublicImage]=useState('');\n  let { assertionId } = useParams();\n  const [badgeIssuedOn, setBadgeIssuedOn] = useState('');\n    const useStyles = makeStyles((theme) => ({\n      root: {\n        height: '100vh',\n      },\n      root1: {\n        maxWidth: 345,\n      },\n      media: {\n        height: '80vh',\n      },\n      mediasub: {\n        alignItems: 'center',\n        justifyContent: 'center',\n        height: '70%',\n        width:'70%',\n        marginLeft:80,\n      },\n      image: {\n        backgroundImage: 'url(image)',\n        backgroundRepeat: 'no-repeat',\n        backgroundColor:\n          theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[900],\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n      },\n      paper: {\n        margin: theme.spacing(8, 4),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n      },\n      paper1: {\n        margin: theme.spacing(5, 3),\n        display: 'inline',\n        // flexDirection: 'column',\n        textAlign: 'left',\n      },\n      avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.success.main,\n      },\n      form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(1),\n      },\n      submit: {\n        margin: theme.spacing(3, 0, 2),\n      },\n    }));\n\n    const handleviewAssertionById = async () => {\n\n      var response1 = new Promise((resolve, reject) => {\n          resolve(getAssertionDetailByIdResponse(assertionId));\n      }).then(value => {\n          if (value != undefined) {\n             \n              setBadgeName(value[0].badge_details[0].name);\n              setBadgeRecipient(value[0].user_details[0].email);\n              setBadgeDescription(value[0].badge_details[0].description);\n              setPublicImage(value[0].badge_details[0].icon);\n              if(value[0].issuedOn!=null)\n                  setBadgeIssuedOn(formatDate(value[0].issuedOn.$date));\n              \n          }\n\n\n      });\n\n  }\n    useEffect(() => {\n    \n      if(assertionId!=null)\n        handleviewAssertionById()\n    }, []);\n      const classes = useStyles();\n\n  \n    \n    \n        return (\n      \n          <Grid container component=\"main\" className={classes.root}>\n          <CssBaseline />\n          <Grid item xs={false} sm={4} md={5} className={classes.image} >\n            <div>\n            <Card className={classes.root}>\n      <CardActionArea>\n        <CardMedia\n          className={classes.media}\n          image=\"/static/images/white-background.jpg\"\n          title=\"Contemporary Background\"\n        >\n        <br></br>\n        <br></br>\n        <br></br>\n        <br></br>\n        <CardMedia \n          className={classes.mediasub} \n          id=\"publiclink_iconImage\"\n          data-testid=\"publiclink_iconImage\"\n          \n          image={publicImage}\n          title=\"Badge Icon\"\n        />\n          \n        </CardMedia>\n        <CardContent>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n          DXC Industrialized AI Badge Platform\n          </Typography>\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n            Experiment, Experience and Evolve your AI Skills.\n            <br/>\n           <a href=\"https://industrialized-ai-starter.azurewebsites.net/\">\n            https://industrialized-ai-starter.azurewebsites.net/\n            </a>\n          </Typography>\n        </CardContent>\n      </CardActionArea>\n   \n    </Card>\n            </div>\n            </Grid>\n          <Grid item xs={12} sm={8} md={7} component={Paper} elevation={6} square>\n            <div className={classes.paper}>\n              <Avatar className={classes.avatar}>\n                <CardMembershipIcon />\n              </Avatar>\n              <Typography component=\"h1\" variant=\"h5\">\n                Badge Issued\n              </Typography>\n              <br/>\n              \n              <form className={classes.form} noValidate>\n  \n                <TextField\n                  variant=\"outlined\"\n                  margin=\"normal\"\n            \n                  fullWidth\n                  id=\"email\"\n                  label=\"Recipient\"\n                  name=\"email\"\n                  \n                  value={badgeRecipient}\n                  inputProps={{\n                    \"data-testid\": \"pubiclink_recipient\",\n                  }}\n                />\n                <TextField\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  \n                  fullWidth\n                  name=\"Name\"\n                  label=\"Badge Name\"\n                  value={badgeName}\n                  inputProps={{\n                    \"data-testid\": \"pubiclink_name\",\n                  }}\n                  \n                />\n                <TextField\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  value={badgeDescription}\n                  fullWidth\n                  multiline\n                  name=\"Description\"\n                  label=\"Badge Description\"\n                  inputProps={{\n                    \"data-testid\": \"pubiclink_description\",\n                  }}\n                  \n                  \n                />\n\n            <TextField\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  \n                  fullWidth\n                  name=\"IssuedOn\"\n                  label=\"Issued On\"\n                  value={badgeIssuedOn}\n                  inputProps={{\n                    \"data-testid\": \"pubiclink_issuedOn\",\n                  }}\n                  \n                />\n\n<TextField\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  \n                  fullWidth\n                  name=\"Issuer\"\n                  label=\"Issuer\"\n                  value=\"DXC Technology\"\n                  \n                  inputProps={{\n                    \"data-testid\": \"pubiclink_issuedBy\",\n                  }}\n                />\n               \n              </form>\n            </div>\n          </Grid>\n        </Grid>\n        );\n    }\n\n\n\nexport default CertificateForm;","/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/forms/CreateBadgeForm.js",["216","217","218","219","220","221","222"],"// import React from 'react';\nimport React, { useState } from 'react';\nimport getCreateBadgeResponse from '../API/CreateBadgeAPI'\nimport RegistrationForm from './RegistrationForm';\n\nconst CreateBadgeForm = (props) => {\n\n    const [badgeName, setBadgeName] = useState('');\n    const [badgeDescription, setBadgeDescription] = useState('');\n    const [badgeLink, setBadgeLink] = useState('');\n    const [reviewer, setReviewer] = useState('');\n    const [evidence, setEvidence] = useState('True');\n    const [owner, setOwner] = useState('');\n    const [badgeIcon, setBadgeIcon] = useState('');\n    const [userRequestable, setUserRequestable] = useState('True');\n    const [badgeType, setBadgeType] = useState('Open Badge');\n\n    // const [mandatoryBadgeName, setMandatoryBadgeName] = useState('');\n\n    const [createBadgeResponse, setCreateBadgeResponse] = useState('');\n\n    const handleBadgeName = event => {\n        setBadgeName(event.target.value);\n\n    };\n\n    const handleBadgeDescription = event => {\n        setBadgeDescription(event.target.value);\n\n    };\n\n    const handleBadgeLink = event => {\n        setBadgeLink(event.target.value);\n\n    };\n\n    const handleReviewer = event => {\n        setReviewer(event.target.value);\n\n    };\n\n    const handleEvidence = event => {\n        setEvidence(event.target.value);\n\n    };\n\n    const handleOwner = event => {\n        setOwner(event.target.value);\n\n    };\n    const handleUserRequestable = event => {\n        setUserRequestable(event.target.value);\n\n    };\n    const handleBadgeType = event => {\n        setBadgeType(event.target.value);\n\n    };\n\n    const handleBadgeIcon = event => {\n        setBadgeIcon(event.target.files[0]);\n    }\n\n    const ImageThumb = ({ image }) => {\n        return <img src={URL.createObjectURL(image)} alt={image.name} />;\n      };\n\n    const handleCreateBadge = async () => {\n\n        if(badgeName==''||badgeDescription==''||badgeLink==''||owner==''||reviewer=='')\n        {\n            // if(badgeName=='')\n            // setMandatoryBadgeName('Enter badge name')\n            setCreateBadgeResponse('Please fill all mandatory fields');\n        }\n        else{\n        var response = new Promise((resolve, reject) => {\n            resolve(getCreateBadgeResponse(badgeName, badgeDescription, badgeLink, userRequestable, badgeType, owner, reviewer, badgeIcon.name ,evidence));\n        }).then(value => {\n            // setPassword('');\n            setCreateBadgeResponse(value);\n\n\n        }\n        );\n            }\n\n    }\n\n\n\n    return (\n        <div>\n            <br></br>\n            <div>\n                <label> Badge Name *</label> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                <input type=\"text\"\n                    data-testid=\"badgeName\"\n                    value={badgeName}\n                    onChange={handleBadgeName}\n                />\n               {/* <label>{mandatoryBadgeName}</label> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; */}\n            </div>\n            <br></br>\n            <div>\n                <label> Badge Description *</label> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                <input type=\"text\"\n                    data-testid=\"badgeDescription\"\n                    value={badgeDescription}\n                    onChange={handleBadgeDescription}\n                />\n                \n            </div>\n\n            <br></br>\n            <div>\n                <label> Badge Link *</label> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                <input type=\"text\"\n                    data-testid=\"badgeLink\"\n                    value={badgeLink}\n                    onChange={handleBadgeLink}\n                />\n\n            </div>\n\n            <br></br>\n            <div>\n                <label> User Requestable</label> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                <select\n                    data-testid=\"userRequestable\"\n                    value={userRequestable}\n                    onChange={handleUserRequestable}>\n                        <option value='True'>\n                            True\n                        </option>\n                        <option value='False'>\n                            False\n                        </option>\n                </select>\n\n            </div>\n\n            <br></br>\n            <div>\n                <label> Badge Type</label> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                <select\n                    data-testid=\"badgeType\"\n                    value={badgeType}                    \n                    onChange={handleBadgeType}>\n                         <option value='Open Badge'>\n                    Open Badge\n                </option>\n                <option value='Community Badge'>\n                    Community Badge\n                </option>\n                    </select>                   \n            </div>\n\n            <br></br>\n            <div>\n                <label> Evidence *</label> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;              \n                <select\n                     data-testid=\"evidence\"\n                     value={evidence}\n                     onChange={handleEvidence}>\n                        <option value='True'>\n                            True\n                        </option>\n                        <option value='False'>\n                            False\n                        </option>\n                </select>\n            </div>\n\n            <br></br>\n            <div>\n                <label> Owner *</label> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                <input type=\"text\"\n                    data-testid=\"owner\"\n                    value={owner}\n                    onChange={handleOwner}\n                />\n\n            </div>\n\n            <br></br>\n            <div>\n                <label> Reviewer *</label> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                <input type=\"text\"\n                    data-testid=\"reviewer\"\n                    value={reviewer}\n                    onChange={handleReviewer}\n                />\n            </div>\n\n           \n\n            <br></br>\n            <div id=\"upload-box\">\n                <input type=\"file\"\n                    onChange={handleBadgeIcon}\n                    data-testid=\"badgeIcon\"\n                />\n            <br></br><br></br>\n            {badgeIcon && <ImageThumb image={badgeIcon} />}\n            </div>\n\n            <br></br>\n            <button data-testid=\"createBadgeButton\" onClick={handleCreateBadge}  >\n                Create Badge\n            </button>\n            <br></br>\n\n            <input\n                type=\"text\"\n                data-testid=\"createBadgeResponse\"\n                value={createBadgeResponse}\n                hidden\n                readOnly\n            />\n\n            <label>\n                {createBadgeResponse}\n            </label>\n\n        </div>\n    );\n\n};\n\n\n\nexport default CreateBadgeForm;","/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/forms/LandingForm.js",["223","224","225","226","227","228","229","230","231","232","233","234","235","236","237"],"import React, { useDebugValue, useState, useEffect} from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Drawer from '@material-ui/core/Drawer';\nimport Box from '@material-ui/core/Box';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport Badge from '@material-ui/core/Badge';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Link from '@material-ui/core/Link';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport DashboardIcon from '@material-ui/icons/Dashboard';\n//import ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\nimport FaceIcon from '@material-ui/icons/Face';\nimport AddToPhotosIcon from '@material-ui/icons/AddToPhotos';\nimport LocalMallIcon from '@material-ui/icons/LocalMall'\nimport PeopleIcon from '@material-ui/icons/People';\nimport BarChartIcon from '@material-ui/icons/BarChart';\nimport LayersIcon from '@material-ui/icons/Layers';\nimport AssignmentIcon from '@material-ui/icons/Assignment';\nimport CreateBadgeForm from './CreateBadgeForm';\nimport logo from '../assets/Tables-charts-graphs.mp4';\nimport ViewBadgeForm from './ViewBadgeForm';\nimport ViewAssertionsForm from './ViewAssertionsForm';\nimport ViewUsersForm from './ViewUsersForm';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport MyBackpackForm from './MyBackpackForm';\nimport UserDetailByEmailResponse from '../API/UserDetailsByEmailAPI';\nimport ReactPlayer from 'react-player';\n\nconst LandingForm = (props)=>\n{\n    const [clickedItem,setClickedItem] = useState('');\n    const windowWidth = window.screen.width;\n    const drawerWidth = 220;\n    const [userType,setUserType] = useState(props.userType);\n    const [email,setEmail] = useState(props.email);\n    const [userID,setuserID] = useState('');\n\n    const handleCreateBadgeButtonClick =()=>{\n        setClickedItem('CreateBadgeForm');\n    }\n\n    const handleDashboardButtonClick =()=>{\n        setClickedItem('');\n    }\n\n    const handleMyBackpackButtonClick =() =>\n    {\n      setClickedItem('MyBackpackForm');\n    }\n\n    const handleViewbadgeButtonClick =()=>{\n      setClickedItem('ViewBadgeForm');\n    }\n\n    const handleViewAssertionsButtonClick =()=> {\n      setClickedItem('ViewAssertionsForm');\n    }\n\n    const handleViewUsersButtonClick =()=> {\n      setClickedItem('ViewUsersForm');\n    }\n\n    const useStylesBootstrap = makeStyles((theme) => ({\n      arrow: {\n        color: theme.palette.common.black,\n      },\n      tooltip: {\n        backgroundColor: theme.palette.common.black,\n      },\n    }));\n\n    function BootstrapTooltip(props) {\n      const classes = useStylesBootstrap();\n    \n      return <Tooltip arrow classes={classes} {...props} />;\n    }\n\n    const mainListItems = (\n        <div>\n          <ListItem button data-testid=\"LandingForm_DashboardButton\" onClick={handleDashboardButtonClick}>\n            <ListItemIcon>\n            <BootstrapTooltip title =\"Dashboard\"><DashboardIcon /></BootstrapTooltip>\n            </ListItemIcon>\n            <ListItemText primary=\"Dashboard\" />\n          </ListItem>\n          <ListItem button data-testid=\"LandingForm_viewMyBackpackButton\" onClick={handleMyBackpackButtonClick}>\n            <ListItemIcon>\n            <BootstrapTooltip title =\"My Backpack\"><LocalMallIcon /></BootstrapTooltip>\n            </ListItemIcon>\n            <ListItemText primary=\"My Backpack\" />\n          </ListItem>\n          <ListItem button data-testid=\"LandingForm_viewBadgeButton\" onClick={handleViewbadgeButtonClick}>\n            <ListItemIcon>\n            <BootstrapTooltip title =\"Badges\"><PeopleIcon /></BootstrapTooltip>\n            </ListItemIcon>\n            <ListItemText primary=\"Badges\" />\n          </ListItem>\n          <ListItem button component=\"a\" href=\"mailto:panoply@dxc.com\">\n            <ListItemIcon>\n            <BootstrapTooltip title =\"Support\"><BarChartIcon /></BootstrapTooltip>\n            </ListItemIcon>\n            <ListItemText primary=\"Support\"/>\n          </ListItem>\n          <ListItem button>\n            <ListItemIcon>\n            <BootstrapTooltip title =\"FAQ\"><LayersIcon /></BootstrapTooltip>\n            </ListItemIcon>\n            <ListItemText primary=\"FAQ\" />\n          </ListItem>\n        </div>\n      );\n\n      const secondaryListItems = (\n        <div data-testid=\"adminSection\">\n          <ListSubheader inset>Administration Tasks</ListSubheader>\n          \n          <ListItem button data-testid=\"LandingForm_createBadgeButton\" onClick={handleCreateBadgeButtonClick}>\n            <ListItemIcon>\n            <BootstrapTooltip title =\"Create Badge\"><AddToPhotosIcon /></BootstrapTooltip>\n            </ListItemIcon>\n            <ListItemText primary=\"Create Badge\" />\n          </ListItem>\n          <ListItem button data-testid=\"LandingForm_viewAssertionsButton\" onClick={handleViewAssertionsButtonClick}>\n            <ListItemIcon>\n            <BootstrapTooltip title =\"Assertions\"><AssignmentIcon /></BootstrapTooltip>\n            </ListItemIcon>\n            <ListItemText primary=\"Assertions\" />\n          </ListItem>\n          <ListItem button data-testid=\"LandingForm_viewUsersButton\" onClick={handleViewUsersButtonClick}>\n            <ListItemIcon>\n            <BootstrapTooltip title =\"User Management\"><FaceIcon /></BootstrapTooltip>\n            </ListItemIcon>\n            <ListItemText primary=\"User Management\" />\n          </ListItem>\n        </div>\n      );\n\n      const reviewerListItems = (\n        <div data-testid=\"reviewerSection\">\n          <ListSubheader inset>Reviewer Tasks</ListSubheader>\n          <ListItem button data-testid=\"LandingForm_reviewerAssertionsButton\" onClick={handleViewAssertionsButtonClick}>\n            <ListItemIcon>\n            <BootstrapTooltip title =\"Assertions\"><AssignmentIcon /></BootstrapTooltip>\n            </ListItemIcon>\n            <ListItemText primary=\"Assertions\" />\n          </ListItem>\n      \n        </div>\n      );\n\n\n   \nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  toolbar: {\n    paddingRight: 24, // keep right padding when drawer closed\n  },\n  toolbarIcon: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    padding: '0 8px',\n    ...theme.mixins.toolbar,\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: 36,\n  },\n  menuButtonHidden: {\n    display: 'none',\n  },\n  title: {\n    flexGrow: 1,\n  },\n  drawerPaper: {\n    position: 'relative',\n    whiteSpace: 'nowrap',\n    width: drawerWidth,\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawerPaperClose: {\n    overflowX: 'hidden',\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    width: theme.spacing(7),\n    [theme.breakpoints.up('sm')]: {\n      width: theme.spacing(9),\n    },\n  },\n  appBarSpacer: theme.mixins.toolbar,\n  content: {\n    flexGrow: 1,\n    height: '100vh',\n    overflow: 'auto',\n  },\n  container: {\n    paddingTop: theme.spacing(4),\n    paddingBottom: theme.spacing(4),\n    // paddingLeft: theme.spacing(1),\n  },\n  paper: {\n    padding: theme.spacing(2),\n    display: 'flex',\n    overflow: 'auto',\n    flexDirection: 'column',\n  },\n  fixedHeight: {\n    height: 'auto',\n    width: `calc(${windowWidth}px - ${drawerWidth}px - ${45}px)`,\n  },\n  images:{\n    height:510,\n    width: 755\n  },\n}));\n\nconst classes = useStyles();\n  const [open, setOpen] = React.useState(true);\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\n\n  \n  const handleviewUserByEmail = async () => {\n        \n    var response1 = new Promise((resolve, reject) => {\n        resolve(UserDetailByEmailResponse(email));\n    }).then(value => {\n        if (value != undefined) {\n            setuserID(value[0]._id.$oid);\n\n        }\n\n    });\n\n}\n\n  useEffect(() => {\n    handleviewUserByEmail();\n}, []);\n\n\n\n\n    return (\n\n        \n        <div>\n        <div className={classes.root}>\n      <CssBaseline />\n      <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\n        <Toolbar className={classes.toolbar}>\n          <IconButton\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\n          DXC Industrialized AI Badge Platform\n          </Typography>\n          <IconButton color=\"inherit\">\n            <Badge badgeContent={4} color=\"secondary\">\n              <NotificationsIcon />\n            </Badge>\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        variant=\"permanent\"\n        classes={{\n          paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\n        }}\n        open={open}\n      >\n        <div className={classes.toolbarIcon}>\n          <IconButton onClick={handleDrawerClose}>\n            <ChevronLeftIcon />\n          </IconButton>\n        </div>\n        <Divider />\n        <List>{mainListItems}</List>\n        <Divider />\n        {userType=='5f760d4325c1036d4d466560'?<List>{secondaryListItems}</List>:userType=='5fc5567fcd831cc0c83774b8'?<List>{reviewerListItems}</List>:<List></List>}        \n      </Drawer>\n      <main className={classes.content}>\n        <div className={classes.appBarSpacer} />\n        <Container maxWidth=\"lg\" className={classes.container}>\n          <Grid container spacing={3}>\n            {/* Chart */}\n            <Grid item xs={12} md={8} lg={9}>\n              <Paper className={fixedHeightPaper}>\n               {clickedItem=='ViewUsersForm'?(<ViewUsersForm userID={userID}/>):\n               (clickedItem=='ViewAssertionsForm'?(<ViewAssertionsForm email={email} userType={userType} userID={userID}/>):\n               (clickedItem=='ViewBadgeForm'?(<ViewBadgeForm userType={userType} userID={userID}/>):\n               (clickedItem=='CreateBadgeForm'? (<CreateBadgeForm />):\n               (clickedItem=='MyBackpackForm'? (<MyBackpackForm userID={userID}/>):\n               (<div>\n                 <ReactPlayer url={logo} data-testid=\"DashboardForm_Logo\" playing loop />\n                 {/* <video preload='auto' autoplay muted data-testid='DashboardForm_Logo' className={classes.images}>\n                   <source src={logo} type=\"video/mp4\"></source>\n                   </video> */}\n                 </div>)))))}\n              </Paper>\n            </Grid>\n          \n            </Grid>\n         \n        </Container>\n      </main>\n    </div>\n            <input\n            data-testid = \"landingID\"\n            value = {email}\n            hidden>\n            </input>\n        </div>\n    );\n};\n\nexport default LandingForm;","/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/API/LoginAPI.js",[],"/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/API/CreateBadgeAPI.js",[],"/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/API/AssertionDetailsByIdAPI.js",[],"/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/API/RegistrationAPI.js",["238"],"const getRegistrationResponse = async(username, password,firstName,lastName,organization) => {\n    //GET request\n    var url = process.env.REACT_APP_APILINK+'/register?email=' + username + '&password=' + password+'&userType=regular'+'&firstName='+firstName+'&secondName='+lastName+'&organizationName='+organization;\n    return await fetch(url, {\n            method: 'GET',\n            //Request Type\n        })\n        .then((response) => response.text())\n        //If response is in json then in success\n        .then((responseText) => {\n            //Success\n            // alert(JSON.stringify(responseJson));\n            console.log(responseText);\n            return responseText;\n        })\n        //If response is not in json then in error\n        .catch((error) => {\n            //Error\n            // alert(JSON.stringify(error));\n            console.error(error);\n            return error;\n        });\n}\n\nexport default getRegistrationResponse;","/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/scripts/functions.js",[],"/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/API/UserDetailsByEmailAPI.js",[],"/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/forms/MyBackpackForm.js",["239","240","241","242","243","244","245","246"],"import React,{useEffect, useState} from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\nimport CameraIcon from '@material-ui/icons/PhotoCamera';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Grid from '@material-ui/core/Grid';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Link from '@material-ui/core/Link';\nimport getMyBackpackResponse from '../API/MyBackpackAPI';\nimport MyBackpackDetailsForm from './MyBackpackDetailsForm';\n\nconst MyBackpackForm = (props) => {\n\n\nconst [response, setresponse] = useState('0');\nconst [userID,setuserID] = useState(props.userID);\nconst [mybackpackDetailsClick, setMybackpackDetailsClick] = useState('false');\nconst [clickedAssertion, setClickedAssertion] = useState('');\n\nfunction createData(i, id, badgeName, badgeIcon) {\n  return {i, id, badgeName, badgeIcon };\n}\n\nconst [rows, setrows] = useState([]);\n\nconst handleMybackpackAssertionButton = event => {\n  setMybackpackDetailsClick('true');\n  setClickedAssertion(event.currentTarget.value);\n  //alert(event.currentTarget.value);\n}\n\nconst useStyles = makeStyles((theme) => ({\n  icon: {\n    marginRight: theme.spacing(2),\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6),\n  },\n  heroButtons: {\n    marginTop: theme.spacing(4),\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8),\n  },\n  card: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  cardMedia: {\n    paddingTop: '56.25%', // 16:9\n    width: '60%',\n    height: '60%',   \n    marginLeft:'20%' ,\n  },\n  cardContent: {\n    flexGrow: 1,\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6),\n  },\n}));\n\n      \n  const handleviewBackpackAssertions = async () => {\n\n    var response1 = new Promise((resolve, reject) => {\n      resolve(getMyBackpackResponse(userID));\n    }).then(value => {\n      if (value != undefined) {\n        setresponse(value.length);\n        // alert(value);\n        const temp_rows = []\n        for (var i = 0; i < value.length; i++) {\n          temp_rows.push(createData(i, value[i]._id.$oid, value[i].badge_name[0].name,value[i].badge_name[0].icon));\n\n        }\n\n        setrows(temp_rows);\n      }\n    });\n  }\n\n \n      useEffect(() => {\n        handleviewBackpackAssertions()\n    }, []);\n      \n      const cards = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\n      const classes = useStyles();\n\nif (mybackpackDetailsClick == 'true') { return (<div><MyBackpackDetailsForm assertionId={clickedAssertion} /></div>); }\nelse {\n  return (\n    \n    <div>\n      <input data-testid='viewMyBackpack_RowCount' hidden value={response} />\n        <input data-testid='viewMyBackpack_badgeName' hidden value={response} />\n        <React.Fragment>\n      <CssBaseline />\n      <AppBar position=\"relative\">\n        <Toolbar>\n          {/* <CameraIcon className={classes.icon} /> */}\n          <Typography variant=\"h6\" color=\"inherit\" noWrap>\n            Backpack\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <main>\n        \n        <Container className={classes.cardGrid} maxWidth=\"md\">\n          \n          <Grid container spacing={4}>\n            {rows.map((row) => (\n              <Grid item key={row.i} xs={12} sm={6} md={4}>\n                <Card className={classes.card}>\n                  <CardMedia\n                    className={classes.cardMedia}\n                    image= {row.badgeIcon}     \n                    data-testid={'viewMyBackpack_Icon'+row.i}                  \n                  />\n                  <CardContent className={classes.cardContent}>\n                                       \n                    {/* <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                     {row.badgeName}\n                    </Typography> */}\n                    <Typography>\n                      <div data-testid={'viewMyBackpack_BadgeName'+row.i} key={row.i} >\n                      {row.badgeName.toUpperCase()}\n                      </div>\n                    </Typography>\n                  </CardContent>\n                   <CardActions>\n                    <Button size=\"small\" color=\"primary\"                      \n                      data-testid={'viewMybackpack_assertionsButton'+row.i}\n                      value={row.id}\n                      onClick={handleMybackpackAssertionButton}>\n                        View\n                    </Button>\n                    {/* <Button size=\"small\" color=\"primary\">\n                      Edit\n                    </Button> */}\n                  </CardActions> \n                </Card>\n              </Grid>\n            ))}\n          </Grid>\n        </Container>\n      </main>\n   \n    </React.Fragment>\n    </div>\n  );\n                  }\n};\n\nexport default MyBackpackForm;","/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/forms/ViewUsersForm.js",["247","248","249","250","251","252","253","254","255","256"],"import React, { useState, Text, useEffect } from 'react';\nimport ViewUsersResponse from '../API/ViewUsersAPI';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { makeStyles } from '@material-ui/core/styles';\nimport EditSharpIcon from '@material-ui/icons/EditSharp';\nimport formatDate from '../scripts/functions';\nimport Hidden from '@material-ui/core/Hidden';\nimport IconButton from '@material-ui/core/IconButton';\nimport AssertionDetailsForm from './AssertionDetailsForm';\nimport UserDetailByEmailResponse from '../API/UserDetailsByEmailAPI';\nimport UserDetailsForm from './UserDetailsForm';\nimport AddUserForm from './AddUserForm';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\n\nconst ViewUsersForm = (props) => {\n\n\n  const [response, setresponse] = useState('0');\n  const [userDetailClick, setUserDetailClick] = useState('false');\n  const [clickedUser, setClickedUser] = useState('');\n  const [addUserButtonClick, setAddUserButtonClick] = useState('false');\n  const [userID, setUserID]=useState(props.userID)\n\n  function createData(id, mongoId, email, userType, userStatus, createdDate, lastModified, firstName, lastName, middleName, organizationName) {\n    return { id, mongoId, email, userType, userStatus, createdDate, lastModified, firstName, lastName, middleName, organizationName};\n  }\n\n  const [rows, setrows] = useState([]);\n  // //   const [passwordClick,setPasswordClick] = useState('False');\n\n  const handleUserDetails = event => {\n    setUserDetailClick('true');\n    setClickedUser(event.currentTarget.value);\n  }\n\n  const useStyles = makeStyles((theme) => ({\n    seeMore: {\n      marginTop: theme.spacing(3),\n    },\n  }));\n\n\n  const classes = useStyles();\n\n  const handleAddUserButton = () =>{\n    setAddUserButtonClick('true');\n  }\n\n\n  const handleviewUsers = async () => {\n\n    var response1 = new Promise((resolve, reject) => {\n      resolve(ViewUsersResponse());\n    }).then(value => {\n      if (value != undefined) {\n        setresponse(value.length);\n        const temp_rows = []\n        for (var i = 0; i < value.length; i++) {\n          temp_rows.push(createData(i, value[i]._id.$oid, value[i].email, value[i].user_type_details[0].type, value[i].user_status_details[0].userStatus, value[i].created.$date, value[i].modified.$date, value[i].firstName, value[i].secondName, value[i].middleName, value[i].organizationName));\n        }\n\n        setrows(temp_rows);\n      }\n    });\n  }\n\n\n\n\n  useEffect(() => {\n    handleviewUsers()\n  }, []);\n\nif (addUserButtonClick =='true') { return (<div><AddUserForm/></div>);}\nelse{\n  if (userDetailClick == 'true') { return (<div><UserDetailsForm email={clickedUser} userID={userID}/></div>); }\n  else {\n\n    return (\n      <div>\n        \n        \n        <input data-testid='viewUsers_RowCount' hidden value={response} />\n\n        <React.Fragment>\n                <Box mx=\"auto\" ml={6} className={classes.root}>\n                <Button\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n                className={classes.button}\n                startIcon={<PersonAddIcon/>}\n                data-testid=\"viewUsers_addUserButton\"\n                onClick={handleAddUserButton}\n                >\n                Add New User\n                </Button>\n                </Box>\n\n\n                <br></br>\n          <Table size=\"small\">\n            <TableHead>\n              <TableRow>\n                <TableCell></TableCell>\n                <TableCell data-testid='viewUsers_email'>Email</TableCell>\n                <TableCell>User Type</TableCell>\n                <TableCell>User Status</TableCell>\n                <TableCell>Created</TableCell>\n                <TableCell>Last Modified</TableCell>\n                <TableCell>First Name</TableCell>\n                <TableCell>Middle Name</TableCell>\n                <TableCell>Last Name</TableCell>\n                <TableCell>Organization Name</TableCell>\n                <TableCell align=\"right\">Options</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {rows.map((row) => (\n                <TableRow data-testid={'viewUsers_RowID' + row.id} key={row.id} >\n\n                  <TableCell></TableCell>\n\n                  <TableCell>{row.email}</TableCell>\n                  <TableCell >{row.userType}</TableCell>\n                  <TableCell>{row.userStatus}</TableCell>\n                  <TableCell>{formatDate(row.createdDate)}</TableCell>\n                  <TableCell>{formatDate(row.lastModified)}</TableCell>\n                  <TableCell>{row.firstName}</TableCell>\n                  <TableCell >{row.middleName}</TableCell>\n                  <TableCell>{row.lastName}</TableCell>\n                  <TableCell>{row.organizationName}</TableCell>\n                  \n                  <TableCell align=\"right\">\n                    <IconButton data-testid={'viewUsers_editUserButton' + row.id} value={row.email} onClick={handleUserDetails}>\n                      <EditSharpIcon />\n                    </IconButton>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </React.Fragment>\n      </div >\n\n    );\n }\n}\n};\n\nexport default ViewUsersForm;","/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/forms/ViewAssertionsForm.js",["257","258","259","260","261","262","263","264","265","266"],"import React, { useState, Text, useEffect } from 'react';\nimport getViewAssertionsResponse from '../API/ViewAssertionsAPI';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { makeStyles } from '@material-ui/core/styles';\nimport EditSharpIcon from '@material-ui/icons/EditSharp';\nimport formatDate from '../scripts/functions';\nimport Hidden from '@material-ui/core/Hidden';\nimport IconButton from '@material-ui/core/IconButton'\nimport AssertionDetailsForm from './AssertionDetailsForm';\n\nconst ViewAssertionsForm = (props) => {\n\n\n  const [response, setresponse] = useState('0');\n  const [assertionDetailClick, setAssertionDetailClick] = useState('false');\n  const [clickedAssertion, setClickedAssertion] = useState('0');\n  const [email , setEmail] = useState(props.email);\n  const [userType,setUserType]=useState(props.userType);\n  const [userID,setUserID]=useState(props.userID);\n\n  function createData(id, mongoId, user, badgeName, issuedOn, status) {\n    return { id, mongoId, user, badgeName, issuedOn, status };\n  }\n\n  const [rows, setrows] = useState([]);\n  // //   const [passwordClick,setPasswordClick] = useState('False');\n\n  const handleAssertionDetails = event => {\n    setAssertionDetailClick('true');\n    setClickedAssertion(event.currentTarget.value);\n\n    //\n  }\n\n  const useStyles = makeStyles((theme) => ({\n    seeMore: {\n      marginTop: theme.spacing(3),\n    },\n  }));\n\n\n  const classes = useStyles();\n\n\n  const handleviewAssertions = async () => {\n\n    var response1 = new Promise((resolve, reject) => {\n      resolve(getViewAssertionsResponse());\n    }).then(value => {\n      if (value != undefined) {\n        setresponse(value.length);\n        const temp_rows = []\n        for (var i = 0; i < value.length; i++) {\n          temp_rows.push(createData(i, value[i]._id.$oid, value[i].user_email_address[0].email, value[i].badge_name[0].name, value[i].issuedOn.$date, value[i].badge_status[0].badgeStatus));\n\n        }\n\n        setrows(temp_rows);\n      }\n    });\n  }\n\n\n\n\n  useEffect(() => {\n    handleviewAssertions()\n  }, []);\n\n  if (assertionDetailClick == 'true') { return (<div><AssertionDetailsForm assertionId={clickedAssertion} email ={email} userType={userType} userID={userID} /></div>); }\n  else {\n\n    return (\n      <div>\n        <input data-testid='viewAssertions_RowCount' hidden value={response} />\n\n        <React.Fragment>\n          {/* <Title>Recent Orders</Title> */}\n          <Table size=\"small\">\n            <TableHead>\n              <TableRow>\n                <TableCell></TableCell>\n                <TableCell data-testid='viewAssertions_badgeName'>User</TableCell>\n                <TableCell>Badge</TableCell>\n                <TableCell>Issued On</TableCell>\n                <TableCell>Status</TableCell>\n                <TableCell align=\"right\">Options</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {rows.map((row) => (\n                <TableRow data-testid={'viewAssertions_RowID' + row.id} key={row.id} >\n\n                  <TableCell></TableCell>\n\n                  {/* <TableCell display=\"none\" >{row.mongoId}</TableCell> */}\n\n                  <TableCell>{row.user}</TableCell>\n                  <TableCell >{row.badgeName}</TableCell>\n\n                  <TableCell>{formatDate(row.issuedOn)}</TableCell>\n                  <TableCell>{row.status}</TableCell>\n                  {/* <TableCell align=\"right\"><EditSharpIcon id=\"viewAssertions_MongoID\" value={row.mongoId} /></TableCell> */}\n                  <TableCell align=\"right\">\n                    <IconButton data-testid={'viewAssertions_editAssertionButton' + row.id} value={row.mongoId} onClick={handleAssertionDetails}>\n                      <EditSharpIcon />\n                    </IconButton>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </React.Fragment>\n      </div >\n\n    );\n  }\n};\n\nexport default ViewAssertionsForm;","/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/forms/ViewBadgeForm.js",["267","268","269","270","271","272","273","274","275","276","277","278"],"import React, { useState, Text, useEffect } from 'react';\nimport getViewBadgeResponse from '../API/ViewBadgeAPI';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { makeStyles } from '@material-ui/core/styles';\nimport EditSharpIcon from '@material-ui/icons/EditSharp';\nimport PageviewIcon from '@material-ui/icons/Pageview';\nimport BadgeDetailsForm from './BadgeDetailsForm';\nimport IconButton from '@material-ui/core/IconButton'\n\n\n\nconst ViewBadgeForm = (props) => {\n\n\n  const [response, setresponse] = useState('0');\n  const [userType, setUserType] = useState(props.userType);\n  const [userID, setUserID ]= useState(props.userID);\n  const [badgeDetailsClick, setBadgeDetailsClick] = useState('false');\n  const [clickedBadge, setClickedBadge]=useState('');\n\n  function createData(id, mongoID, name, description, count, lastIssued, icon ) {\n    return { id, mongoID, name, description, count, lastIssued, icon};\n  }\n\n  const [rows, setrows] = useState([]);\n  const [passwordClick,setPasswordClick] = useState('False');\n\n\n  const handleBadgeDetails=event=>{\n    setBadgeDetailsClick('true');\n    setClickedBadge(event.currentTarget.value);\n\n    //\n  }\n\n\n  const useStyles = makeStyles((theme) => ({\n    seeMore: {\n      marginTop: theme.spacing(3),\n    },\n  }));\n\n\n  const classes = useStyles();\n\n\n  const handleviewBadge = async () => {\n\n    var response1 = new Promise((resolve, reject) => {\n      resolve(getViewBadgeResponse());\n    }).then(value => {\n      if (value != undefined)\n      {\n        setresponse(value.length);\n        // console.log(response);\n         \n          const temp_rows = []\n          for (var i = 0; i < value.length; i++) {\n            temp_rows.push(createData(i,value[i]._id.$oid,value[i].name,value[i].description,value[i].lastIssued,value[i].count, value[i].icon));              \n          }\n          setrows (temp_rows);\n      }\n\n    \n    });\n\n  }\n\n\n\n  useEffect(() => {\n    handleviewBadge()\n  }, []);\n\nif(badgeDetailsClick=='true'){ return (<div><BadgeDetailsForm userType={userType} badgeName={clickedBadge} userID={userID}/></div>);}\nelse\n{\n  \n  return (\n    \n    <div>\n      <input data-testid='viewBadge_RowCount' hidden value={response} />\n\n      <React.Fragment>\n        {/* <Title>Recent Orders</Title> */}\n        <Table size=\"small\">\n          <TableHead>\n            <TableRow>\n              <TableCell></TableCell>\n              <TableCell data-testid='viewBadge_badgeName'>Badge Name</TableCell>\n              <TableCell>Description</TableCell>\n              <TableCell>Last Issued</TableCell>\n              <TableCell>Count</TableCell>\n              <TableCell align=\"right\">Options</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.map((row) => (\n              <TableRow data-testid={'viewBadge_BadgeID'+row.id} key={row.id} >\n                {/* <TableCell >{row.mongoID}</TableCell> */}\n                <TableCell><img src={row.icon} width=\"100\"/></TableCell>\n                <TableCell>{row.name}</TableCell>\n                <TableCell >{row.description}</TableCell>\n                <TableCell>{row.lastIssued}</TableCell>\n                <TableCell >{row.count}</TableCell>\n                {userType=='5f760d4325c1036d4d466560'?\n                <TableCell align=\"right\">\n                <IconButton data-testId={'viewBadge_editBadgeButton'+row.id} value={row.name} onClick={handleBadgeDetails}>\n                <EditSharpIcon/>\n                </IconButton>\n                </TableCell>\n                :\n                <TableCell align=\"right\">\n                <IconButton data-testId={'viewBadge_viewBadgeButton'+row.id} value={row.name} onClick={handleBadgeDetails}>\n                <PageviewIcon/>\n                </IconButton>\n                </TableCell>}\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        {/* <div className={classes.seeMore}>\n          <Link color=\"primary\" href=\"#\" onClick={preventDefault}>\n            See more orders\n        </Link>\n        </div> */}\n      </React.Fragment>\n    </div>\n\n  );\n      }\n};\n\nexport default ViewBadgeForm;","/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/forms/MyBackpackDetailsForm.js",["279","280","281","282","283","284","285","286","287"],"import React, {useState, Text, useEffect} from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport getAssertionDetailByIdResponse from '../API/AssertionDetailsByIdAPI'\nimport formatDate from '../scripts/functions';\nimport CardMembershipOutlinedIcon from '@material-ui/icons/CardMembershipOutlined';\nimport MyBackpackForm from './MyBackpackForm';\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\nimport getLinkedInResponse from '../API/AddLinkedInCertificateAPI';\nimport LaunchIcon from '@material-ui/icons/Launch';\n\nconst MyBackpackDetailsForm = (props) => {\n\n    const [assertionId, setAssertionId] = useState(props.assertionId);\n    const [badgeName, setBadgeName] = useState('');\n    const [badgeRecipient, setBadgeRecipient] = useState('');\n    const [modifiedDate, setModifiedDate] = useState('');\n    const [badgeStatus, setBadgeStatus] = useState('');\n    const [evidencelink, setEvidencelink] = useState('');\n    const [badgeReviewer, setBadgeReviewer] = useState('');\n    const [badgeComments, setBadgeComments] = useState('');\n    const [badgeIssuedOn, setBadgeIssuedOn] = useState('');\n    const [publicLink, setPublicLink] = useState('');\n    const [badgeIcon, setBadgeIcon] = useState('');\n    // const [saveFlag, setSaveFlag] = useState('False');\n    // const [result, setResult] = useState('');\n    const [backButtonClicked,setBackButtonClicked] = useState('False');\n    //const [email,setEmail] = useState('');\n    const [userID,setuserID] = useState('');\n\n\n    const useStyles = makeStyles((theme) => ({\n        paper: {\n            marginTop: theme.spacing(8),\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n        },\n        avatar: {\n            // margin: theme.spacing(1),\n       \n            backgroundColor: theme.palette.secondary.main,\n        },\n        \n        avatar_additional: {\n          \n          \n            backgroundColor: theme.palette.info.main,\n        },\n        root: {\n            display: 'flex',\n            '& > *': {\n              margin: theme.spacing(1),\n            },\n          },\n         \n        form: {\n            width: '100%',\n            marginTop: theme.spacing(3),\n        },\n        submit: {\n            margin: theme.spacing(3, 0, 2),\n        },\n        innerText :{\n            width :'90%',\n        },\n        innerLogo :{\n            width :'10%',\n        },\n    }));\n\n\n    const classes = useStyles();\n\n     \n    const handleLinkedIn = async () => {\n\n        var response1 = new Promise((resolve, reject) => {\n            const dt=new Date(badgeIssuedOn);\n       \n            resolve(getLinkedInResponse(badgeName,dt.getMonth()+1,dt.getFullYear(),publicLink));\n        }).then(value => {\n            if (value != undefined) {\n                \n            }\n\n\n        });\n\n    }\n\n    const handleviewAssertionById = async () => {\n\n        var response1 = new Promise((resolve, reject) => {\n            //alert(assertionId);\n            resolve(getAssertionDetailByIdResponse(assertionId));\n        }).then(value => {\n            if (value != undefined) {\n                setAssertionId(value[0].assertionID.$oid);\n                setBadgeName(value[0].badge_details[0].name);\n                setBadgeRecipient(value[0].user_details[0].email);\n                setBadgeIssuedOn(formatDate(value[0].issuedOn.$date));\n                setBadgeComments(value[0].comments);\n                setBadgeReviewer(value[0].reviewer_details[0].email);\n                setEvidencelink(value[0].workLink);\n                setBadgeStatus(value[0].badge_status[0].badgeStatus);\n                setBadgeIcon(value[0].badge_details[0].icon);\n                setModifiedDate(formatDate(value[0].modified.$date));\n                setPublicLink(value[0].publicLink);\n                setuserID(value[0].user_details[0]._id.$oid);\n            }\n\n\n        });\n\n    }\n\n    \n    const handleBackButtonClick = () =>{\n        setBackButtonClicked('True');\n    }\n\n    useEffect(() => {\n        handleviewAssertionById();\n    }, []);\n\n    if (backButtonClicked=='True'){\nreturn(\n<div>\n    <MyBackpackForm userID={userID} />\n</div>\n);\n    }\n    else{\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <CssBaseline/>\n            <div className={classes.paper} data-testid=\"backpackDetails_ID\">\n\n            <div className={classes.root}>\n      \n  \n                <Typography >\n                <img src={badgeIcon} width=\"150\"/>\n                </Typography>\n                \n                {/* <Avatar className={classes.avatar_additional} data-testid=\"backpackDetails_linkedIn\"  onClick={handleLinkedIn}>\n                    <LinkedInIcon/>\n                    </Avatar> */}\n                    </div>\n                \n                <Typography component=\"h1\" variant=\"h5\" >\n                    Assertion Details\n                    <Avatar className={classes.avatar_additional} data-testid=\"backpackDetails_linkedIn\"  onClick={handleLinkedIn}>\n                    <LinkedInIcon/>\n                    </Avatar>\n                </Typography>\n               \n                <br></br>\n\n                <Grid container spacing={2}>\n                    <Grid item xs={12}>\n                        <TextField\n                            name=\"badgeName\"\n                            variant=\"outlined\"\n                            fullWidth\n\n                            id=\"backpackDetails_badgeName\"\n                            label=\"Badge Name\"\n                            inputProps={{\n                                \"data-testid\": \"backpackDetails_badgeName\",\n                            }}\n                            value={badgeName}\n\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <TextField\n                            variant=\"outlined\"\n                            fullWidth\n                            multiline\n                            id=\"backpackDetails_badgeRecipient\"\n                            label=\"Badge Recipient\"\n                            name=\"badgeRecipient\"\n                            inputProps={{\n                                \"data-testid\": \"backpackDetails_badgeRecipient\",\n                            }}\n                            value={badgeRecipient}\n\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <TextField\n                            variant=\"outlined\"\n                            fullWidth\n                            id=\"backpackDetails_modifiedDate\"\n                            label=\"Last Modified\"\n                            name=\"modifiedDate\"\n                            inputProps={{\n                                \"data-testid\": \"backpackDetails_modifiedDate\",\n                            }}\n                            value={modifiedDate}\n                        />\n                    </Grid>\n\n                    <Grid item xs={12}>\n                        <TextField\n                            variant=\"outlined\"\n                            fullWidth\n                            id=\"backpackDetails_badgeStatus\"\n                            label=\"Badge status\"\n                            name=\"badge status\"\n                            inputProps={{\n                                \"data-testid\": \"backpackDetails_badgeStatus\",\n                            }}\n                            value={badgeStatus}\n                            \n                        /> \n                    </Grid>\n\n                    <Grid item xs={12}>\n                        <TextField\n                            variant=\"outlined\"\n                            fullWidth\n                            id=\"backpackDetails_badgeIssuedOn\"\n                            label=\"Issued On\"\n                            name=\"issuedOn\"\n                            inputProps={{\n                                \"data-testid\": \"backpackDetails_badgeIssuedOn\",\n                            }}\n                            value={badgeIssuedOn}\n                        />\n                    </Grid>\n\n                    <Grid item xs={12}>\n                        <TextField\n                            variant=\"outlined\"\n                            fullWidth\n                            name=\"evidencelink\"\n                            label=\"Evidence Link\"\n                            id=\"backpackDetails_evidencelink\"\n                            inputProps={{\n                                \"data-testid\": \"backpackDetails_evidencelink\",\n                            }}\n                            value={evidencelink}\n\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <TextField\n                            variant=\"outlined\"\n                            fullWidth\n                            multiline\n                            name=\"badgeComments\"\n                            label=\"Badge Comments\"\n                            id=\"backpackDetails_badgeComments\"\n                            inputProps={{\n                                \"data-testid\": \"backpackDetails_badgeComments\",\n                            }}\n                            value={badgeComments}\n                        />\n                    </Grid>\n\n                    <Grid item xs={12}>\n                        <TextField\n                            variant=\"outlined\"\n                            fullWidth\n                            name=\"badgeReviewer\"\n                            label=\"Badge Reviewer\"\n                            id=\"backpackDetails_badgeReviewer\"\n                            inputProps={{\n                                \"data-testid\": \"backpackDetails_badgeReviewer\",\n                            }}\n                            value={badgeReviewer}\n                        />\n                    </Grid>\n                    \n                    <Grid container item xs={12}>\n                        <TextField\n                            variant=\"outlined\"\n                            name=\"publicLink\"\n                            className={classes.innerText}\n                            label=\"Public Link\"\n                            id=\"backpackDetails_publiclink\"\n                            inputProps={{\n                                \"data-testid\": \"backpackDetails_publiclink\",\n                            }}\n                            value={publicLink}\n                        />\n                           <LaunchIcon className={classes.innerLogo} onClick={() => window.open(publicLink, \"_blank\")}/>\n                   \n                      \n                    </Grid>\n\n                </Grid>\n                <Grid container spacing={1}>\n                    {/* <Grid item xs={12} sm={6}>\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className={classes.submit}\n                            disabled={saveFlag=='True'?false:true}\n                            data-testid=\"assertionDetails_saveButton\"\n                            onClick={handleSaveAssertion}>\n                            Save\n                        </Button>\n                    </Grid> */}\n                    <Grid item xs={12} sm={6}>\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className={classes.submit}\n                            data-testid=\"backpackDetails_backButton\" \n                            onClick={handleBackButtonClick}>\n\n                            Back\n                        </Button>\n                    </Grid>\n                </Grid>\n\n            </div>\n        </Container>\n    );\n}\n};\n\nexport default MyBackpackDetailsForm;","/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/API/MyBackpackAPI.js",[],"/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/API/ViewUsersAPI.js",[],"/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/forms/UserDetailsForm.js",["288","289","290","291","292","293","294","295","296","297","298","299","300","301","302","303","304"],"import React, { useState, Text, useEffect } from 'react';\nimport getRegistrationResponse from '../API/RegistrationAPI';\nimport LoginForm from './LoginForm';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport UserDetailByEmailResponse from '../API/UserDetailsByEmailAPI';\nimport ViewUserForm from '../forms/ViewUsersForm';\nimport formatDate from '../scripts/functions';\nimport CardMembershipOutlinedIcon from '@material-ui/icons/CardMembershipOutlined';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport { InputLabel } from '@material-ui/core';\nimport UpdateUserDetailsResponse from '../API/UpdateUserDetailsAPI';\n\n\nconst UserDetailsForm = (props) => {\n\n    const [email, setEmail] = useState(props.email);\n    const [userType, setUserType] = useState('');\n    const [userStatus, setUserStatus] = useState('');\n    const [created, setCreated] = useState('');\n    const [lastmodified, setLastModified] = useState('');\n    const [firstName, setFirstName] = useState('');\n    const [lastName, setLastName] = useState('');\n    const [middleName, setMiddleName] = useState('');\n    const [organizationName, setOrganizationName] = useState('');\n    const [adminId, setAdminId] = useState(props.userID);\n\n    const [saveFlag, setSaveFlag] = useState('False');\n    const [result, setResult] = useState('');\n    const [backButtonClicked,setBackButtonClicked] = useState('False');\n\n\n    const useStyles = makeStyles((theme) => ({\n        paper: {\n            marginTop: theme.spacing(8),\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n        },\n        avatar: {\n            margin: theme.spacing(1),\n            backgroundColor: theme.palette.secondary.main,\n        },\n        form: {\n            width: '100%',\n            marginTop: theme.spacing(3),\n        },\n        submit: {\n            margin: theme.spacing(3, 0, 2),\n        },\n    }));\n\n\n    const classes = useStyles();\n\n    const handleviewUserByEmail = async () => {\n        \n        var response1 = new Promise((resolve, reject) => {\n            resolve(UserDetailByEmailResponse(email));\n        }).then(value => {\n            if (value != undefined) {\n                setUserType(value[0].user_type_details[0].type);\n                setUserStatus(value[0].user_status_details[0].userStatus);\n                // _id.$oid\n                setCreated(formatDate(value[0].created.$date));\n                setLastModified(formatDate(value[0].modified.$date));\n                setFirstName(value[0].firstName);\n                setLastName(value[0].secondName);\n                setMiddleName(value[0].middleName);\n                setOrganizationName(value[0].organizationName);\n          \n            }\n\n        });\n\n    }\n\n    const handleSaveAssertion = () => {\n        var response2 = new Promise((resolve, reject) => {\n            resolve(UpdateUserDetailsResponse(email, userType, firstName, lastName, middleName, organizationName,adminId,userStatus));\n        }).then(value => {\n            if (value==200){\n                setResult(\"Saved Successfully\");\n                setSaveFlag('False')\n            }\n        });\n    }\n\n    const handleBackButtonClick = () =>{\n        setBackButtonClicked('True');\n    }\n\n    useEffect(() => {\n        handleviewUserByEmail()\n    }, []);\n\n    const handleUserTypeChange = event => {\n        setUserType(event.target.value);\n        setSaveFlag('True');\n    }\n    const handleUserStatusChange = event => {\n        setUserStatus(event.target.value);\n        setSaveFlag('True');\n    }\n\n    const handleFirstNameChange = event => {\n        setFirstName(event.target.value);\n        setSaveFlag('True');\n    }\n\n    const handleMiddleNameChange = event => {\n        setMiddleName(event.target.value);\n        setSaveFlag('True');\n    }\n\n    const handleLastNameChange = event => {\n        setLastName(event.target.value);\n        setSaveFlag('True');\n    }\n\n    const handleOrganizationNameChange = event => {\n        setOrganizationName(event.target.value);\n        setSaveFlag('True');\n    }\n  \n\n    if (backButtonClicked=='True'){\nreturn(\n<div>\n    <ViewUserForm userID={adminId}/>\n</div>\n);\n    }\n    else{\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <CssBaseline />\n            <div className={classes.paper} data-testid=\"userDetails_ID\">\n                <Avatar className={classes.avatar}>\n                    <CardMembershipOutlinedIcon />\n                </Avatar>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Edit User Details\n      </Typography>\n                <br></br>\n         \n                <Grid container spacing={2}>\n                    <Grid item xs={12} >\n                        <TextField\n                            name=\"email\"\n                            variant=\"outlined\"\n                            fullWidth\n                            id=\"userDetails_email\"\n                            label=\"Email\"\n                            inputProps={{\n                                \"data-testid\": \"userDetails_email\",\n                            }}\n                            value={email}\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                    <InputLabel shrink id=\"userDetails_userType\">\n                        User Type\n                    </InputLabel>\n                        <Select\n                            variant=\"outlined\"\n                            fullWidth\n                            multiline\n                            id=\"userDetails_userType\"\n                            label=\"User Type\"\n                            name=\"userType\"\n                            inputProps={{\n                                \"data-testid\": \"userDetails_userType\",\n                            }}\n                            value={userType}\n                            onChange={handleUserTypeChange}\n                            >\n                            <MenuItem value={'regular'}>Regular</MenuItem>\n                            <MenuItem value={'admin'}>Admin</MenuItem>\n                            <MenuItem value={'reviewer'}>Reviewer</MenuItem>\n                            \n                        </Select> \n\n                    </Grid> \n\n                    <Grid item xs={12}>\n                    <InputLabel shrink id=\"userDetails_userStatus\">\n                        User Status\n                    </InputLabel>\n                        <Select\n                              variant=\"outlined\"\n                              fullWidth\n                              id=\"userDetails_userStatus\"\n                              label=\"User Status\"\n                              name=\"userStatus\"\n                              inputProps={{\n                                  \"data-testid\": \"userDetails_userStatus\",\n                                  \n                              }}\n                              value={userStatus}\n                              onChange={handleUserStatusChange}\n                            >\n                            <MenuItem value={'active'}>Active</MenuItem>\n                            <MenuItem value={'inactive'}>Inactive</MenuItem>\n                            <MenuItem value={'blocked'}>Blocked</MenuItem>                            \n                        </Select> \n                    </Grid>                     \n           \n                    <Grid item xs={12}>\n                        <TextField\n                            variant=\"outlined\"\n                            fullWidth\n                            id=\"userDetails_created\"\n                            label=\"Created Date\"\n                            name=\"created\"\n                            inputProps={{\n                                \"data-testid\": \"userDetails_created\",\n                            }}\n                            value={created}\n                        />\n                    </Grid>\n                    {/* <Grid item xs={12}>\n                    <InputLabel shrink id=\"assertionDetails_badgeStatus\">\n                        Badge Status\n                    </InputLabel>\n                        <Select\n                        variant =\"outlined\"\n                            labelId=\"assertionDetails_badgeStatus\"\n                            id=\"assertionDetails_badgeStatus\"\n                            name=\"Badge Status\"\n                            fullWidth\n                            label=\"Badge Status\"\n                            inputProps={{\n                                \"data-testid\": \"assertionDetails_badgeStatus\",\n                            }}\n                            value={badgeStatus}\n                            onChange={handleBadgeStatusChange}\n                            >\n                            <MenuItem value={'5f776f556289f17659874f2e'}>Applied</MenuItem>\n                            <MenuItem value={'5f776ee06289f17659874f2a'}>Working</MenuItem>\n                            <MenuItem value={'5f776f336289f17659874f2b'}>Rework</MenuItem>\n                            <MenuItem value={'5f776f416289f17659874f2c'}>Approved</MenuItem>\n                            <MenuItem value={'5f776f4c6289f17659874f2d'}>Rejected</MenuItem>\n                        </Select> \n\n                    </Grid> */}\n                    <Grid item xs={12}>\n                        <TextField\n                            variant=\"outlined\"\n                            fullWidth\n                            id=\"userDetails_lastModified\"\n                            label=\"Last Modified\"\n                            name=\"lastModified\"\n                            inputProps={{\n                                \"data-testid\": \"userDetails_lastModified\",\n                            }}\n                            value={lastmodified}\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <TextField\n                            variant=\"outlined\"\n                            fullWidth\n                            name=\"firstName\"\n                            label=\"First Name\"\n                            id=\"userDetails_firstName\"\n                            inputProps={{\n                                \"data-testid\": \"userDetails_firstName\",\n                            }}\n                            value={firstName}\n                            onChange={handleFirstNameChange}\n                        />\n                    </Grid>\n\n                    <Grid item xs={12}>\n                        <TextField\n                            variant=\"outlined\"\n                            fullWidth\n                            name=\"middlename\"\n                            label=\"Middle Name\"\n                            id=\"userDetails_middleName\"\n                            inputProps={{\n                                \"data-testid\": \"userDetails_middleName\",\n                            }}\n                            value={middleName}\n                            onChange={handleMiddleNameChange}\n                        />\n                    </Grid>\n\n                    <Grid item xs={12}>\n                        <TextField\n                            variant=\"outlined\"\n                            fullWidth\n                            multiline\n                            name=\"lastName\"\n                            label=\"Last Name\"\n                            id=\"userDetails_lastName\"\n                            inputProps={{\n                                \"data-testid\": \"userDetails_lastName\",\n                            }}\n                            value={lastName}\n                            onChange={handleLastNameChange}\n                        />\n                    </Grid>\n                   \n                    <Grid item xs={12}>\n                        <TextField\n                            variant=\"outlined\"\n                            fullWidth\n                            name=\"organizationName\"\n                            label=\"Organization Name\"\n                            id=\"userDetails_organizationName\"\n                            inputProps={{\n                                \"data-testid\": \"userDetails_organizationName\",\n                            }}\n                            value={organizationName}\n                            onChange={handleOrganizationNameChange}\n                        />\n                    </Grid>\n                </Grid>\n                <Grid container spacing={1}>\n                    <Grid item xs={12} sm={6}>\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className={classes.submit}\n                            disabled={saveFlag=='True'?false:true}\n                            data-testid=\"userDetails_saveButton\"\n                            onClick={handleSaveAssertion}\n                            >\n                            Save\n                 </Button>\n                    </Grid>\n                    <Grid item xs={12} sm={6}>\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className={classes.submit}\n                            data-testid=\"userDetails_backButton\" \n                            onClick={handleBackButtonClick}\n                            >\n                            Back\n                    </Button>\n                    </Grid>\n                </Grid>\n                <label>{result}</label>\n                <input type=\"text\" hidden readOnly data-testid='userDetails_Result' value={result} />\n            </div>\n        </Container>\n    );\n                        }\n};\n\nexport default UserDetailsForm;","/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/forms/AssertionDetailsForm.js",["305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","320","321","322","323","324","325","326","327","328","329","330","331","332","333"],"import React, {useState, Text, useEffect} from 'react';\nimport getRegistrationResponse from '../API/RegistrationAPI';\nimport LoginForm from './LoginForm';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport getAssertionDetailByIdResponse from '../API/AssertionDetailsByIdAPI'\nimport formatDate from '../scripts/functions';\nimport CardMembershipOutlinedIcon from '@material-ui/icons/CardMembershipOutlined';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport updateAssertionResponse from '../API/UpdateAssertionAPI';\n\nimport { InputLabel } from '@material-ui/core';\nimport ViewAssertionsForm from './ViewAssertionsForm';\nimport UserDetailByEmailResponse from '../API/UserDetailsByEmailAPI';\nimport updateUserBadgeStatusResponse from '../API/UpdateUserBadgeStatusAPI';\n\nconst AssertionDetailsForm = (props) => {\n\n    const [assertionId, setAssertionId] = useState(props.assertionId);\n    const [badgeName, setBadgeName] = useState('');\n    const [badgeRecipient, setBadgeRecipient] = useState('');\n    const [modifiedDate, setModifiedDate] = useState('');\n    const [badgeStatus, setBadgeStatus] = useState('');\n    const [evidencelink, setEvidencelink] = useState('');\n    const [badgeReviewer, setBadgeReviewer] = useState('');\n    const [badgeComments, setBadgeComments] = useState('');\n    const [badgeIssuedOn, setBadgeIssuedOn] = useState('');\n    const [icon, setIcon] = useState('');\n    const [publicLink, setPublicLink] = useState('');\n    const [saveFlag, setSaveFlag] = useState('False');\n    const [result, setResult] = useState('');\n    const [backButtonClicked,setBackButtonClicked] = useState('False');\n    const [email,setEmail] = useState(props.email);\n    const [userID,setuserID] = useState(props.userID);\n    const [userType,setUserType]=useState(props.userType);\n\n\n    const useStyles = makeStyles((theme) => ({\n        paper: {\n            marginTop: theme.spacing(8),\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n        },\n        avatar: {\n            margin: theme.spacing(1),\n            backgroundColor: theme.palette.secondary.main,\n        },\n        form: {\n            width: '100%',\n            marginTop: theme.spacing(3),\n        },\n        submit: {\n            margin: theme.spacing(3, 0, 2),\n        },\n    }));\n\n\n    const classes = useStyles();\n\n    const handleviewAssertionById = async () => {\n\n        var response1 = new Promise((resolve, reject) => {\n            resolve(getAssertionDetailByIdResponse(assertionId));\n        }).then(value => {\n            if (value != undefined) {\n                setAssertionId(value[0].assertionID.$oid);\n                setBadgeName(value[0].badge_details[0].name);\n                setBadgeRecipient(value[0].user_details[0].email);\n                if(value[0].issuedOn!=null)\n                    setBadgeIssuedOn(formatDate(value[0].issuedOn.$date));\n                setBadgeComments(value[0].comments);\n               \n                if(value[0].reviewer_details!='')\n                    setBadgeReviewer(value[0].reviewer_details[0].email);\n                setEvidencelink(value[0].workLink);\n                setBadgeStatus(value[0].badge_status[0]._id.$oid);\n                setModifiedDate(formatDate(value[0].modified.$date));\n                setPublicLink(value[0].publicLink);\n                setIcon(value[0].badge_details[0].icon);\n            }\n\n\n        });\n\n    }\n\n    const handleSaveAssertion = () => {\n\n     if(userType=='5f760d4325c1036d4d466560'){\n        var response2 = new Promise((resolve, reject) => {\n            // alert(userID);\n            resolve(updateAssertionResponse(assertionId, badgeStatus, evidencelink, badgeComments, publicLink, userID));\n        }).then(value => {\n            if (value==200){\n                setResult(\"Saved Successfully\");\n                setSaveFlag('False')\n                \n            }           \n\n        });\n     }\n     else{\n        var response2 = new Promise((resolve, reject) => {\n            // alert(userID);\n            resolve(updateUserBadgeStatusResponse(assertionId, userID, badgeStatus,badgeComments));\n        }).then(value => {\n            if (value==200){\n                setResult(\"Saved Successfully\");\n                setSaveFlag('False')\n                \n            }           \n\n        });\n    }\n        \n    }\n\n    const handleviewUserByEmail = async () => {\n        \n        var response1 = new Promise((resolve, reject) => {\n            resolve(UserDetailByEmailResponse(email));\n        }).then(value => {\n            if (value != undefined) {\n                setuserID(value[0]._id.$oid);\n   \n            }\n\n        });\n\n    }\n\n\n    const handleBackButtonClick = () =>{\n        setBackButtonClicked('True');\n    }\n\n    useEffect(() => {\n        handleviewAssertionById();\n        // handleviewUserByEmail();\n    }, []);\n\n    \n\n    const handleBadgeStatusChange = event => {\n        setBadgeStatus(event.target.value);\n        setSaveFlag('True');\n    }\n    const handleBadgeWorkLinkChange = event => {\n        setEvidencelink(event.target.value);\n        setSaveFlag('True');\n    }\n    const handleBadgeCommentsChange = event => {\n        setBadgeComments(event.target.value);\n        setSaveFlag('True');\n    }\n\n    const handlePublicLinkChange = event => {\n        setPublicLink(event.target.value);\n        setSaveFlag('True');\n    }\n\n    if (backButtonClicked=='True'){\nreturn(\n<div>\n    <ViewAssertionsForm  email={email} userType={userType} userID={userID} />\n</div>\n);\n    }\n    else{\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <CssBaseline/>\n            <div className={classes.paper} data-testid=\"assertionDetails_ID\">\n                {/* <Avatar className={classes.avatar}>\n                    <CardMembershipOutlinedIcon/>\n                </Avatar>\n               */}\n                <Typography >                \n                <img src={icon} width=\"150\"/>\n                </Typography>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Edit Assertion\n                </Typography>\n                <br></br>\n\n                <Grid container spacing={2}>\n                    <Grid item xs={12}>\n                        <TextField\n                            name=\"badgeName\"\n                            variant=\"outlined\"\n                            fullWidth\n\n                            id=\"badgeName\"\n                            label=\"Badge Name\"\n                            inputProps={{\n                                \"data-testid\": \"assertionDetails_badgeName\",\n                            }}\n                            value={badgeName}\n\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <TextField\n                            variant=\"outlined\"\n                            fullWidth\n                            multiline\n                            id=\"assertiondetails_recipient\"\n                            label=\"Badge Recipient\"\n                            name=\"badgeRecipient\"\n                            inputProps={{\n                                \"data-testid\": \"assertionDetails_badgeRecipient\",\n                            }}\n                            value={badgeRecipient}\n\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <TextField\n                            variant=\"outlined\"\n                            fullWidth\n                            id=\"assertiondetails_modifiedDate\"\n                            label=\"Last Modified\"\n                            name=\"modifiedDate\"\n                            inputProps={{\n                                \"data-testid\": \"assertiondetails_modifiedDate\",\n                            }}\n                            value={modifiedDate}\n                        />\n                    </Grid>\n\n                    <Grid item xs={12}>\n                    <InputLabel shrink id=\"assertionDetails_badgeStatus\">\n                        Badge Status\n                    </InputLabel>\n                        <Select\n                        variant =\"outlined\"\n                            labelId=\"assertionDetails_badgeStatus\"\n                            id=\"assertionDetails_badgeStatus\"\n                            name=\"Badge Status\"\n                            fullWidth\n                            label=\"Badge Status\"\n                            inputProps={{\n                                \"data-testid\": \"assertionDetails_badgeStatus\",\n                            }}\n                            value={badgeStatus}\n                            onChange={handleBadgeStatusChange}\n                            >\n                            <MenuItem value={'5f776f556289f17659874f2e'}>Applied</MenuItem>\n                            <MenuItem value={'5f776ee06289f17659874f2a'}>Working</MenuItem>\n                            <MenuItem value={'5f776f336289f17659874f2b'}>Rework</MenuItem>\n                            <MenuItem value={'5f776f416289f17659874f2c'}>Approved</MenuItem>\n                            <MenuItem value={'5f776f4c6289f17659874f2d'}>Rejected</MenuItem>\n                        </Select>\n\n\n                        {/* <TextField\n                            variant=\"outlined\"\n                            fullWidth\n                            id=\"assertionDetails_badgeStatus\"\n                            label=\"Badge status\"\n                            name=\"badge status\"\n                            inputProps={{\n                                \"data-testid\": \"assertionDetails_badgeStatus\",\n                            }}\n                            value={badgeStatus}\n                            onChange={handleBadgeStatusChange}\n                        /> */}\n                    </Grid>\n                    <Grid item xs={12}>\n                        <TextField\n                            variant=\"outlined\"\n                            fullWidth\n                            id=\"assertionDetails_badgeIssuedOn\"\n                            label=\"Issued On\"\n                            name=\"issuedOn\"\n                            inputProps={{\n                                \"data-testid\": \"assertiondetails_badgeIssuedOn\",\n                            }}\n                            value={badgeIssuedOn}\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <TextField\n                            variant=\"outlined\"\n                            fullWidth\n                            name=\"evidencelink\"\n                            label=\"Evidence Link\"\n                            id=\"assertionDetails_evidencelink\"\n                            inputProps={{\n                                \"data-testid\": \"assertionDetails_evidencelink\",\n                            }}\n                            value={evidencelink}\n                           \n                            onChange={userType=='5fc5567fcd831cc0c83774b8'?'':handleBadgeWorkLinkChange}\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <TextField\n                            variant=\"outlined\"\n                            fullWidth\n                            multiline\n                            name=\"badgeComments\"\n                            label=\"Badge Comments\"\n                            id=\"assertionDetails_badgeComments\"\n                            inputProps={{\n                                \"data-testid\": \"assertionDetails_badgeComments\",\n                            }}\n                            value={badgeComments}\n                            onChange={handleBadgeCommentsChange}\n                        />\n                    </Grid>\n\n                    <Grid item xs={12}>\n                        <TextField\n                            variant=\"outlined\"\n                            fullWidth\n                            name=\"badgeReviewer\"\n                            label=\"Badge Reviewer\"\n                            id=\"assertionDetails_badgeReviewer\"\n                            inputProps={{\n                                \"data-testid\": \"assertionDetails_badgeReviewer\",\n                            }}\n                            value={badgeReviewer}\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <TextField\n                            variant=\"outlined\"\n                            fullWidth\n                            name=\"publicLink\"\n                            label=\"Public Link\"\n                            id=\"assertionDetails_publiclink\"\n                            inputProps={{\n                                \"data-testid\": \"assertionDetails_publiclink\",\n                            }}\n                            value={publicLink}\n                            onChange={userType=='5fc5567fcd831cc0c83774b8'?'':handlePublicLinkChange}\n                           \n                        />\n                    </Grid>\n                    {/*\n                    <Grid item xs={12}>\n                        <TextField\n                            variant=\"outlined\"\n                            fullWidth\n                            name=\"owners\"\n                            label=\"Owners of Badge\"\n                            id=\"owners\"\n                            inputProps={{\n                                \"data-testid\": \"badgeDetails_owners\",\n                            }}\n                            value={owners}\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <TextField\n                            variant=\"outlined\"\n                            fullWidth\n                            name=\"reviewers\"\n                            label=\"Reviewers of Badge\"\n                            id=\"reviewers\"\n                            inputProps={{\n                                \"data-testid\": \"badgeDetails_reviewers\",\n                            }}\n                            value={reviewers}\n                        />\n                    </Grid>\n*/}\n\n                </Grid>\n                <Grid container spacing={1}>\n                    <Grid item xs={12} sm={6}>\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className={classes.submit}\n                            disabled={saveFlag=='True'?false:true}\n                            data-testid=\"assertionDetails_saveButton\"\n                            onClick={handleSaveAssertion}>\n                            Save\n                        </Button>\n                    </Grid>\n                    <Grid item xs={12} sm={6}>\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className={classes.submit}\n\n                            data-testid=\"assertionDetails_backButton\" \n                            onClick={handleBackButtonClick}>\n\n                            Back\n                        </Button>\n                    </Grid>\n                </Grid>\n\n                <label>{result}</label>\n                <input type=\"text\" hidden data-testid='assertionDetails_Result' value={result} readOnly />\n                <input type=\"text\" hidden data-testid='assertionDetails_userID' value={userID} readOnly/>\n            </div>\n        </Container>\n    );\n}\n    //   }\n    // }\n};\n\nexport default AssertionDetailsForm;","/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/forms/AddUserForm.js",["334","335","336","337","338","339","340","341","342","343","344","345","346","347","348","349","350","351","352","353","354","355","356","357","358","359","360","361","362","363","364","365","366"],"import React, { useState, Text, useEffect } from 'react';\nimport getRegistrationResponse from '../API/RegistrationAPI';\nimport LoginForm from './LoginForm';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport UserDetailByEmailResponse from '../API/UserDetailsByEmailAPI';\nimport ViewUserForm from '../forms/ViewUsersForm';\nimport formatDate from '../scripts/functions';\nimport CardMembershipOutlinedIcon from '@material-ui/icons/CardMembershipOutlined';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport addNewUserResponse from '../API/AddNewUserAPI';\nimport { InputLabel } from '@material-ui/core';\nimport userEvent from '@testing-library/user-event';\n\n\nconst AddUserForm = (props) => {\n\n    const [email, setEmail] = useState('');\n    const [userType, setUserType] = useState('regular');\n    const [firstName, setFirstName] = useState('');\n    const [lastName, setLastName] = useState('');\n    const [middleName, setMiddleName] = useState('');\n    const [organizationName, setOrganizationName] = useState('');\n    const [password, setPassword] = useState('');\n    const [confirmPassword, setConfirmPassword] = useState('');\n\n    const [firstNameClick,setFirstNameClick] = useState('False');\n    const [lastNameClick,setLastNameClick] = useState('False');\n    const [emailClick,setEmailClick] = useState('False');\n    const [userTypeClick, setUserTypeClick] = useState('False');\n    const [organizationNameClick, setOrganizationNameClick] = useState('False');\n    const [middleNameClick, setMiddleNameClick] = useState('False');\n    const [passClick,setPassClick] = useState('False');\n    const [confPassClick,setConfPassClick] = useState('False');\n\n    const [saveFlag, setSaveFlag] = useState('False');\n    const [result, setResult] = useState('');\n    const [backButtonClicked,setBackButtonClicked] = useState('False');\n\n\n    const useStyles = makeStyles((theme) => ({\n        paper: {\n            marginTop: theme.spacing(8),\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n        },\n        avatar: {\n            margin: theme.spacing(1),\n            backgroundColor: theme.palette.secondary.main,\n        },\n        form: {\n            width: '100%',\n            marginTop: theme.spacing(3),\n        },\n        submit: {\n            margin: theme.spacing(3, 0, 2),\n        },\n    }));\n\n    const classes = useStyles();\n\n    const handleAddUserButton = () => {\n        setFirstNameClick('True');\n        setMiddleNameClick('True');\n        setLastNameClick('True');\n        setOrganizationNameClick('True');\n        setEmailClick('True');\n        setPassClick('True');\n        setConfPassClick('True');\n        \n\n        if (password != confirmPassword) {\n            setResult('Password Mismatch');\n            setPassword('');\n            setConfirmPassword('');\n          }\n          else{\n        var response2 = new Promise((resolve, reject) => {\n            resolve(addNewUserResponse(email, password, userType, firstName, lastName, middleName, organizationName));\n        }).then(value => {\n            if (value=='registered'){\n                setResult(\"Created User Successfully\");\n                setSaveFlag('False');\n            }\n\n        });\n    }\n}\n\n    const handleBackButtonClick = () =>{\n        setBackButtonClicked('True');\n    }\n\n\n    const handleUserTypeChange = event => {\n        setUserType(event.target.value);\n        setUserTypeClick('True');\n        setSaveFlag('True');\n    }\n\n    const handleFirstNameChange = event => {\n        setFirstName(event.target.value);\n        setFirstNameClick('True');\n        setSaveFlag('True');\n    }\n\n    const handleMiddleNameChange = event => {\n        setMiddleName(event.target.value);\n        setMiddleNameClick('True');\n        setSaveFlag('True');\n    }\n\n    const handleLastNameChange = event => {\n        setLastName(event.target.value);\n        setLastNameClick('True');\n        setSaveFlag('True');\n    }\n\n    const handleOrganizationNameChange = event => {\n        setOrganizationName(event.target.value);\n        setOrganizationNameClick('True');\n        setSaveFlag('True');\n    }\n\n    const handleEmailChange = event => {\n        setEmail(event.target.value);\n        setEmailClick('True');\n        setSaveFlag('True');\n    }\n\n    const handlePasswordChange = event => {\n        setPassword(event.target.value);\n        setPassClick('True');\n        setSaveFlag('True');\n        setResult('');\n    }\n\n    const handleConfirmPasswordChange = event => {\n        setConfirmPassword(event.target.value);\n        setConfPassClick('True');\n        setSaveFlag('True');\n        setResult('');\n    }\n  \n\n    if (backButtonClicked=='True'){\n    return(\n    <div>\n        <ViewUserForm />\n    </div>\n    );\n    }\n    else{\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <CssBaseline />\n            <div className={classes.paper} data-testid=\"addUser_ID\">\n                <Avatar className={classes.avatar}>\n                    <CardMembershipOutlinedIcon />\n                </Avatar>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Add User\n      </Typography>\n                <br></br>\n         \n                <Grid container spacing={2}>\n                <Grid item xs={12}>\n                        <TextField\n                            variant=\"outlined\"\n                            fullWidth\n                            required\n                            name=\"firstName\"\n                            label=\"First Name\"\n                            id=\"addUser_firstName\"\n                            inputProps={{\n                                \"data-testid\": \"addUser_firstName\",\n                            }}\n                            className={((firstName.length=='')&& (firstNameClick=='True')) ? 'emptyfield' : ''}\n                            value={firstName}\n                            onChange={handleFirstNameChange}\n                        />\n                    </Grid>\n\n                    <Grid item xs={12}>\n                        <TextField\n                            variant=\"outlined\"\n                            fullWidth\n                            required\n                            name=\"middlename\"\n                            label=\"Middle Name\"\n                            id=\"addUser_middleName\"\n                            inputProps={{\n                                \"data-testid\": \"addUser_middleName\",\n                            }}\n                            value={middleName}\n                            className={((middleName.length=='')&& (middleNameClick=='True')) ? 'emptyfield' : ''}\n                            onChange={handleMiddleNameChange}\n                        />\n                    </Grid>\n\n                    <Grid item xs={12}>\n                        <TextField\n                            variant=\"outlined\"\n                            fullWidth\n                            required\n                            name=\"lastName\"\n                            label=\"Last Name\"\n                            id=\"addUser_lastName\"\n                            inputProps={{\n                                \"data-testid\": \"addUser_lastName\",\n                            }}\n                            value={lastName}\n                            className={((lastName.length=='')&& (lastNameClick=='True')) ? 'emptyfield' : ''}\n                            onChange={handleLastNameChange}\n                        />\n                    </Grid>\n\n                    <Grid item xs={12} >\n                        <TextField\n                            name=\"email\"\n                            variant=\"outlined\"\n                            fullWidth\n                            required\n                            id=\"addUser_email\"\n                            label=\"Email\"\n                            inputProps={{\n                                \"data-testid\": \"addUser_email\",\n                            }}\n                            value={email}\n                            className={((email.length=='')&& (emailClick=='True')) ? 'emptyfield' : ''}\n                            onChange={handleEmailChange}\n\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                    <InputLabel shrink id=\"addUser_userType\">\n                        User Type\n                    </InputLabel>\n                        <Select\n                            variant=\"outlined\"\n                            fullWidth\n                            required\n                            id=\"addUser_userType\"\n                            label=\"User Type\"\n                            name=\"userType\"\n                            inputProps={{\n                                \"data-testid\": \"addUser_userType\",\n                            }}\n                            value={userType}\n                            onChange={handleUserTypeChange}\n                            className={((userType.length=='')&& (userTypeClick=='True')) ? 'emptyfield' : ''}\n                            >\n                            <MenuItem value={'regular'}>Regular</MenuItem>\n                            <MenuItem value={'admin'}>Admin</MenuItem>\n                            <MenuItem value={'reviewer'}>Reviewer</MenuItem>\n                            \n                        </Select> \n\n                    </Grid> \n\n                    <Grid item xs={12}>\n                        <TextField\n                            variant=\"outlined\"\n                            fullWidth\n                            required\n                            type='password'\n                            name=\"password\"\n                            label=\"Password\"\n                            id=\"addUser_password\"\n                            inputProps={{\n                                \"data-testid\": \"addUser_password\",\n                            }}\n                            value={password}\n                            className={((password.length=='')&& (passClick=='True')) ? 'emptyfield' : ''}\n                            onChange={handlePasswordChange}\n                        />\n                    </Grid>\n\n                    <Grid item xs={12}>\n                        <TextField\n                            variant=\"outlined\"\n                            fullWidth\n                            required\n                            type='password'\n                            name=\"confirmpassword\"\n                            label=\"Confirm Password\"\n                            id=\"addUser_confirmPassword\"\n                            inputProps={{\n                                \"data-testid\": \"addUser_confirmPassword\",\n                            }}\n                            value={confirmPassword}\n                            className={((confirmPassword.length=='')&& (confPassClick=='True')) ? 'emptyfield' : ''}\n                            onChange={handleConfirmPasswordChange}\n                        />\n                    </Grid>\n                   \n                    <Grid item xs={12}>\n                        <TextField\n                            variant=\"outlined\"\n                            fullWidth\n                            required\n                            name=\"organizationName\"\n                            label=\"Organization Name\"\n                            id=\"addUser_organizationName\"\n                            inputProps={{\n                                \"data-testid\": \"addUser_organizationName\",\n                            }}\n                            value={organizationName}\n                            className={((organizationName.length=='')&& (organizationNameClick=='True')) ? 'emptyfield' : ''}\n                            onChange={handleOrganizationNameChange}\n                        />\n                    </Grid>\n                </Grid>\n                <Grid container spacing={1}>\n                    <Grid item xs={12} sm={6}>\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className={classes.submit}\n                            disabled={saveFlag=='True'?false:true}\n                            data-testid=\"addUser_submitButton\"\n                            onClick={handleAddUserButton}\n                            >\n                            Save\n                 </Button>\n                    </Grid>\n                    <Grid item xs={12} sm={6}>\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className={classes.submit}\n                            data-testid=\"addUser_backButton\" \n                            onClick={handleBackButtonClick}\n                            >\n                            Back\n                    </Button>\n                    </Grid>\n                </Grid>\n                <label>{result}</label>\n                <input type=\"text\" hidden data-testid='addUser_Result' value={result} />\n            </div>\n        </Container>\n    );\n                        }\n};\n\nexport default AddUserForm;","/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/forms/BadgeDetailsForm.js",["367","368","369","370","371","372","373","374","375","376","377","378","379","380","381","382","383","384","385","386","387","388","389","390","391"],"import React, { useState, Text, useEffect } from 'react';\nimport getRegistrationResponse from '../API/RegistrationAPI';\nimport LoginForm from './LoginForm';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport getViewBadgeByNameResponse from '../API/BadgeDetailsByNameAPI'\nimport formatDate from '../scripts/functions';\nimport CardMembershipOutlinedIcon from '@material-ui/icons/CardMembershipOutlined';\nimport ViewBadgeForm from '../forms/ViewBadgeForm';\nimport updateBadgeResponseAPI from '../API/UpdateBadgeAPI'\nimport { InputLabel, StepIcon } from '@material-ui/core';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport addNewAssertionResponse from '../API/AddNewAssertionAPI';\n\n\n\nconst BadgeDetailsForm = (props) => {\n\n  const [badgeId,setbadgeID]=useState('');\n  const [badgeName, setbadgeName] = useState(props.badgeName);\n  const [userType, setUserType]=useState(props.userType);\n  const [userID, setUserID]=useState(props.userID);\n  const [badgeDescriptoion, setBadgeDescription] = useState('');\n  const [createdDate, setCreatedDate] = useState('');\n  const [modifiedDate, setModifiedDate] = useState('');\n  const [link, setLink] = useState('');\n  const [badgeType, setBadgeType] = useState('');\n  const [evidenceRequired, setEvidenceRequired] = useState('');\n  const [userRequestable, setUserRequestable] = useState('');\n  const [owners, setOwners] = useState('');\n  const [reviewers, setReviewers] = useState('');\n  const [icon, setIcon] = useState('');\n  const [saveFlag, setSaveFlag]=useState('False');\n  const [result, setResult]=useState('');\n  const [requestBadgeResult,setrequestBadgeResult]=useState('');\n  const [backbuttonClicked, setBackButtonClicked]=useState('False');\n  const [requestBadgeButtonClicked, setRequestBadgeButtonClicked]=useState(false);\n  const [workLink, setWorkLink]=useState('');\n\n  const useStyles = makeStyles((theme) => ({\n    paper: {\n      marginTop: theme.spacing(8),\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n    },\n    avatar: {\n      margin: theme.spacing(1),\n      backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n      width: '100%', // Fix IE 11 issue.\n      marginTop: theme.spacing(3),\n    },\n    submit: {\n      margin: theme.spacing(3, 0, 2),\n    },\n  }));\n\n\n  const classes = useStyles();\n\n  const handleBadgeNameChange =event =>{\n    setbadgeName(event.target.value);\n    setSaveFlag('True');\n  }\n\n  const handleBadgeDescriptionChange =event =>{\n    setBadgeDescription(event.target.value);\n    setSaveFlag('True');\n  }\n  const handleBadgeLinkChange =event =>{\n    setLink(event.target.value);\n    setSaveFlag('True');\n  }\n  const handleBadgeTypeChange =event =>{\n    setBadgeType(event.target.value);\n    setSaveFlag('True');\n  }\n  const handleEvidenceRequiredChange =event =>{\n    setEvidenceRequired(event.target.value);\n    setSaveFlag('True');\n  }\n  const handleUserRequestableChange =event =>{\n    setUserRequestable(event.target.value);\n    setSaveFlag('True');\n  }\n  const handleOwnerChange =event =>{\n    setOwners(event.target.value);\n    setSaveFlag('True');\n  }\n  const handleReviewerChange =event =>{\n    setReviewers(event.target.value);\n    setSaveFlag('True');\n  }\n\n  const handleWorkLinkChange =event =>{\n    setWorkLink(event.target.value);\n\n  }\n  const handleSaveButtonClick = () =>{\n    var response2 = new Promise((resolve, reject) => {\n      resolve(updateBadgeResponseAPI(badgeName, badgeDescriptoion, link, userRequestable, badgeType, owners, reviewers, 'icon link',evidenceRequired));\n    }).then(value=>{\n      if (value==200){\n        setResult('Saved Successfully');\n        setSaveFlag('False');\n      }\n    });\n  }\n\n  const handleBackButtonClick = () =>{\n    setBackButtonClicked('True');\n  }\n\n  const handleRequestBadgeButtonClick =() =>{\n    setRequestBadgeButtonClicked(true);\n  }\n  const handleClose = () => {\n    setRequestBadgeButtonClicked(false);\n  };\n\n  const handlerequestBadge = async() => {\n    var response3 = new Promise((resolve, reject) => {\n      resolve(addNewAssertionResponse(userID,badgeId,'',workLink,'',''));\n    }).then(value => {\n   \n      if (value == 200) {\n        setrequestBadgeResult('Request for Badge is successfully submitted');\n       \n\n      }\n\n\n    });\n    setRequestBadgeButtonClicked(false);\n  };\n  const handleviewBadgeByName = async () => {\n\n    var response1 = new Promise((resolve, reject) => {\n      resolve(getViewBadgeByNameResponse(badgeName));\n    }).then(value => {\n      if (value != undefined) {\n        setbadgeID(value[0]._id.$oid);\n        setBadgeDescription(value[0].description);\n        setLink(value[0].link);\n        setUserRequestable(value[0].userRequestable);\n        setEvidenceRequired(value[0].evidence);\n        setOwners(value[0].owner_details[0].email);\n        setReviewers(value[0].reviewer_details[0].email);\n        setBadgeType(value[0].badge_type_details[0].badgeType);\n        setCreatedDate(formatDate(value[0].created.$date));\n        setModifiedDate(formatDate(value[0].modified.$date));\n        setIcon(value[0].icon);\n\n        // setresponse(value.length);\n        // console.log(response);\n\n      }\n\n\n    });\n\n  }\n\n  useEffect(() => {\n    handleviewBadgeByName()\n  }, []);\n\n  \nif (backbuttonClicked=='True'){\nreturn (\n  <div><ViewBadgeForm userType={userType} /> </div>\n);\n}\nelse{\nif(userType=='5f760d4325c1036d4d466560'){\nreturn (\n<Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Typography >\n          {/* <CardMembershipOutlinedIcon /> */}\n          <img src={icon} width=\"150\"/>\n        </Typography>\n        <Typography component=\"h1\" variant=\"h5\">\n          Badge Details\n      </Typography>\n        <br></br>\n        {/* <form className={classes.form} noValidate> */}\n        <Grid container spacing={2}>\n          <Grid item xs={12} >\n            <TextField\n              name=\"badgeName\"\n              variant=\"outlined\"\n              fullWidth\n              id=\"badgeName\"\n              label=\"Badge Name\"\n              inputProps={{\n                \"data-testid\": \"badgeDetails_badgeName\",\n              }}\n              value={badgeName}\n              onChange={handleBadgeNameChange}\n            />\n          </Grid>\n          <Grid item xs={12} >\n            <TextField\n              variant=\"outlined\"\n              fullWidth\n              multiline\n              id=\"badgeDescriptoion\"\n              label=\"Badge Description\"\n              name=\"badgeDescriptoion\"\n              inputProps={{\n                \"data-testid\": \"badgeDetails_badgeDescription\",\n              }}\n              value={badgeDescriptoion}\n              onChange={handleBadgeDescriptionChange}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              variant=\"outlined\"\n              fullWidth\n              id=\"createdDate\"\n              label=\"Created Date\"\n              name=\"createdDate\"\n              inputProps={{\n                \"data-testid\": \"badgedetails_createdDate\",\n              }}\n              value={createdDate}\n\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              variant=\"outlined\"\n              fullWidth\n              id=\"modifiedDate\"\n              label=\"modified Date\"\n              name=\"modifiedDate\"\n              inputProps={{\n                \"data-testid\": \"badgeDetails_modifiedDate\",\n              }}\n              value={modifiedDate}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              variant=\"outlined\"\n              fullWidth\n              name=\"link\"\n              label=\"Link\"\n              id=\"link\"\n              inputProps={{\n                \"data-testid\": \"badgeDetails_link\",\n              }}\n              value={link}\n              onChange={handleBadgeLinkChange}\n            />\n          </Grid>\n          <Grid item xs={12}>\n          <InputLabel shrink id=\"badgeDetails_badgeType\">\n                        Badge Type\n                    </InputLabel>\n                        <Select\n                        variant =\"outlined\"\n                            labelId=\"badgeDetails_badgeType\"\n                            id=\"badgeDetails_badgeType\"\n                            name=\"Badge Status\"\n                            fullWidth\n                            label=\"Badge Type\"\n                            inputProps={{\n                                \"data-testid\": \"badgeDetails_badgeType\",\n                            }}\n                            value={badgeType}\n                            onChange={handleBadgeTypeChange}\n                            >\n                            <MenuItem value={'Open Badge'}>Open Badge</MenuItem>\n                            <MenuItem value={'Community Badge'}>Community Badge</MenuItem>\n                        </Select>\n            {/* <TextField\n              variant=\"outlined\"\n              fullWidth\n              name=\"badgeType\"\n              label=\"Badge Type\"\n              id=\"badgeType\"\n              inputProps={{\n                \"data-testid\": \"badgeDetails_badgeType\",\n              }}\n              value={badgeType}\n              onChange={handleBadgeTypeChange}\n            /> */}\n          </Grid>\n\n          <Grid item xs={12}>\n          <InputLabel shrink id=\"badgeDetails_evidenceRequired\">\n                        Evidence Required\n                    </InputLabel>\n                        <Select\n                        variant =\"outlined\"\n                            labelId=\"badgeDetails_evidenceRequired\"\n                            id=\"badgeDetails_evidenceRequired\"\n                            name=\"badgeDetails_evidenceRequired\"\n                            fullWidth\n                            label=\"Evidence Required\"\n                            inputProps={{\n                                \"data-testid\": \"badgeDetails_evidenceRequired\",\n                            }}\n                            value={evidenceRequired}\n                            onChange={handleEvidenceRequiredChange}\n                            >\n                            <MenuItem value={'True'}>True</MenuItem>\n                            <MenuItem value={'False'}>False</MenuItem>\n                        </Select>\n            {/* <TextField\n              variant=\"outlined\"\n              fullWidth\n              name=\"evidenceRequired\"\n              label=\"Evidence Required\"\n              id=\"evidenceRequired\"\n              inputProps={{\n                \"data-testid\": \"badgeDetails_evidenceRequired\",\n              }}\n              value={evidenceRequired}\n              onChange={handleEvidenceRequiredChange}\n            /> */}\n          </Grid>\n          <Grid item xs={12}>\n          <InputLabel shrink id=\"badgeDetails_userRequestable\">\n                        User Requestable\n                    </InputLabel>\n                        <Select\n                        variant =\"outlined\"\n                            labelId=\"badgeDetails_userRequestable\"\n                            id=\"badgeDetails_userRequestable\"\n                            name=\"badgeDetails_userRequestable\"\n                            fullWidth\n                            label=\"User Requestable\"\n                            inputProps={{\n                                \"data-testid\": \"badgeDetails_userRequestable\",\n                            }}\n                            value={userRequestable}\n                            onChange={handleUserRequestableChange}\n                            >\n                            <MenuItem value={'True'}>True</MenuItem>\n                            <MenuItem value={'False'}>False</MenuItem>\n                        </Select>\n            {/* <TextField\n              variant=\"outlined\"\n              fullWidth\n              name=\"userRequestable\"\n              label=\"User Requestable\"\n              id=\"userRequestable\"\n              inputProps={{\n                \"data-testid\": \"badgeDetails_userRequestable\",\n              }}\n              value={userRequestable}\n              onChange={handleUserRequestableChange}\n            /> */}\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              variant=\"outlined\"\n              fullWidth\n              name=\"owners\"\n              label=\"Owners of Badge\"\n              id=\"owners\"\n              inputProps={{\n                \"data-testid\": \"badgeDetails_owners\",\n              }}\n              value={owners}\n              onChange={handleOwnerChange}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              variant=\"outlined\"\n              fullWidth\n              \n              name=\"reviewers\"\n              label=\"Reviewers of Badge\"\n              id=\"reviewers\"\n              inputProps={{\n                \"data-testid\": \"badgeDetails_reviewers\",\n              }}\n              value={reviewers}\n              onChange={handleReviewerChange}\n            />\n          </Grid>\n\n        </Grid>\n        <Grid container spacing={1}>\n          <Grid item xs={12} sm={6}>\n            <Button\n              type=\"submit\"\n              fullWidth\n              disabled={saveFlag=='True'?false:true}\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.submit}\n              data-testid=\"badgeDetails_UpdateButton\"\n              onClick={handleSaveButtonClick} >\n              \n              Save\n        </Button>\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n            data-testid=\"badgeDetails_backButton\" \n            onClick={handleBackButtonClick}>\n            Back to Badges\n        </Button>\n          </Grid>\n        </Grid>\n        <label>{result}</label>\n        <input type=\"text\" hidden data-testid='badgeDetails_Result' value={result} />\n      </div>\n    </Container>\n);\n}\nelse{\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        {/* <Avatar className={classes.avatar}>\n          <CardMembershipOutlinedIcon />\n        </Avatar> */}\n        <Typography >\n          {/* <CardMembershipOutlinedIcon /> */}\n          <img src={icon} width=\"150\"/>\n        </Typography>\n        <Typography component=\"h1\" variant=\"h5\">\n          Badge Details\n      </Typography>\n        <br></br>\n        {/* <form className={classes.form} noValidate> */}\n        <Grid container spacing={2}>\n          <Grid item xs={12} >\n            <TextField\n              name=\"badgeName\"\n              variant=\"outlined\"\n              fullWidth\n\n              id=\"badgeName\"\n              label=\"Badge Name\"\n              inputProps={{\n                \"data-testid\": \"badgeDetails_badgeName\",\n              }}\n              value={badgeName}\n            />\n          </Grid>\n          <Grid item xs={12} >\n            <TextField\n              variant=\"outlined\"\n              fullWidth\n              multiline\n              id=\"badgeDescriptoion\"\n              label=\"Badge Description\"\n              name=\"badgeDescriptoion\"\n              inputProps={{\n                \"data-testid\": \"badgeDetails_badgeDescription\",\n              }}\n              value={badgeDescriptoion}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              variant=\"outlined\"\n              fullWidth\n              id=\"createdDate\"\n              label=\"Created Date\"\n              name=\"createdDate\"\n              inputProps={{\n                \"data-testid\": \"badgedetails_createdDate\",\n              }}\n              value={createdDate}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              variant=\"outlined\"\n              fullWidth\n              id=\"modifiedDate\"\n              label=\"modified Date\"\n              name=\"modifiedDate\"\n              inputProps={{\n                \"data-testid\": \"badgeDetails_modifiedDate\",\n              }}\n              value={modifiedDate}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              variant=\"outlined\"\n              fullWidth\n              name=\"link\"\n              label=\"Link\"\n              id=\"link\"\n              inputProps={{\n                \"data-testid\": \"badgeDetails_link\",\n              }}\n              value={link}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              variant=\"outlined\"\n              fullWidth\n              name=\"badgeType\"\n              label=\"Badge Type\"\n              id=\"badgeType\"\n              inputProps={{\n                \"data-testid\": \"badgeDetails_badgeType\",\n              }}\n              value={badgeType}\n            />\n          </Grid>\n\n          <Grid item xs={12}>\n            <TextField\n              variant=\"outlined\"\n              fullWidth\n              name=\"evidenceRequired\"\n              label=\"Evidence Required\"\n              id=\"evidenceRequired\"\n              inputProps={{\n                \"data-testid\": \"badgeDetails_evidenceRequired\",\n              }}\n              value={evidenceRequired}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              variant=\"outlined\"\n              fullWidth\n              name=\"userRequestable\"\n              label=\"User Requestable\"\n              id=\"userRequestable\"\n              inputProps={{\n                \"data-testid\": \"badgeDetails_userRequestable\",\n              }}\n              value={userRequestable}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              variant=\"outlined\"\n              fullWidth\n              name=\"owners\"\n              label=\"Owners of Badge\"\n              id=\"owners\"\n              inputProps={{\n                \"data-testid\": \"badgeDetails_owners\",\n              }}\n              value={owners}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              variant=\"outlined\"\n              fullWidth\n              \n              name=\"reviewers\"\n              label=\"Reviewers of Badge\"\n              id=\"reviewers\"\n              inputProps={{\n                \"data-testid\": \"badgeDetails_reviewers\",\n              }}\n              value={reviewers}\n            />\n          </Grid>\n\n        </Grid>\n        <Grid container spacing={1}>\n          <Grid item xs={12} sm={6}>\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.submit}\n              data-testid=\"badgeDetails_requestButton\" \n              onClick={handleRequestBadgeButtonClick}>\n              Request Badge\n        </Button>\n        <Dialog open={requestBadgeButtonClicked} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\">Request Badge</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            To request badge please enter your Evidence Link\n          </DialogContentText>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"workLink\"\n            label=\"Evidence Link\"\n            type=\"url\"\n            fullWidth\n            onChange={handleWorkLinkChange}\n            value={workLink}\n            required\n            inputProps={{\n              \"data-testid\": \"badgeDetails_workLink\",\n            }}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={handlerequestBadge} data-testid=\"badgeDetails_applyBadge\"  color=\"primary\">\n            Request Badge\n          </Button>\n        </DialogActions>\n      </Dialog>\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            {/* <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n            data-testid=\"badgeDetails_backButton\" >\n            Back to Badges\n        </Button> */}\n          </Grid>\n        </Grid>\n        <label>{requestBadgeResult}</label>\n        <input type=\"text\" hidden data-testid='badgeDetails_RequestResult' value={requestBadgeResult} readOnly />\n      </div>\n    </Container>\n  );\n      }\n    }\n  //   }\n  // }\n};\n\nexport default BadgeDetailsForm;","/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/API/ViewAssertionsAPI.js",[],"/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/API/ViewBadgeAPI.js",[],"/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/API/AddLinkedInCertificateAPI.js",["392"],"const getLinkedInResponse = async(name,issueMonth,issueYear,url) => {\n\n    var url = 'https://www.linkedin.com/profile/add?startTask=CERTIFICATION_NAME&name=' + name + '&organizationId=16198010&issueYear=' + issueYear+'&issueMonth='+issueMonth+'&certUrl='+url;\n    \n    window.open(url);\n    \n}\n\nexport default getLinkedInResponse;","/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/API/UpdateAssertionAPI.js",[],"/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/API/UpdateUserBadgeStatusAPI.js",[],"/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/API/AddNewUserAPI.js",[],["393","394"],"/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/API/AddNewAssertionAPI.js",[],"/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/API/UpdateBadgeAPI.js",[],"/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/API/BadgeDetailsByNameAPI.js",[],"/Users/preethiprabhakar/DXC-Industrialized-AI-Badge-Platform/UI/src/API/UpdateUserDetailsAPI.js",[],{"ruleId":"395","replacedBy":"396"},{"ruleId":"397","replacedBy":"398"},{"ruleId":"399","severity":1,"message":"400","line":3,"column":8,"nodeType":"401","messageId":"402","endLine":3,"endColumn":24},{"ruleId":"399","severity":1,"message":"403","line":4,"column":8,"nodeType":"401","messageId":"402","endLine":4,"endColumn":23},{"ruleId":"399","severity":1,"message":"404","line":10,"column":3,"nodeType":"401","messageId":"402","endLine":10,"endColumn":7},{"ruleId":"399","severity":1,"message":"405","line":9,"column":8,"nodeType":"401","messageId":"402","endLine":9,"endColumn":24},{"ruleId":"399","severity":1,"message":"406","line":10,"column":8,"nodeType":"401","messageId":"402","endLine":10,"endColumn":16},{"ruleId":"399","severity":1,"message":"407","line":13,"column":8,"nodeType":"401","messageId":"402","endLine":13,"endColumn":11},{"ruleId":"399","severity":1,"message":"408","line":19,"column":8,"nodeType":"401","messageId":"402","endLine":19,"endColumn":23},{"ruleId":"399","severity":1,"message":"409","line":20,"column":8,"nodeType":"401","messageId":"402","endLine":20,"endColumn":18},{"ruleId":"399","severity":1,"message":"410","line":68,"column":13,"nodeType":"401","messageId":"402","endLine":68,"endColumn":21},{"ruleId":"411","severity":1,"message":"412","line":77,"column":15,"nodeType":"413","messageId":"414","endLine":77,"endColumn":17},{"ruleId":"411","severity":1,"message":"412","line":77,"column":55,"nodeType":"413","messageId":"414","endLine":77,"endColumn":57},{"ruleId":"411","severity":1,"message":"412","line":77,"column":95,"nodeType":"413","messageId":"414","endLine":77,"endColumn":97},{"ruleId":"411","severity":1,"message":"412","line":89,"column":22,"nodeType":"413","messageId":"414","endLine":89,"endColumn":24},{"ruleId":"411","severity":1,"message":"412","line":172,"column":32,"nodeType":"413","messageId":"414","endLine":172,"endColumn":34},{"ruleId":"411","severity":1,"message":"412","line":172,"column":51,"nodeType":"413","messageId":"414","endLine":172,"endColumn":53},{"ruleId":"411","severity":1,"message":"412","line":191,"column":35,"nodeType":"413","messageId":"414","endLine":191,"endColumn":37},{"ruleId":"411","severity":1,"message":"412","line":191,"column":57,"nodeType":"413","messageId":"414","endLine":191,"endColumn":59},{"ruleId":"399","severity":1,"message":"415","line":1,"column":27,"nodeType":"401","messageId":"402","endLine":1,"endColumn":31},{"ruleId":"399","severity":1,"message":"405","line":8,"column":8,"nodeType":"401","messageId":"402","endLine":8,"endColumn":24},{"ruleId":"399","severity":1,"message":"406","line":9,"column":8,"nodeType":"401","messageId":"402","endLine":9,"endColumn":16},{"ruleId":"399","severity":1,"message":"407","line":12,"column":8,"nodeType":"401","messageId":"402","endLine":12,"endColumn":11},{"ruleId":"399","severity":1,"message":"416","line":23,"column":10,"nodeType":"401","messageId":"402","endLine":23,"endColumn":20},{"ruleId":"399","severity":1,"message":"417","line":41,"column":9,"nodeType":"401","messageId":"402","endLine":41,"endColumn":31},{"ruleId":"411","severity":1,"message":"418","line":94,"column":18,"nodeType":"413","messageId":"414","endLine":94,"endColumn":20},{"ruleId":"399","severity":1,"message":"410","line":100,"column":11,"nodeType":"401","messageId":"402","endLine":100,"endColumn":19},{"ruleId":"399","severity":1,"message":"419","line":108,"column":9,"nodeType":"401","messageId":"402","endLine":108,"endColumn":20},{"ruleId":"411","severity":1,"message":"412","line":112,"column":16,"nodeType":"413","messageId":"414","endLine":112,"endColumn":18},{"ruleId":"411","severity":1,"message":"412","line":121,"column":18,"nodeType":"413","messageId":"414","endLine":121,"endColumn":20},{"ruleId":"411","severity":1,"message":"412","line":151,"column":48,"nodeType":"413","messageId":"414","endLine":151,"endColumn":50},{"ruleId":"411","severity":1,"message":"412","line":151,"column":71,"nodeType":"413","messageId":"414","endLine":151,"endColumn":73},{"ruleId":"411","severity":1,"message":"412","line":169,"column":47,"nodeType":"413","messageId":"414","endLine":169,"endColumn":49},{"ruleId":"411","severity":1,"message":"412","line":169,"column":69,"nodeType":"413","messageId":"414","endLine":169,"endColumn":71},{"ruleId":"411","severity":1,"message":"412","line":202,"column":44,"nodeType":"413","messageId":"414","endLine":202,"endColumn":46},{"ruleId":"411","severity":1,"message":"412","line":202,"column":63,"nodeType":"413","messageId":"414","endLine":202,"endColumn":65},{"ruleId":"411","severity":1,"message":"412","line":218,"column":47,"nodeType":"413","messageId":"414","endLine":218,"endColumn":49},{"ruleId":"411","severity":1,"message":"412","line":218,"column":65,"nodeType":"413","messageId":"414","endLine":218,"endColumn":67},{"ruleId":"411","severity":1,"message":"412","line":236,"column":54,"nodeType":"413","messageId":"414","endLine":236,"endColumn":56},{"ruleId":"411","severity":1,"message":"412","line":236,"column":76,"nodeType":"413","messageId":"414","endLine":236,"endColumn":78},{"ruleId":"399","severity":1,"message":"415","line":1,"column":26,"nodeType":"401","messageId":"402","endLine":1,"endColumn":30},{"ruleId":"399","severity":1,"message":"420","line":3,"column":8,"nodeType":"401","messageId":"402","endLine":3,"endColumn":14},{"ruleId":"399","severity":1,"message":"405","line":6,"column":8,"nodeType":"401","messageId":"402","endLine":6,"endColumn":24},{"ruleId":"399","severity":1,"message":"406","line":7,"column":8,"nodeType":"401","messageId":"402","endLine":7,"endColumn":16},{"ruleId":"399","severity":1,"message":"404","line":8,"column":8,"nodeType":"401","messageId":"402","endLine":8,"endColumn":12},{"ruleId":"399","severity":1,"message":"407","line":10,"column":8,"nodeType":"401","messageId":"402","endLine":10,"endColumn":11},{"ruleId":"399","severity":1,"message":"421","line":12,"column":8,"nodeType":"401","messageId":"402","endLine":12,"endColumn":24},{"ruleId":"399","severity":1,"message":"422","line":17,"column":8,"nodeType":"401","messageId":"402","endLine":17,"endColumn":19},{"ruleId":"399","severity":1,"message":"423","line":20,"column":8,"nodeType":"401","messageId":"402","endLine":20,"endColumn":26},{"ruleId":"399","severity":1,"message":"424","line":25,"column":20,"nodeType":"401","messageId":"402","endLine":25,"endColumn":26},{"ruleId":"399","severity":1,"message":"425","line":26,"column":3,"nodeType":"401","messageId":"402","endLine":26,"endColumn":9},{"ruleId":"399","severity":1,"message":"426","line":27,"column":3,"nodeType":"401","messageId":"402","endLine":27,"endColumn":8},{"ruleId":"399","severity":1,"message":"427","line":91,"column":11,"nodeType":"401","messageId":"402","endLine":91,"endColumn":20},{"ruleId":"411","severity":1,"message":"418","line":94,"column":21,"nodeType":"413","messageId":"414","endLine":94,"endColumn":23},{"ruleId":"428","severity":1,"message":"429","line":113,"column":8,"nodeType":"430","endLine":113,"endColumn":10,"suggestions":"431"},{"ruleId":"399","severity":1,"message":"400","line":4,"column":8,"nodeType":"401","messageId":"402","endLine":4,"endColumn":24},{"ruleId":"411","severity":1,"message":"412","line":70,"column":21,"nodeType":"413","messageId":"414","endLine":70,"endColumn":23},{"ruleId":"411","severity":1,"message":"412","line":70,"column":43,"nodeType":"413","messageId":"414","endLine":70,"endColumn":45},{"ruleId":"411","severity":1,"message":"412","line":70,"column":58,"nodeType":"413","messageId":"414","endLine":70,"endColumn":60},{"ruleId":"411","severity":1,"message":"412","line":70,"column":69,"nodeType":"413","messageId":"414","endLine":70,"endColumn":71},{"ruleId":"411","severity":1,"message":"412","line":70,"column":83,"nodeType":"413","messageId":"414","endLine":70,"endColumn":85},{"ruleId":"399","severity":1,"message":"410","line":77,"column":13,"nodeType":"401","messageId":"402","endLine":77,"endColumn":21},{"ruleId":"399","severity":1,"message":"432","line":1,"column":17,"nodeType":"401","messageId":"402","endLine":1,"endColumn":30},{"ruleId":"399","severity":1,"message":"407","line":6,"column":8,"nodeType":"401","messageId":"402","endLine":6,"endColumn":11},{"ruleId":"399","severity":1,"message":"404","line":17,"column":8,"nodeType":"401","messageId":"402","endLine":17,"endColumn":12},{"ruleId":"399","severity":1,"message":"433","line":49,"column":21,"nodeType":"401","messageId":"402","endLine":49,"endColumn":32},{"ruleId":"399","severity":1,"message":"434","line":50,"column":18,"nodeType":"401","messageId":"402","endLine":50,"endColumn":26},{"ruleId":"399","severity":1,"message":"427","line":266,"column":9,"nodeType":"401","messageId":"402","endLine":266,"endColumn":18},{"ruleId":"411","severity":1,"message":"418","line":269,"column":19,"nodeType":"413","messageId":"414","endLine":269,"endColumn":21},{"ruleId":"428","severity":1,"message":"435","line":280,"column":4,"nodeType":"430","endLine":280,"endColumn":6,"suggestions":"436"},{"ruleId":"411","severity":1,"message":"412","line":327,"column":18,"nodeType":"413","messageId":"414","endLine":327,"endColumn":20},{"ruleId":"411","severity":1,"message":"412","line":327,"column":89,"nodeType":"413","messageId":"414","endLine":327,"endColumn":91},{"ruleId":"411","severity":1,"message":"412","line":336,"column":28,"nodeType":"413","messageId":"414","endLine":336,"endColumn":30},{"ruleId":"411","severity":1,"message":"412","line":337,"column":28,"nodeType":"413","messageId":"414","endLine":337,"endColumn":30},{"ruleId":"411","severity":1,"message":"412","line":338,"column":28,"nodeType":"413","messageId":"414","endLine":338,"endColumn":30},{"ruleId":"411","severity":1,"message":"412","line":339,"column":28,"nodeType":"413","messageId":"414","endLine":339,"endColumn":30},{"ruleId":"411","severity":1,"message":"412","line":340,"column":28,"nodeType":"413","messageId":"414","endLine":340,"endColumn":30},{"ruleId":"437","severity":1,"message":"438","line":3,"column":120,"nodeType":"413","messageId":"439","endLine":3,"endColumn":121},{"ruleId":"399","severity":1,"message":"440","line":4,"column":8,"nodeType":"401","messageId":"402","endLine":4,"endColumn":18},{"ruleId":"399","severity":1,"message":"404","line":15,"column":8,"nodeType":"401","messageId":"402","endLine":15,"endColumn":12},{"ruleId":"399","severity":1,"message":"441","line":23,"column":15,"nodeType":"401","messageId":"402","endLine":23,"endColumn":24},{"ruleId":"399","severity":1,"message":"427","line":77,"column":9,"nodeType":"401","messageId":"402","endLine":77,"endColumn":18},{"ruleId":"411","severity":1,"message":"418","line":80,"column":17,"nodeType":"413","messageId":"414","endLine":80,"endColumn":19},{"ruleId":"428","severity":1,"message":"442","line":97,"column":8,"nodeType":"430","endLine":97,"endColumn":10,"suggestions":"443"},{"ruleId":"399","severity":1,"message":"444","line":99,"column":13,"nodeType":"401","messageId":"402","endLine":99,"endColumn":18},{"ruleId":"411","severity":1,"message":"412","line":103,"column":28,"nodeType":"413","messageId":"414","endLine":103,"endColumn":30},{"ruleId":"399","severity":1,"message":"415","line":1,"column":27,"nodeType":"401","messageId":"402","endLine":1,"endColumn":31},{"ruleId":"399","severity":1,"message":"445","line":11,"column":8,"nodeType":"401","messageId":"402","endLine":11,"endColumn":14},{"ruleId":"399","severity":1,"message":"446","line":13,"column":8,"nodeType":"401","messageId":"402","endLine":13,"endColumn":28},{"ruleId":"399","severity":1,"message":"447","line":14,"column":8,"nodeType":"401","messageId":"402","endLine":14,"endColumn":33},{"ruleId":"399","severity":1,"message":"448","line":28,"column":18,"nodeType":"401","messageId":"402","endLine":28,"endColumn":27},{"ruleId":"399","severity":1,"message":"427","line":58,"column":9,"nodeType":"401","messageId":"402","endLine":58,"endColumn":18},{"ruleId":"411","severity":1,"message":"418","line":61,"column":17,"nodeType":"413","messageId":"414","endLine":61,"endColumn":19},{"ruleId":"428","severity":1,"message":"449","line":78,"column":6,"nodeType":"430","endLine":78,"endColumn":8,"suggestions":"450"},{"ruleId":"411","severity":1,"message":"412","line":80,"column":24,"nodeType":"413","messageId":"414","endLine":80,"endColumn":26},{"ruleId":"411","severity":1,"message":"412","line":82,"column":23,"nodeType":"413","messageId":"414","endLine":82,"endColumn":25},{"ruleId":"399","severity":1,"message":"415","line":1,"column":27,"nodeType":"401","messageId":"402","endLine":1,"endColumn":31},{"ruleId":"399","severity":1,"message":"445","line":11,"column":8,"nodeType":"401","messageId":"402","endLine":11,"endColumn":14},{"ruleId":"399","severity":1,"message":"434","line":21,"column":18,"nodeType":"401","messageId":"402","endLine":21,"endColumn":26},{"ruleId":"399","severity":1,"message":"433","line":22,"column":19,"nodeType":"401","messageId":"402","endLine":22,"endColumn":30},{"ruleId":"399","severity":1,"message":"448","line":23,"column":17,"nodeType":"401","messageId":"402","endLine":23,"endColumn":26},{"ruleId":"399","severity":1,"message":"451","line":46,"column":9,"nodeType":"401","messageId":"402","endLine":46,"endColumn":16},{"ruleId":"399","severity":1,"message":"427","line":51,"column":9,"nodeType":"401","messageId":"402","endLine":51,"endColumn":18},{"ruleId":"411","severity":1,"message":"418","line":54,"column":17,"nodeType":"413","messageId":"414","endLine":54,"endColumn":19},{"ruleId":"428","severity":1,"message":"452","line":72,"column":6,"nodeType":"430","endLine":72,"endColumn":8,"suggestions":"453"},{"ruleId":"411","severity":1,"message":"412","line":74,"column":28,"nodeType":"413","messageId":"414","endLine":74,"endColumn":30},{"ruleId":"399","severity":1,"message":"415","line":1,"column":27,"nodeType":"401","messageId":"402","endLine":1,"endColumn":31},{"ruleId":"399","severity":1,"message":"433","line":20,"column":20,"nodeType":"401","messageId":"402","endLine":20,"endColumn":31},{"ruleId":"399","severity":1,"message":"448","line":21,"column":18,"nodeType":"401","messageId":"402","endLine":21,"endColumn":27},{"ruleId":"399","severity":1,"message":"454","line":30,"column":10,"nodeType":"401","messageId":"402","endLine":30,"endColumn":23},{"ruleId":"399","severity":1,"message":"455","line":30,"column":24,"nodeType":"401","messageId":"402","endLine":30,"endColumn":40},{"ruleId":"399","severity":1,"message":"451","line":48,"column":9,"nodeType":"401","messageId":"402","endLine":48,"endColumn":16},{"ruleId":"399","severity":1,"message":"427","line":53,"column":9,"nodeType":"401","messageId":"402","endLine":53,"endColumn":18},{"ruleId":"411","severity":1,"message":"418","line":56,"column":17,"nodeType":"413","messageId":"414","endLine":56,"endColumn":19},{"ruleId":"428","severity":1,"message":"456","line":77,"column":6,"nodeType":"430","endLine":77,"endColumn":8,"suggestions":"457"},{"ruleId":"411","severity":1,"message":"412","line":79,"column":21,"nodeType":"413","messageId":"414","endLine":79,"endColumn":23},{"ruleId":"458","severity":1,"message":"459","line":105,"column":28,"nodeType":"460","endLine":105,"endColumn":61},{"ruleId":"411","severity":1,"message":"412","line":110,"column":26,"nodeType":"413","messageId":"414","endLine":110,"endColumn":28},{"ruleId":"399","severity":1,"message":"415","line":1,"column":26,"nodeType":"401","messageId":"402","endLine":1,"endColumn":30},{"ruleId":"399","severity":1,"message":"461","line":12,"column":8,"nodeType":"401","messageId":"402","endLine":12,"endColumn":34},{"ruleId":"399","severity":1,"message":"427","line":84,"column":13,"nodeType":"401","messageId":"402","endLine":84,"endColumn":22},{"ruleId":"411","severity":1,"message":"418","line":89,"column":23,"nodeType":"413","messageId":"414","endLine":89,"endColumn":25},{"ruleId":"399","severity":1,"message":"427","line":100,"column":13,"nodeType":"401","messageId":"402","endLine":100,"endColumn":22},{"ruleId":"411","severity":1,"message":"418","line":104,"column":23,"nodeType":"413","messageId":"414","endLine":104,"endColumn":25},{"ruleId":"428","severity":1,"message":"462","line":131,"column":8,"nodeType":"430","endLine":131,"endColumn":10,"suggestions":"463"},{"ruleId":"411","severity":1,"message":"412","line":133,"column":26,"nodeType":"413","messageId":"414","endLine":133,"endColumn":28},{"ruleId":"458","severity":1,"message":"459","line":150,"column":17,"nodeType":"460","endLine":150,"endColumn":51},{"ruleId":"399","severity":1,"message":"415","line":1,"column":27,"nodeType":"401","messageId":"402","endLine":1,"endColumn":31},{"ruleId":"399","severity":1,"message":"464","line":2,"column":8,"nodeType":"401","messageId":"402","endLine":2,"endColumn":31},{"ruleId":"399","severity":1,"message":"465","line":3,"column":8,"nodeType":"401","messageId":"402","endLine":3,"endColumn":17},{"ruleId":"399","severity":1,"message":"405","line":8,"column":8,"nodeType":"401","messageId":"402","endLine":8,"endColumn":24},{"ruleId":"399","severity":1,"message":"406","line":9,"column":8,"nodeType":"401","messageId":"402","endLine":9,"endColumn":16},{"ruleId":"399","severity":1,"message":"404","line":10,"column":8,"nodeType":"401","messageId":"402","endLine":10,"endColumn":12},{"ruleId":"399","severity":1,"message":"407","line":12,"column":8,"nodeType":"401","messageId":"402","endLine":12,"endColumn":11},{"ruleId":"399","severity":1,"message":"421","line":13,"column":8,"nodeType":"401","messageId":"402","endLine":13,"endColumn":24},{"ruleId":"399","severity":1,"message":"434","line":29,"column":19,"nodeType":"401","messageId":"402","endLine":29,"endColumn":27},{"ruleId":"399","severity":1,"message":"466","line":38,"column":21,"nodeType":"401","messageId":"402","endLine":38,"endColumn":31},{"ruleId":"399","severity":1,"message":"427","line":70,"column":13,"nodeType":"401","messageId":"402","endLine":70,"endColumn":22},{"ruleId":"411","severity":1,"message":"418","line":73,"column":23,"nodeType":"413","messageId":"414","endLine":73,"endColumn":25},{"ruleId":"399","severity":1,"message":"467","line":91,"column":13,"nodeType":"401","messageId":"402","endLine":91,"endColumn":22},{"ruleId":"411","severity":1,"message":"412","line":94,"column":22,"nodeType":"413","messageId":"414","endLine":94,"endColumn":24},{"ruleId":"428","severity":1,"message":"435","line":107,"column":8,"nodeType":"430","endLine":107,"endColumn":10,"suggestions":"468"},{"ruleId":"411","severity":1,"message":"412","line":139,"column":26,"nodeType":"413","messageId":"414","endLine":139,"endColumn":28},{"ruleId":"411","severity":1,"message":"412","line":341,"column":47,"nodeType":"413","messageId":"414","endLine":341,"endColumn":49},{"ruleId":"399","severity":1,"message":"415","line":1,"column":26,"nodeType":"401","messageId":"402","endLine":1,"endColumn":30},{"ruleId":"399","severity":1,"message":"464","line":2,"column":8,"nodeType":"401","messageId":"402","endLine":2,"endColumn":31},{"ruleId":"399","severity":1,"message":"465","line":3,"column":8,"nodeType":"401","messageId":"402","endLine":3,"endColumn":17},{"ruleId":"399","severity":1,"message":"469","line":4,"column":8,"nodeType":"401","messageId":"402","endLine":4,"endColumn":14},{"ruleId":"399","severity":1,"message":"405","line":8,"column":8,"nodeType":"401","messageId":"402","endLine":8,"endColumn":24},{"ruleId":"399","severity":1,"message":"406","line":9,"column":8,"nodeType":"401","messageId":"402","endLine":9,"endColumn":16},{"ruleId":"399","severity":1,"message":"404","line":10,"column":8,"nodeType":"401","messageId":"402","endLine":10,"endColumn":12},{"ruleId":"399","severity":1,"message":"407","line":12,"column":8,"nodeType":"401","messageId":"402","endLine":12,"endColumn":11},{"ruleId":"399","severity":1,"message":"421","line":13,"column":8,"nodeType":"401","messageId":"402","endLine":13,"endColumn":24},{"ruleId":"399","severity":1,"message":"461","line":19,"column":8,"nodeType":"401","messageId":"402","endLine":19,"endColumn":34},{"ruleId":"399","severity":1,"message":"434","line":45,"column":18,"nodeType":"401","messageId":"402","endLine":45,"endColumn":26},{"ruleId":"399","severity":1,"message":"433","line":47,"column":21,"nodeType":"401","messageId":"402","endLine":47,"endColumn":32},{"ruleId":"399","severity":1,"message":"427","line":75,"column":13,"nodeType":"401","messageId":"402","endLine":75,"endColumn":22},{"ruleId":"411","severity":1,"message":"418","line":78,"column":23,"nodeType":"413","messageId":"414","endLine":78,"endColumn":25},{"ruleId":"411","severity":1,"message":"418","line":86,"column":45,"nodeType":"413","messageId":"414","endLine":86,"endColumn":47},{"ruleId":"411","severity":1,"message":"412","line":102,"column":17,"nodeType":"413","messageId":"414","endLine":102,"endColumn":19},{"ruleId":"411","severity":1,"message":"412","line":107,"column":22,"nodeType":"413","messageId":"414","endLine":107,"endColumn":24},{"ruleId":"470","severity":1,"message":"471","line":116,"column":13,"nodeType":"401","messageId":"472","endLine":116,"endColumn":22},{"ruleId":"399","severity":1,"message":"467","line":116,"column":13,"nodeType":"401","messageId":"402","endLine":116,"endColumn":22},{"ruleId":"411","severity":1,"message":"412","line":120,"column":22,"nodeType":"413","messageId":"414","endLine":120,"endColumn":24},{"ruleId":"399","severity":1,"message":"473","line":131,"column":11,"nodeType":"401","messageId":"402","endLine":131,"endColumn":32},{"ruleId":"399","severity":1,"message":"427","line":133,"column":13,"nodeType":"401","messageId":"402","endLine":133,"endColumn":22},{"ruleId":"411","severity":1,"message":"418","line":136,"column":23,"nodeType":"413","messageId":"414","endLine":136,"endColumn":25},{"ruleId":"428","severity":1,"message":"462","line":153,"column":8,"nodeType":"430","endLine":153,"endColumn":10,"suggestions":"474"},{"ruleId":"411","severity":1,"message":"412","line":175,"column":26,"nodeType":"413","messageId":"414","endLine":175,"endColumn":28},{"ruleId":"458","severity":1,"message":"459","line":192,"column":17,"nodeType":"460","endLine":192,"endColumn":46},{"ruleId":"411","severity":1,"message":"412","line":307,"column":47,"nodeType":"413","messageId":"414","endLine":307,"endColumn":49},{"ruleId":"411","severity":1,"message":"412","line":350,"column":47,"nodeType":"413","messageId":"414","endLine":350,"endColumn":49},{"ruleId":"411","severity":1,"message":"412","line":392,"column":47,"nodeType":"413","messageId":"414","endLine":392,"endColumn":49},{"ruleId":"399","severity":1,"message":"415","line":1,"column":27,"nodeType":"401","messageId":"402","endLine":1,"endColumn":31},{"ruleId":"399","severity":1,"message":"475","line":1,"column":33,"nodeType":"401","messageId":"402","endLine":1,"endColumn":42},{"ruleId":"399","severity":1,"message":"464","line":2,"column":8,"nodeType":"401","messageId":"402","endLine":2,"endColumn":31},{"ruleId":"399","severity":1,"message":"465","line":3,"column":8,"nodeType":"401","messageId":"402","endLine":3,"endColumn":17},{"ruleId":"399","severity":1,"message":"405","line":8,"column":8,"nodeType":"401","messageId":"402","endLine":8,"endColumn":24},{"ruleId":"399","severity":1,"message":"406","line":9,"column":8,"nodeType":"401","messageId":"402","endLine":9,"endColumn":16},{"ruleId":"399","severity":1,"message":"404","line":10,"column":8,"nodeType":"401","messageId":"402","endLine":10,"endColumn":12},{"ruleId":"399","severity":1,"message":"407","line":12,"column":8,"nodeType":"401","messageId":"402","endLine":12,"endColumn":11},{"ruleId":"399","severity":1,"message":"421","line":13,"column":8,"nodeType":"401","messageId":"402","endLine":13,"endColumn":24},{"ruleId":"399","severity":1,"message":"447","line":17,"column":8,"nodeType":"401","messageId":"402","endLine":17,"endColumn":33},{"ruleId":"399","severity":1,"message":"409","line":19,"column":8,"nodeType":"401","messageId":"402","endLine":19,"endColumn":18},{"ruleId":"399","severity":1,"message":"476","line":25,"column":8,"nodeType":"401","messageId":"402","endLine":25,"endColumn":17},{"ruleId":"411","severity":1,"message":"418","line":85,"column":22,"nodeType":"413","messageId":"414","endLine":85,"endColumn":24},{"ruleId":"399","severity":1,"message":"467","line":91,"column":13,"nodeType":"401","messageId":"402","endLine":91,"endColumn":22},{"ruleId":"411","severity":1,"message":"412","line":94,"column":22,"nodeType":"413","messageId":"414","endLine":94,"endColumn":24},{"ruleId":"411","severity":1,"message":"412","line":159,"column":26,"nodeType":"413","messageId":"414","endLine":159,"endColumn":28},{"ruleId":"411","severity":1,"message":"412","line":191,"column":58,"nodeType":"413","messageId":"414","endLine":191,"endColumn":60},{"ruleId":"411","severity":1,"message":"412","line":191,"column":81,"nodeType":"413","messageId":"414","endLine":191,"endColumn":83},{"ruleId":"411","severity":1,"message":"412","line":209,"column":59,"nodeType":"413","messageId":"414","endLine":209,"endColumn":61},{"ruleId":"411","severity":1,"message":"412","line":209,"column":83,"nodeType":"413","messageId":"414","endLine":209,"endColumn":85},{"ruleId":"411","severity":1,"message":"412","line":226,"column":57,"nodeType":"413","messageId":"414","endLine":226,"endColumn":59},{"ruleId":"411","severity":1,"message":"412","line":226,"column":79,"nodeType":"413","messageId":"414","endLine":226,"endColumn":81},{"ruleId":"411","severity":1,"message":"412","line":243,"column":54,"nodeType":"413","messageId":"414","endLine":243,"endColumn":56},{"ruleId":"411","severity":1,"message":"412","line":243,"column":73,"nodeType":"413","messageId":"414","endLine":243,"endColumn":75},{"ruleId":"411","severity":1,"message":"412","line":264,"column":57,"nodeType":"413","messageId":"414","endLine":264,"endColumn":59},{"ruleId":"411","severity":1,"message":"412","line":264,"column":79,"nodeType":"413","messageId":"414","endLine":264,"endColumn":81},{"ruleId":"411","severity":1,"message":"412","line":287,"column":57,"nodeType":"413","messageId":"414","endLine":287,"endColumn":59},{"ruleId":"411","severity":1,"message":"412","line":287,"column":75,"nodeType":"413","messageId":"414","endLine":287,"endColumn":77},{"ruleId":"411","severity":1,"message":"412","line":305,"column":64,"nodeType":"413","messageId":"414","endLine":305,"endColumn":66},{"ruleId":"411","severity":1,"message":"412","line":305,"column":86,"nodeType":"413","messageId":"414","endLine":305,"endColumn":88},{"ruleId":"411","severity":1,"message":"412","line":322,"column":65,"nodeType":"413","messageId":"414","endLine":322,"endColumn":67},{"ruleId":"411","severity":1,"message":"412","line":322,"column":95,"nodeType":"413","messageId":"414","endLine":322,"endColumn":97},{"ruleId":"411","severity":1,"message":"412","line":335,"column":47,"nodeType":"413","messageId":"414","endLine":335,"endColumn":49},{"ruleId":"399","severity":1,"message":"415","line":1,"column":27,"nodeType":"401","messageId":"402","endLine":1,"endColumn":31},{"ruleId":"399","severity":1,"message":"464","line":2,"column":8,"nodeType":"401","messageId":"402","endLine":2,"endColumn":31},{"ruleId":"399","severity":1,"message":"465","line":3,"column":8,"nodeType":"401","messageId":"402","endLine":3,"endColumn":17},{"ruleId":"399","severity":1,"message":"469","line":4,"column":8,"nodeType":"401","messageId":"402","endLine":4,"endColumn":14},{"ruleId":"399","severity":1,"message":"405","line":8,"column":8,"nodeType":"401","messageId":"402","endLine":8,"endColumn":24},{"ruleId":"399","severity":1,"message":"406","line":9,"column":8,"nodeType":"401","messageId":"402","endLine":9,"endColumn":16},{"ruleId":"399","severity":1,"message":"404","line":10,"column":8,"nodeType":"401","messageId":"402","endLine":10,"endColumn":12},{"ruleId":"399","severity":1,"message":"407","line":12,"column":8,"nodeType":"401","messageId":"402","endLine":12,"endColumn":11},{"ruleId":"399","severity":1,"message":"421","line":13,"column":8,"nodeType":"401","messageId":"402","endLine":13,"endColumn":24},{"ruleId":"399","severity":1,"message":"461","line":19,"column":8,"nodeType":"401","messageId":"402","endLine":19,"endColumn":34},{"ruleId":"399","severity":1,"message":"477","line":22,"column":22,"nodeType":"401","messageId":"402","endLine":22,"endColumn":30},{"ruleId":"399","severity":1,"message":"433","line":38,"column":20,"nodeType":"401","messageId":"402","endLine":38,"endColumn":31},{"ruleId":"399","severity":1,"message":"448","line":39,"column":18,"nodeType":"401","messageId":"402","endLine":39,"endColumn":27},{"ruleId":"399","severity":1,"message":"467","line":119,"column":9,"nodeType":"401","messageId":"402","endLine":119,"endColumn":18},{"ruleId":"411","severity":1,"message":"412","line":122,"column":16,"nodeType":"413","messageId":"414","endLine":122,"endColumn":18},{"ruleId":"399","severity":1,"message":"478","line":141,"column":9,"nodeType":"401","messageId":"402","endLine":141,"endColumn":18},{"ruleId":"411","severity":1,"message":"412","line":145,"column":17,"nodeType":"413","messageId":"414","endLine":145,"endColumn":19},{"ruleId":"399","severity":1,"message":"427","line":157,"column":9,"nodeType":"401","messageId":"402","endLine":157,"endColumn":18},{"ruleId":"411","severity":1,"message":"418","line":160,"column":17,"nodeType":"413","messageId":"414","endLine":160,"endColumn":19},{"ruleId":"428","severity":1,"message":"479","line":185,"column":6,"nodeType":"430","endLine":185,"endColumn":8,"suggestions":"480"},{"ruleId":"411","severity":1,"message":"412","line":188,"column":22,"nodeType":"413","messageId":"414","endLine":188,"endColumn":24},{"ruleId":"411","severity":1,"message":"412","line":194,"column":12,"nodeType":"413","messageId":"414","endLine":194,"endColumn":14},{"ruleId":"458","severity":1,"message":"459","line":201,"column":11,"nodeType":"460","endLine":201,"endColumn":40},{"ruleId":"411","severity":1,"message":"412","line":415,"column":33,"nodeType":"413","messageId":"414","endLine":415,"endColumn":35},{"ruleId":"458","severity":1,"message":"459","line":454,"column":11,"nodeType":"460","endLine":454,"endColumn":40},{"ruleId":"470","severity":1,"message":"481","line":3,"column":9,"nodeType":"401","messageId":"472","endLine":3,"endColumn":12},{"ruleId":"395","replacedBy":"482"},{"ruleId":"397","replacedBy":"483"},"no-native-reassign",["484"],"no-negated-in-lhs",["485"],"no-unused-vars","'RegistrationForm' is defined but never used.","Identifier","unusedVar","'CreateBadgeForm' is defined but never used.","'Link' is defined but never used.","'FormControlLabel' is defined but never used.","'Checkbox' is defined but never used.","'Box' is defined but never used.","'formatTimeStamp' is defined but never used.","'formatDate' is defined but never used.","'response' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Text' is defined but never used.","'middleName' is assigned a value but never used.","'handleMiddleNameChange' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'handleReset' is assigned a value but never used.","'Button' is defined but never used.","'LockOutlinedIcon' is defined but never used.","'CardActions' is defined but never used.","'LabelImportantIcon' is defined but never used.","'Router' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'response1' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'assertionId' and 'handleviewAssertionById'. Either include them or remove the dependency array.","ArrayExpression",["486"],"'useDebugValue' is defined but never used.","'setUserType' is assigned a value but never used.","'setEmail' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'handleviewUserByEmail'. Either include it or remove the dependency array.",["487"],"no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'CameraIcon' is defined but never used.","'setuserID' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'handleviewBackpackAssertions'. Either include it or remove the dependency array.",["488"],"'cards' is assigned a value but never used.","'Hidden' is defined but never used.","'AssertionDetailsForm' is defined but never used.","'UserDetailByEmailResponse' is defined but never used.","'setUserID' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'handleviewUsers'. Either include it or remove the dependency array.",["489"],"'classes' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'handleviewAssertions'. Either include it or remove the dependency array.",["490"],"'passwordClick' is assigned a value but never used.","'setPasswordClick' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'handleviewBadge'. Either include it or remove the dependency array.",["491"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'CardMembershipOutlinedIcon' is defined but never used.","React Hook useEffect has a missing dependency: 'handleviewAssertionById'. Either include it or remove the dependency array.",["492"],"'getRegistrationResponse' is defined but never used.","'LoginForm' is defined but never used.","'setAdminId' is assigned a value but never used.","'response2' is assigned a value but never used.",["493"],"'Avatar' is defined but never used.","no-redeclare","'response2' is already defined.","redeclared","'handleviewUserByEmail' is assigned a value but never used.",["494"],"'useEffect' is defined but never used.","'userEvent' is defined but never used.","'StepIcon' is defined but never used.","'response3' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'handleviewBadgeByName'. Either include it or remove the dependency array.",["495"],"'url' is already defined.",["484"],["485"],"no-global-assign","no-unsafe-negation",{"desc":"496","fix":"497"},{"desc":"498","fix":"499"},{"desc":"500","fix":"501"},{"desc":"502","fix":"503"},{"desc":"504","fix":"505"},{"desc":"506","fix":"507"},{"desc":"508","fix":"509"},{"desc":"498","fix":"510"},{"desc":"508","fix":"511"},{"desc":"512","fix":"513"},"Update the dependencies array to be: [assertionId, handleviewAssertionById]",{"range":"514","text":"515"},"Update the dependencies array to be: [handleviewUserByEmail]",{"range":"516","text":"517"},"Update the dependencies array to be: [handleviewBackpackAssertions]",{"range":"518","text":"519"},"Update the dependencies array to be: [handleviewUsers]",{"range":"520","text":"521"},"Update the dependencies array to be: [handleviewAssertions]",{"range":"522","text":"523"},"Update the dependencies array to be: [handleviewBadge]",{"range":"524","text":"525"},"Update the dependencies array to be: [handleviewAssertionById]",{"range":"526","text":"527"},{"range":"528","text":"517"},{"range":"529","text":"527"},"Update the dependencies array to be: [handleviewBadgeByName]",{"range":"530","text":"531"},[3770,3772],"[assertionId, handleviewAssertionById]",[9294,9296],"[handleviewUserByEmail]",[2779,2781],"[handleviewBackpackAssertions]",[2768,2770],"[handleviewUsers]",[2254,2256],"[handleviewAssertions]",[2147,2149],"[handleviewBadge]",[4398,4400],"[handleviewAssertionById]",[3970,3972],[5527,5529],[6175,6177],"[handleviewBadgeByName]"]